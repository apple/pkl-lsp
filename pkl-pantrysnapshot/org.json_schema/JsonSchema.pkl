  //===----------------------------------------------------------------------===//
  // Copyright Â© 2024-2025 Apple Inc. and the Pkl project authors. All rights reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     https://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  //===----------------------------------------------------------------------===//
  /// A document that describes constraints on JSON values.
  ///
  /// Currently only supports JSON Schema 6 or higher.
  /// JSON Schema 4 isn't supported because of breaking changes in how [exclusiveMinimum] and [exclusiveMaximum] work.
  ///
  /// JSON Schema documentation can be found at <https://json-schema.org>.
  open module org.json_schema.JsonSchema
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
  
  import "pkl:reflect"
  import "JsonSchema.pkl"
  import "@uri/URI.pkl"
  
  typealias JsonSchemaTypeName = "string"|"number"|"integer"|"boolean"|"object"|"array"|"null"
//          ^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/JsonSchemaTypeName#
  
  typealias JsonSchemaVersion =
//          ^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/JsonSchemaVersion#
    "http://json-schema.org/draft-06/schema#"
    |"http://json-schema.org/draft-06/schema"
    |"http://json-schema.org/draft-07/schema#"
    |"http://json-schema.org/draft-07/schema"
    |"https://json-schema.org/draft/2019-09/schema"
    |"https://json-schema.org/draft/2020-12/schema"
    |String
//   ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  
  typealias JsonSchemaValue = Boolean|Number|Null|String|Dynamic|Typed|Listing|Mapping
//          ^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/JsonSchemaValue#
//                            ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                                    ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                                           ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Null#
//                                                ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                       ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#
//                                                               ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Typed#
//                                                                     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                                                                             ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
  
  /// A JSON Schema can either be a [JsonSchema] object or a simple boolean.
  ///
  /// A boolean schema is shorthand for:
  ///  - true: Any value is valid
  ///  - false: No value is valid
  typealias Schema = *JsonSchema|Boolean
//          ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
//          documentation
//          > A JSON Schema can either be a [`JsonSchema`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L22,C1) object or a simple boolean.
//          > 
//          > A boolean schema is shorthand for:
//          >  - true: Any value is valid
//          >  - false: No value is valid
//                    ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                               ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
  
  /// The known versions of JSON Schema.
  ///
  /// For example, `http://json-schema.org/draft-06/schema#`.
  hidden versions: List<String> =
//       ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/versions.
//       documentation
//       > The known versions of JSON Schema.
//       > 
//       > For example, `http://json-schema.org/draft-06/schema#`.
//                 ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
    (reflect.TypeAlias(JsonSchemaVersion).referent as reflect.UnionType).members
//   ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.reflect`/
//           ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.reflect`/TypeAlias().
//                     ^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/JsonSchemaVersion#
//                                        ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.reflect`/TypeAlias#referent.
//                                                            ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.reflect`/UnionType#
//                                                                       ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.reflect`/UnionType#members.
      .filterIsInstance(reflect.StringLiteralType)
//     ^^^^^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#filterIsInstance().
//                      ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.reflect`/
//                              ^^^^^^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.reflect`/StringLiteralType#
      .map((it) -> it.value)
//     ^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#map().
//          ^^ definition local it_54
//                 ^^ reference local it_54
//                    ^^^^^ reference pkl . pkl 0.29.0 `pkl.reflect`/StringLiteralType#value.
  
  /// Ensures that this document's [`$schema`] is later than [version].
  local function availableAfter(version: JsonSchemaVersion) =
//               ^^^^^^^^^^^^^^ definition local availableAfter_56
//               documentation
//               > Ensures that this document's ``$schema`` is later than [`version`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L57,C31).
//                              ^^^^^^^ definition local version_57
//                                       ^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/JsonSchemaVersion#
    if ($schema == null) // If $schema is unset, skip this check.
//      ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/$schema.
      true
    else
      let (currentVersion = versions.indexOfOrNull($schema))
//         ^^^^^^^^^^^^^^ definition local currentVersion_61
//                          ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/versions.
//                                   ^^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#indexOfOrNull().
//                                                 ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/$schema.
      let (availableAfterVersion = versions.indexOf(version))
//         ^^^^^^^^^^^^^^^^^^^^^ definition local availableAfterVersion_62
//                                 ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/versions.
//                                          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#indexOf().
//                                                  ^^^^^^^ reference local version_57
        if (currentVersion == null)
//          ^^^^^^^^^^^^^^ reference local currentVersion_61
          let (_ = trace("WARN: unrecognized $schema: \($schema)")) true
//                                                      ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/$schema.
        else
          currentVersion >= availableAfterVersion
//        ^^^^^^^^^^^^^^ reference local currentVersion_61
//                          ^^^^^^^^^^^^^^^^^^^^^ reference local availableAfterVersion_62
  
  local parseUri = (it) -> URI.parse(it)
//      ^^^^^^^^ definition local parseUri_68
//                  ^^ definition local it_68
//                         ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.uri 1.0.3 `URI.pkl`/
//                             ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.uri 1.0.3 `URI.pkl`/parse().
//                                   ^^ reference local it_68
  
  /// The base-level schema.
  ///
  /// This is a utility property to help with resolving references.
  hidden $$baseSchema: JsonSchema?
//       ^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/$$baseSchema.
//       documentation
//       > The base-level schema.
//       > 
//       > This is a utility property to help with resolving references.
//                     ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
  
  /// The ID as an instance of [URI].
  hidden /** final */ $$idUri: URI? = $id?.ifNonNull(parseUri)
//                    ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/$$idUri.
//                    documentation
//                    > The ID as an instance of [`URI`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/pkl.experimental.uri/URI.pkl#L21,C1).
//                             ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.uri 1.0.3 `URI.pkl`/
//                                    ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/$id.
//                                         ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#ifNonNull().
//                                                   ^^^^^^^^ reference local parseUri_68
  
  /// The reference as an instance of [URI].
  hidden /** final */ $$refUri: URI? = $ref?.ifNonNull(parseUri)
//                    ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/$$refUri.
//                    documentation
//                    > The reference as an instance of [`URI`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/pkl.experimental.uri/URI.pkl#L21,C1).
//                              ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.uri 1.0.3 `URI.pkl`/
//                                     ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/$ref.
//                                           ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#ifNonNull().
//                                                     ^^^^^^^^ reference local parseUri_68
  
  // region Core
  /// URI-reference for the schema.
  ///
  /// The reference serves two purposes:
  ///
  ///   * It declares a unique identifier for the schema.
  ///   * It declares a base URI against which `$ref` URI-references are resolved.
  ///
  /// It is best practice that every top-level schema should set `$id` to an
  /// absolute-URI (not a relative reference), with a domain that you control.
  ///
  /// <https://json-schema.org/understanding-json-schema/structuring.html#the-id-property>
  $id: String?
//^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/$id.
//documentation
//> URI-reference for the schema.
//> 
//> The reference serves two purposes:
//> 
//>   * It declares a unique identifier for the schema.
//>   * It declares a base URI against which `$ref` URI-references are resolved.
//> 
//> It is best practice that every top-level schema should set `$id` to an
//> absolute-URI (not a relative reference), with a domain that you control.
//> 
//> <https://json-schema.org/understanding-json-schema/structuring.html#the-id-property>
//     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  
  /// Reference to a schema.
  ///
  /// <https://json-schema.org/understanding-json-schema/structuring.html#using-id-with-ref>
  $ref: String?
//^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/$ref.
//documentation
//> Reference to a schema.
//> 
//> <https://json-schema.org/understanding-json-schema/structuring.html#using-id-with-ref>
//      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  
  /// The presence of this property declares that this object represents a JSON Schema, and also
  /// represents the version that the schema was written against.
  ///
  /// It is recommended that all JSON Schemas have a [`$schema`] entry,
  /// which must be at the root.  Therefore most of the time, you'll want
  /// this at the root of your schema:
  ///
  ///     "$schema": "http://json-schema.org/draft/2019-09/schema#"
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/schema.html>
  $schema: JsonSchemaVersion?
//^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/$schema.
//documentation
//> The presence of this property declares that this object represents a JSON Schema, and also
//> represents the version that the schema was written against.
//> 
//> It is recommended that all JSON Schemas have a ``$schema`` entry,
//> which must be at the root.  Therefore most of the time, you'll want
//> this at the root of your schema:
//> 
//>     "$schema": "http://json-schema.org/draft/2019-09/schema#"
//> 
//> <https://json-schema.org/understanding-json-schema/reference/schema.html>
//         ^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/JsonSchemaVersion#
  
  /// Implementation comments for a schema.
  ///
  /// Its value must always be a string. Unlike the annotations
  /// [title], [description], and [examples], JSON schema
  /// implementations aren't allowed to attach any meaning or behavior to it
  /// whatsoever, and may even strip them at any time. Therefore, they are
  /// useful for leaving notes to future editors of a JSON schema, but
  /// should not be used to communicate to users of the schema.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/generic.html#comments>
  $comment: String(availableAfter("http://json-schema.org/draft-07/schema#"))?
//^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/$comment.
//documentation
//> Implementation comments for a schema.
//> 
//> Its value must always be a string. Unlike the annotations
//> [`title`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L142,C1), [`description`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L147,C1), and [`examples`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L174,C1), JSON schema
//> implementations aren't allowed to attach any meaning or behavior to it
//> whatsoever, and may even strip them at any time. Therefore, they are
//> useful for leaving notes to future editors of a JSON schema, but
//> should not be used to communicate to users of the schema.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/generic.html#comments>
//          ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                 ^^^^^^^^^^^^^^ reference local availableAfter_56
  
  /// Defines schemas that maybe re-used within a complex JSON Schema document.
  ///
  /// <https://json-schema.org/understanding-json-schema/structuring.html?highlight=definitions#reuse>
  definitions: Mapping<String, Schema>?
//^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/definitions.
//documentation
//> Defines schemas that maybe re-used within a complex JSON Schema document.
//> 
//> <https://json-schema.org/understanding-json-schema/structuring.html?highlight=definitions#reuse>
//             ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                             ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
  
  /// Defines schemas that maybe re-used within a complex JSON Schema document.
  ///
  /// This is the same thing as [definitions], but was renamed in draft 2019.
  ///
  /// <https://json-schema.org/understanding-json-schema/structuring.html#defs>
  $defs: Mapping<String, Schema>(availableAfter("https://json-schema.org/draft/2019-09/schema"))?
//^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/$defs.
//documentation
//> Defines schemas that maybe re-used within a complex JSON Schema document.
//> 
//> This is the same thing as [`definitions`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L127,C1), but was renamed in draft 2019.
//> 
//> <https://json-schema.org/understanding-json-schema/structuring.html#defs>
//       ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//               ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                       ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
//                               ^^^^^^^^^^^^^^ reference local availableAfter_56
  
  // endregion
  // region Metadata
  
  /// A short descriptor of this schema.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/generic.html#annotations>
  title: String?
//^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/title.
//documentation
//> A short descriptor of this schema.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/generic.html#annotations>
//       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  
  /// A long descriptor of this schema.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/generic.html#annotations>
  description: String?
//^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/description.
//documentation
//> A long descriptor of this schema.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/generic.html#annotations>
//             ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  
  /// A default instance value of this schema.
  ///
  /// This value is not used to fill in missing values during the validation process.
  /// Non-validation tools such as documentation generators or form
  /// generators may use this value to give hints to users about how to use
  /// a value.
  /// However, [default] is typically used to express that if a value is missing,
  /// then the value is semantically the same as if the value was present with the
  /// default value.
  /// The value of [default] should validate against the schema in which it resides,
  /// but that isn't required.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/generic.html#annotations>
  default: JsonSchemaValue?
//^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/default.
//documentation
//> A default instance value of this schema.
//> 
//> This value is not used to fill in missing values during the validation process.
//> Non-validation tools such as documentation generators or form
//> generators may use this value to give hints to users about how to use
//> a value.
//> However, [`default`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L162,C1) is typically used to express that if a value is missing,
//> then the value is semantically the same as if the value was present with the
//> default value.
//> The value of [`default`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L162,C1) should validate against the schema in which it resides,
//> but that isn't required.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/generic.html#annotations>
//         ^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/JsonSchemaValue#
  
  /// A place to provide a set of examples that validate against the schema.
  ///
  /// This isn't used for validation, but may help with explaining the effect
  /// and purpose of the schema to a reader.
  /// Each entry should validate against the schema in which it resides, but
  /// that isn't strictly required.
  /// There is no need to duplicate the [default] value in the [examples] array,
  /// since [default] will be treated as another example.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/generic.html#annotations>
  examples: JsonSchemaValue?
//^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/examples.
//documentation
//> A place to provide a set of examples that validate against the schema.
//> 
//> This isn't used for validation, but may help with explaining the effect
//> and purpose of the schema to a reader.
//> Each entry should validate against the schema in which it resides, but
//> that isn't strictly required.
//> There is no need to duplicate the [`default`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L162,C1) value in the [`examples`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L174,C1) array,
//> since [`default`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L162,C1) will be treated as another example.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/generic.html#annotations>
//          ^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/JsonSchemaValue#
  
  /// Indicates that the instance value should not be used and
  /// may be removed in the future.
  ///
  /// Introduced in draft 2019-09.
  deprecated: Boolean(availableAfter("https://json-schema.org/draft/2019-09/schema"))?
//^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/deprecated.
//documentation
//> Indicates that the instance value should not be used and
//> may be removed in the future.
//> 
//> Introduced in draft 2019-09.
//            ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                    ^^^^^^^^^^^^^^ reference local availableAfter_56
  
  /// Metadata indicating that the instance value should not be modified.
  ///
  /// It could be used to indicate that a `PUT` request that changes a value would result
  /// in a 400 Bad Request response
  ///
  /// Introduced in draft 7.
  readOnly: Boolean(availableAfter("http://json-schema.org/draft-07/schema#"))?
//^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/readOnly.
//documentation
//> Metadata indicating that the instance value should not be modified.
//> 
//> It could be used to indicate that a `PUT` request that changes a value would result
//> in a 400 Bad Request response
//> 
//> Introduced in draft 7.
//          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                  ^^^^^^^^^^^^^^ reference local availableAfter_56
  
  /// Metadata indicating that a value may be set, but will remain hidden.
  ///
  /// In could be used to indicate you can set a value with a `PUT` request,
  /// but it would not be included when retrieving that record with a `GET` request
  ///
  /// Introduced in draft 7.
  writeOnly: Boolean(availableAfter("http://json-schema.org/draft-07/schema#"))?
//^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/writeOnly.
//documentation
//> Metadata indicating that a value may be set, but will remain hidden.
//> 
//> In could be used to indicate you can set a value with a `PUT` request,
//> but it would not be included when retrieving that record with a `GET` request
//> 
//> Introduced in draft 7.
//           ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                   ^^^^^^^^^^^^^^ reference local availableAfter_56
  
  // endregion
  // region Core validation
  
  /// The fundamental data type for a schema.
  ///
  /// At its core, JSON Schema defines the following basic types:
  ///
  ///   - `string`
  ///   - `number`
  ///   - `integer`
  ///   - `boolean`
  ///   - `array`
  ///   - `object`
  ///   - `null`
  ///
  /// [type] may either be a string or a listing.
  ///
  ///   - If it's a string, it is the name of one of the basic types above.
  ///   - If it is an array, it must be an array of strings, where each string
  ///     is the name of one of the basic types, and each element is unique.
  ///     In this case, the JSON snippet is valid if it matches *any* of the
  ///     given types.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/type.html#type>
  type: (JsonSchemaTypeName|Listing<JsonSchemaTypeName>)?
//^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/type.
//documentation
//> The fundamental data type for a schema.
//> 
//> At its core, JSON Schema defines the following basic types:
//> 
//>   - `string`
//>   - `number`
//>   - `integer`
//>   - `boolean`
//>   - `array`
//>   - `object`
//>   - `null`
//> 
//> [`type`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L222,C1) may either be a string or a listing.
//> 
//>   - If it's a string, it is the name of one of the basic types above.
//>   - If it is an array, it must be an array of strings, where each string
//>     is the name of one of the basic types, and each element is unique.
//>     In this case, the JSON snippet is valid if it matches *any* of the
//>     given types.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/type.html#type>
//       ^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/JsonSchemaTypeName#
//                          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                                  ^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/JsonSchemaTypeName#
  
  /// Restricts the instance value to a fixed set of values.
  ///
  /// It must be a listing with at least one element, where each element is unique.
  /// You can use [enum] even without a [type], to accept values of different types.
  ///
  /// Elements in the array might be of any value, including null.
  /// <https://json-schema.org/understanding-json-schema/reference/generic.html#enumerated-values>
  enum: (*JsonSchemaValue|Listing<JsonSchemaValue>)?
//^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/enum.
//documentation
//> Restricts the instance value to a fixed set of values.
//> 
//> It must be a listing with at least one element, where each element is unique.
//> You can use [`enum`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L231,C1) even without a [`type`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L222,C1), to accept values of different types.
//> 
//> Elements in the array might be of any value, including null.
//> <https://json-schema.org/understanding-json-schema/reference/generic.html#enumerated-values>
//        ^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/JsonSchemaValue#
//                        ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                                ^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/JsonSchemaValue#
  
  /// Restricts the instance value to a single value.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/generic.html#constant-values>
  `const`: JsonSchemaValue?
//^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/const.
//documentation
//> Restricts the instance value to a single value.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/generic.html#constant-values>
//         ^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/JsonSchemaValue#
  
  // endregion
  // region Number validators
  
  /// Restricts the instance value to a multiple of the given number.
  ///
  /// It may be set to any positive number.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/numeric.html#multiples>
  multipleOf: Number(isPositive)?
//^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/multipleOf.
//documentation
//> Restricts the instance value to a multiple of the given number.
//> 
//> It may be set to any positive number.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/numeric.html#multiples>
//            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                   ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#isPositive.
  
  /// Restricts the instance value to be at minimum the given number.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/numeric.html#range>
  minimum: Number?
//^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/minimum.
//documentation
//> Restricts the instance value to be at minimum the given number.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/numeric.html#range>
//         ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
  
  /// Restricts the instance value to be larger than the given number.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/numeric.html#range>
  exclusiveMinimum: Number?
//^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/exclusiveMinimum.
//documentation
//> Restricts the instance value to be larger than the given number.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/numeric.html#range>
//                  ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
  
  /// Restricts the instance value to be at maximum the given number.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/numeric.html#range>
  maximum: Number?
//^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/maximum.
//documentation
//> Restricts the instance value to be at maximum the given number.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/numeric.html#range>
//         ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
  
  /// Restricts the instance value to be smaller than the given number.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/numeric.html#range>
  exclusiveMaximum: Number?
//^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/exclusiveMaximum.
//documentation
//> Restricts the instance value to be smaller than the given number.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/numeric.html#range>
//                  ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
  
  // endregion
  // region String validators
  
  /// Restricts the instance value to a regex pattern.
  ///
  /// The regular expression must conform to [ECMA 262](https://262.ecma-international.org/5.1/#sec-7.8.5).
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/string.html#regular-expressions>
  pattern: String(isRegex)?
//^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/pattern.
//documentation
//> Restricts the instance value to a regex pattern.
//> 
//> The regular expression must conform to [ECMA 262](https://262.ecma-international.org/5.1/#sec-7.8.5).
//> 
//> <https://json-schema.org/understanding-json-schema/reference/string.html#regular-expressions>
//         ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#isRegex.
  
  /// Restricts the instance value's length to be at minimum the given number.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/string.html#length>
  minLength: UInt?
//^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/minLength.
//documentation
//> Restricts the instance value's length to be at minimum the given number.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/string.html#length>
//           ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/UInt#
  
  /// Restricts the instance value's length to be at maximum the given number.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/string.html#length>
  maxLength: UInt?
//^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/maxLength.
//documentation
//> Restricts the instance value's length to be at maximum the given number.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/string.html#length>
//           ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/UInt#
  
  /// Allows for basic semantic validation on certain kinds of string values that are
  /// commonly used.
  ///
  /// This allows values to be constrained beyond what the other tools in JSON Schema,
  /// including Regular Expressions can do.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/string.html#format>
  format: (
//^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/format.
//documentation
//> Allows for basic semantic validation on certain kinds of string values that are
//> commonly used.
//> 
//> This allows values to be constrained beyond what the other tools in JSON Schema,
//> including Regular Expressions can do.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/string.html#format>
    "date-time"
    |"time"
    |"date"
    |"email"
    |"idn-email"
    |"hostname"
    |"ipv4"
    |"ipv6"
    |"uri"
    |"uri-reference"
    |"iri"
    |"iri-reference"
    |"uri-template"
    |"json-pointer"
    |"relative-json-pointer"
    |"regex"
    |String)?
//   ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  
  //endregion
  // region Object validators
  
  /// The properties (key-value pairs) on the instance value.
  ///
  /// Each key is the name of a property and each value is a schema used to
  /// validate that property.
  /// Any property on the instance value that doesn't match any of the property
  /// names within [properties] is ignored.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/object.html#properties>
  properties: Mapping<String, Schema>?
//^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/properties.
//documentation
//> The properties (key-value pairs) on the instance value.
//> 
//> Each key is the name of a property and each value is a schema used to
//> validate that property.
//> Any property on the instance value that doesn't match any of the property
//> names within [`properties`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L325,C1) is ignored.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/object.html#properties>
//            ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                    ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                            ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
  
  /// Specifies that properties on the instance value that match the specified
  /// regular expression should conform to a certain schema.
  ///
  /// Sometimes you want to say that, given a particular kind of property name,
  /// the value should match a particular schema. Thatâs where
  /// [patternProperties] comes in: it maps regular expressions to schemas.
  /// If a property name matches the given regular expression, the property
  /// value must validate against the corresponding schema.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/object.html#pattern-properties>
  patternProperties: Mapping<String(isRegex), Schema>?
//^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/patternProperties.
//documentation
//> Specifies that properties on the instance value that match the specified
//> regular expression should conform to a certain schema.
//> 
//> Sometimes you want to say that, given a particular kind of property name,
//> the value should match a particular schema. Thatâs where
//> [`patternProperties`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L337,C1) comes in: it maps regular expressions to schemas.
//> If a property name matches the given regular expression, the property
//> value must validate against the corresponding schema.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/object.html#pattern-properties>
//                   ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                           ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                  ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#isRegex.
//                                            ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
  
  /// Controls the handling of any properties on the instance value that are
  /// not listed within [properties], or match any of the regular expressions in
  /// [patternProperties].
  ///
  /// By default, any additional properties are allowed.
  ///
  /// Setting the [additionalProperties] to [false] means no additional
  /// properties will be allowed.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/object.html#additional-properties>
  additionalProperties: Schema?
//^^^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/additionalProperties.
//documentation
//> Controls the handling of any properties on the instance value that are
//> not listed within [`properties`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L325,C1), or match any of the regular expressions in
//> [`patternProperties`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L337,C1).
//> 
//> By default, any additional properties are allowed.
//> 
//> Setting the [`additionalProperties`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L349,C1) to `false` means no additional
//> properties will be allowed.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/object.html#additional-properties>
//                      ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
  
  /// Properties that are required to exist on the instance value.
  ///
  /// By default, no properties are required.
  ///
  /// The `required` keyword takes an array of zero or more strings.  Each
  /// of these strings must be unique.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/object.html#required-properties>
  required: Listing<String>?
//^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/required.
//documentation
//> Properties that are required to exist on the instance value.
//> 
//> By default, no properties are required.
//> 
//> The `required` keyword takes an array of zero or more strings.  Each
//> of these strings must be unique.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/object.html#required-properties>
//          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                  ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  
  /// Validate that the property names match a schema.
  ///
  /// The [type] for the schema is implicitly `"string"`.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/object.html#property-names>
  propertyNames: Schema?
//^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/propertyNames.
//documentation
//> Validate that the property names match a schema.
//> 
//> The [`type`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L222,C1) for the schema is implicitly `"string"`.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/object.html#property-names>
//               ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
  
  /// The minimum amount of properties that the instance value should have.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/object.html#size>
  minProperties: UInt?
//^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/minProperties.
//documentation
//> The minimum amount of properties that the instance value should have.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/object.html#size>
//               ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/UInt#
  
  /// The maximum amount of properties that the instance value should have.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/object.html#size>
  maxProperties: UInt?
//^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/maxProperties.
//documentation
//> The maximum amount of properties that the instance value should have.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/object.html#size>
//               ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/UInt#
  
  // endregion
  // region Array validators
  
  /// Constraints on items within an array.
  ///
  /// There are two ways in which arrays are generally used in JSON:
  ///
  /// - **List validation:** a sequence of arbitrary length where each
  ///     item matches the same schema.
  ///
  /// - **Tuple validation:** a sequence of fixed length where each item may
  ///   have a different schema.  In this usage, the index (or location) of
  ///   each item is meaningful as to how the value is interpreted.  (This
  ///   usage is often given a whole separate type in some programming
  ///   languages, such as Python's `tuple`).
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/array.html#items>
  items: (*Schema|Listing<Schema>)?
//^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/items.
//documentation
//> Constraints on items within an array.
//> 
//> There are two ways in which arrays are generally used in JSON:
//> 
//> - **List validation:** a sequence of arbitrary length where each
//>     item matches the same schema.
//> 
//> - **Tuple validation:** a sequence of fixed length where each item may
//>   have a different schema.  In this usage, the index (or location) of
//>   each item is meaningful as to how the value is interpreted.  (This
//>   usage is often given a whole separate type in some programming
//>   languages, such as Python's `tuple`).
//> 
//> <https://json-schema.org/understanding-json-schema/reference/array.html#items>
//         ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
//                ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                        ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
  
  /// Controls whether itâs valid to have additional items in a tuple beyond what is
  /// defined in items.
  ///
  /// The value of the [additionalItems] is a schema that all additional items must pass
  /// in order for the keyword to validate.
  /// This is ignored if there is not a âtuple validationâ items
  /// keyword present in the same schema.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/array.html#addtional-items>
  additionalItems: Schema?
//^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/additionalItems.
//documentation
//> Controls whether itâs valid to have additional items in a tuple beyond what is
//> defined in items.
//> 
//> The value of the [`additionalItems`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L406,C1) is a schema that all additional items must pass
//> in order for the keyword to validate.
//> This is ignored if there is not a âtuple validationâ items
//> keyword present in the same schema.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/array.html#addtional-items>
//                 ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
  
  /// A schema that must match at least one item within the instance array.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/array.html#contains>
  contains: Schema?
//^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/contains.
//documentation
//> A schema that must match at least one item within the instance array.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/array.html#contains>
//          ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
  
  /// Constrains the instance value's length to be at minimum the given number.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/array.html#length>
  minItems: UInt?
//^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/minItems.
//documentation
//> Constrains the instance value's length to be at minimum the given number.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/array.html#length>
//          ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/UInt#
  
  /// Constrains the instance value's length to be at maximum the given number.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/array.html#length>
  maxItems: UInt?
//^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/maxItems.
//documentation
//> Constrains the instance value's length to be at maximum the given number.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/array.html#length>
//          ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/UInt#
  
  /// Specifies that each item in the instance value is unique.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/array.html#uniqueness>
  uniqueItems: Boolean?
//^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/uniqueItems.
//documentation
//> Specifies that each item in the instance value is unique.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/array.html#uniqueness>
//             ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
  
  // endregion
  // region Composition
  
  /// Specifies that the value must match against **exactly** one of the subschemas.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/combining.html#oneof>
  oneOf: Listing<Schema>(!isEmpty)?
//^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/oneOf.
//documentation
//> Specifies that the value must match against **exactly** one of the subschemas.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/combining.html#oneof>
//       ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//               ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
//                        ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#isEmpty.
  
  /// Specifies that the value must match ay least one of the subschemas.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/combining.html#anyof>
  anyOf: Listing<Schema>(!isEmpty)?
//^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/anyOf.
//documentation
//> Specifies that the value must match ay least one of the subschemas.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/combining.html#anyof>
//       ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//               ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
//                        ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#isEmpty.
  
  /// Specifies that the value must match **all** of the subschemas.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/combining.html#allof>
  allOf: Listing<Schema>(!isEmpty)?
//^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/allOf.
//documentation
//> Specifies that the value must match **all** of the subschemas.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/combining.html#allof>
//       ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//               ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
//                        ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#isEmpty.
  
  /// The `not` keyword declares that an instance validates if it doesnât validate
  /// against the given subschema.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/combining.html#not>
  not: Schema?
//^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/not.
//documentation
//> The `not` keyword declares that an instance validates if it doesnât validate
//> against the given subschema.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/combining.html#not>
//     ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
  
  /// The dependentRequired keyword conditionally requires that certain properties
  /// must be present if a given property is present in an object
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/conditionals#dependentRequired>
  dependentRequired: Mapping<String, Listing<String>>?
//^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/dependentRequired.
//documentation
//> The dependentRequired keyword conditionally requires that certain properties
//> must be present if a given property is present in an object
//> 
//> <https://json-schema.org/understanding-json-schema/reference/conditionals#dependentRequired>
//                   ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                           ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                   ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                                           ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  
  /// The dependentSchemas keyword conditionally applies a subschema when a given property is present.
  /// This schema is applied in the same way allOf applies schemas
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/conditionals#dependentSchemas>
  dependentSchemas: Mapping<String, Schema>?
//^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/dependentSchemas.
//documentation
//> The dependentSchemas keyword conditionally applies a subschema when a given property is present.
//> This schema is applied in the same way allOf applies schemas
//> 
//> <https://json-schema.org/understanding-json-schema/reference/conditionals#dependentSchemas>
//                  ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                          ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                  ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
  
  /// The `if`, `then` and `else` keywords allow the application of a subschema based on the outcome of another schema
  /// If `if` is valid, `then` must also be valid (and `else` is ignored.) If `if` is invalid, `else` must also be valid (and `then` is ignored)
  /// If `then` or `else` is not defined, `if` behaves as if they have a value of `true`.
  ///
  /// <https://json-schema.org/understanding-json-schema/reference/conditionals#ifthenelse>
  `if`: Schema?
//^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/if.
//documentation
//> The `if`, `then` and `else` keywords allow the application of a subschema based on the outcome of another schema
//> If `if` is valid, `then` must also be valid (and `else` is ignored.) If `if` is invalid, `else` must also be valid (and `then` is ignored)
//> If `then` or `else` is not defined, `if` behaves as if they have a value of `true`.
//> 
//> <https://json-schema.org/understanding-json-schema/reference/conditionals#ifthenelse>
//      ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
  
  /// If `then` and/or `else` appear in a schema without `if`, `then` and `else` are ignored.
  then: Schema?
//^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/then.
//documentation
//> If `then` and/or `else` appear in a schema without `if`, `then` and `else` are ignored.
//      ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
  
  /// If `then` and/or `else` appear in a schema without `if`, `then` and `else` are ignored.
  `else`: Schema?
//^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/else.
//documentation
//> If `then` and/or `else` appear in a schema without `if`, `then` and `else` are ignored.
//        ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
  
  // endregion
  
  /// Any additional properties that are [JsonSchema].
  ///
  /// Additional properties do not affect the validation of the instance value, but
  /// may be referred to using [$ref].
  ///
  /// This is a child property because Pkl modules cannot express both known names
  /// and arbitrary names.
  _inline_: Mapping<String, Schema>?
//^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/_inline_.
//documentation
//> Any additional properties that are [`JsonSchema`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L22,C1).
//> 
//> Additional properties do not affect the validation of the instance value, but
//> may be referred to using [`$ref`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L98,C1).
//> 
//> This is a child property because Pkl modules cannot express both known names
//> and arbitrary names.
//          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                  ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                          ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
  
  output {
//^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/output.
    renderer = new JsonRenderer {
//  ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/renderer.
//                 ^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/JsonRenderer#
      converters {
//    ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/converters.
        [module.getClass()] = (s: JsonSchema) -> s.toMap().remove("_inline_") + (s._inline_?.toMap() ?? Map())
//              ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#getClass().
//                             ^ definition local s_491
//                                ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                               ^ reference local s_491
//                                                 ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Typed#toMap().
//                                                         ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#remove().
//                                                                               ^ reference local s_491
//                                                                                 ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/_inline_.
//                                                                                           ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#toMap().
//                                                                                                      ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map().
      }
    }
  }
  
