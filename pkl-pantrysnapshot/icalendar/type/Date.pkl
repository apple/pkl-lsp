  //===----------------------------------------------------------------------===//
  // Copyright Â© 2025 Apple Inc. and the Pkl project authors. All rights reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     https://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  //===----------------------------------------------------------------------===//
  /// This value type is used to identify values that contain a calendar date.
  ///
  /// https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.4
  module icalendar.type.Date
//^^^^^^^^^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Date.pkl`/
  
  import "Date.pkl"
  
  // language=Regexp
  const hidden dateRegex = "([0-9]{4})(0[1-9]|1[12])(0[1-9]|[12][0-9]|3[01])"
//             ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Date.pkl`/dateRegex.
  typealias DateString = String(matches(Regex(dateRegex)))
//          ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Date.pkl`/DateString#
//                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                              ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#matches().
//                                      ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
//                                            ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Date.pkl`/dateRegex.
  
  /// Year value.
  y: Int(isBetween(0, 9999))
//^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Date.pkl`/y.
//   ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
//       ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#isBetween().
  
  /// Month value.
  m: Int(isBetween(1, 12))
//^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Date.pkl`/m.
//   ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
//       ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#isBetween().
  
  /// Day value.
  d: Int(isBetween(1, 31))
//^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Date.pkl`/d.
//   ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
//       ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#isBetween().
  
  function toString(): String = List(
//         ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Date.pkl`/toString().
//                     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                              ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
    y.toString().padStart(4, "0"),
//  ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Date.pkl`/y.
//    ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#toString().
//               ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#padStart().
    m.toString().padStart(2, "0"),
//  ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Date.pkl`/m.
//    ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#toString().
//               ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#padStart().
    d.toString().padStart(2, "0")
//  ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Date.pkl`/d.
//    ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#toString().
//               ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#padStart().
  ).join("")
//  ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#join().
  
  const function Date(input: DateString): Date = new {
//               ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Date.pkl`/Date().
//                    ^^^^^ definition local input_42
//                           ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Date.pkl`/DateString#
//                                        ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Date.pkl`/
    y = input.substring(0, 4).toInt()
//  ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Date.pkl`/y.
//      ^^^^^ reference local input_42
//            ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#substring().
//                            ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#toInt().
    m = input.substring(4, 6).toInt()
//  ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Date.pkl`/m.
//      ^^^^^ reference local input_42
//            ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#substring().
//                            ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#toInt().
    d = input.substring(6, 8).toInt()
//  ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Date.pkl`/d.
//      ^^^^^ reference local input_42
//            ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#substring().
//                            ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#toInt().
  }
  
