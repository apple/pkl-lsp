  //===----------------------------------------------------------------------===//
  // Copyright Â© 2025 Apple Inc. and the Pkl project authors. All rights reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     https://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  //===----------------------------------------------------------------------===//
  /// A recurrence rule.
  ///
  /// https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.10
  module icalendar.type.Recur
//^^^^^^^^^^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/
  
  import "Date.pkl"
  import "DateTime.pkl"
  
  typealias Frequency = "SECONDLY"|"MINUTELY"|"HOURLY"|"DAILY"|"WEEKLY"|"MONTHLY"|"YEARLY"
//          ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/Frequency#
  
  typealias WeekdayString = "SU"|"MO"|"TU"|"WE"|"TH"|"FR"|"SA"
//          ^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/WeekdayString#
  
  class Weekday {
//      ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/Weekday#
    weekday: WeekdayString
//  ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/Weekday#weekday.
//           ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/WeekdayString#
    weeknum: Int(this != 0)?
//  ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/Weekday#weeknum.
//           ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
  
    function toString(): String = List(
//           ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/Weekday#toString().
//           documentation
//           > Returns a string representation of `this`.
//           > 
//           > This method is used to convert the values of string interpolation expressions to strings.
//                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
      weeknum?.ifNonNull((n) -> if (n as Int > 0) "+" else ""),
//    ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/Weekday#weeknum.
//             ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#ifNonNull().
//                        ^ definition local n_33
//                                  ^ reference local n_33
//                                       ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
      weeknum?.toString(),
//    ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/Weekday#weeknum.
//             ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#toString().
      weekday
//    ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/Weekday#weekday.
    ).filterNonNull().join("")
//    ^^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#filterNonNull().
//                    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#join().
  }
  
  dtstart: (
//^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/dtstart.
    * DateTime(utc.implies(tzid == null))
//    ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/DateTime.pkl`/
//             ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/DateTime.pkl`/utc.
//                 ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#implies().
//                         ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/tzid.
    |Date(tzid == null)
//   ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Date.pkl`/
//        ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/tzid.
    )?
  
  tzid: String?
//^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/tzid.
//      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  
  /// The FREQ rule part identifies the type of recurrence rule.
  freq: Frequency
//^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/freq.
//documentation
//> The FREQ rule part identifies the type of recurrence rule.
//      ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/Frequency#
  
  /// The INTERVAL rule part contains a positive integer representing at which intervals the recurrence rule repeats.
  ///
  /// Defaults to 1 if not specified.
  interval: Int(this > 0)?
//^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/interval.
//documentation
//> The INTERVAL rule part contains a positive integer representing at which intervals the recurrence rule repeats.
//> 
//> Defaults to 1 if not specified.
//          ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
  
  /// The UNTIL rule part defines a DATE or DATE-TIME value that bounds the recurrence rule in an inclusive manner.
  ///
  /// If the value specified by UNTIL is synchronized with the specified recurrence, this DATE or DATE-TIME becomes the last instance of the recurrence.
  /// If the "DTSTART" property is specified as a date with local time, then the UNTIL rule part MUST also be specified as a date with local time.
  /// If the "DTSTART" property is specified as a date with UTC time or a date with local time and time zone reference, then the UNTIL rule part MUST be specified as a date with UTC time.
  /// If not present, and the COUNT rule part is also not present, the "RRULE" is considered to repeat forever.
  until: (
//^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/until.
//documentation
//> The UNTIL rule part defines a DATE or DATE-TIME value that bounds the recurrence rule in an inclusive manner.
//> 
//> If the value specified by UNTIL is synchronized with the specified recurrence, this DATE or DATE-TIME becomes the last instance of the recurrence.
//> If the "DTSTART" property is specified as a date with local time, then the UNTIL rule part MUST also be specified as a date with local time.
//> If the "DTSTART" property is specified as a date with UTC time or a date with local time and time zone reference, then the UNTIL rule part MUST be specified as a date with UTC time.
//> If not present, and the COUNT rule part is also not present, the "RRULE" is considered to repeat forever.
    * DateTime(
//    ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/DateTime.pkl`/
        // if dtstart is defined and a datetime, until must also be a datetime if defined
        dtstart?.ifNonNull((it) -> it is DateTime) ?? true,
//      ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/dtstart.
//               ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#ifNonNull().
//                          ^^ definition local it_63
//                                 ^^ reference local it_63
//                                       ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/DateTime.pkl`/
        dtstart?.ifNonNull((it) -> utc == (it as DateTime).utc) ?? true,
//      ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/dtstart.
//               ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#ifNonNull().
//                          ^^ definition local it_64
//                                 ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/DateTime.pkl`/utc.
//                                         ^^ reference local it_64
//                                               ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/DateTime.pkl`/
//                                                         ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/DateTime.pkl`/utc.
        utc.implies(tzid == null)
//      ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/DateTime.pkl`/utc.
//          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#implies().
//                  ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/tzid.
      )
    |Date(
//   ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Date.pkl`/
      // if dtstart is defined and a date, until must also be a date if defined
      dtstart?.ifNonNull((it) -> it is Date) ?? true,
//    ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/dtstart.
//             ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#ifNonNull().
//                        ^^ definition local it_69
//                               ^^ reference local it_69
//                                     ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Date.pkl`/
      tzid == null
//    ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/tzid.
    )
    )?
  
  /// The COUNT rule part defines the number of occurrences at which to range-bound the recurrence.
  ///
  /// The "DTSTART" property value always counts as the first occurrence.
  count: Int(this > 0)?(
//^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/count.
//documentation
//> The COUNT rule part defines the number of occurrences at which to range-bound the recurrence.
//> 
//> The "DTSTART" property value always counts as the first occurrence.
//       ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
      !(this != null && until != null) || throw("count and until may not both be set")
//                      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/until.
    )
  
  /// The BYSECOND rule part specifies one or more seconds within a minute.
  bysecond: Listing<UInt(isBetween(0, 60))>(
//^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/bysecond.
//documentation
//> The BYSECOND rule part specifies one or more seconds within a minute.
//          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                  ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/UInt#
//                       ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#isBetween().
      !isEmpty,
//     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#isEmpty.
      !(dtstart is Date)
//      ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/dtstart.
//                 ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Date.pkl`/
    )?
  
  /// The BYMINUTE rule part specifies one or more minutes within an hour.
  byminute: Listing<UInt(isBetween(0, 59))>(
//^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/byminute.
//documentation
//> The BYMINUTE rule part specifies one or more minutes within an hour.
//          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                  ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/UInt#
//                       ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#isBetween().
      !isEmpty,
//     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#isEmpty.
      !(dtstart is Date)
//      ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/dtstart.
//                 ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Date.pkl`/
    )?
  
  /// The BYHOUR rule part specifies one or more hours of the day.
  byhour: Listing<UInt(isBetween(0, 23))>(
//^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/byhour.
//documentation
//> The BYHOUR rule part specifies one or more hours of the day.
//        ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/UInt#
//                     ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#isBetween().
      !isEmpty,
//     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#isEmpty.
      !(dtstart is Date)
//      ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/dtstart.
//                 ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Date.pkl`/
    )?
  
  /// The BYDAY rule part specifies one or more days of the week.
  ///
  /// Each BYDAY value can also be preceded by a positive (+n) or negative (-n) integer.
  /// If present, this indicates the nth occurrence of a specific day within the MONTHLY or YEARLY "RRULE".
  /// For example, within a MONTHLY rule, +1MO (or simply 1MO) represents the first Monday within the month, whereas -1MO represents the last Monday of the month.
  /// The numeric value in a BYDAY rule part with the FREQ rule part set to YEARLY corresponds to an offset within the month when the BYMONTH rule part is present, and corresponds to an offset within the year when the BYWEEKNO or BYMONTH rule parts are present.
  ///
  /// If an integer modifier is not present, it means all days of this type within the specified frequency.
  /// For example, within a MONTHLY rule, MO represents all Mondays within the month.
  byday: Listing<
//^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/byday.
//documentation
//> The BYDAY rule part specifies one or more days of the week.
//> 
//> Each BYDAY value can also be preceded by a positive (+n) or negative (-n) integer.
//> If present, this indicates the nth occurrence of a specific day within the MONTHLY or YEARLY "RRULE".
//> For example, within a MONTHLY rule, +1MO (or simply 1MO) represents the first Monday within the month, whereas -1MO represents the last Monday of the month.
//> The numeric value in a BYDAY rule part with the FREQ rule part set to YEARLY corresponds to an offset within the month when the BYMONTH rule part is present, and corresponds to an offset within the year when the BYWEEKNO or BYMONTH rule parts are present.
//> 
//> If an integer modifier is not present, it means all days of this type within the specified frequency.
//> For example, within a MONTHLY rule, MO represents all Mondays within the month.
//       ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
      WeekdayString
//    ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/WeekdayString#
      |* Weekday(
//       ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/Weekday#
          // The BYDAY rule part MUST NOT be specified with a numeric value when the FREQ rule part is not set to MONTHLY or YEARLY.
          (weeknum != null).implies(freq == "MONTHLY" || freq == "YEARLY"),
//         ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/Weekday#weeknum.
//                          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#implies().
//                                  ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/freq.
//                                                       ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/freq.
          // Furthermore, the BYDAY rule part MUST NOT be specified with a numeric value with the FREQ rule part set to YEARLY when the BYWEEKNO rule part is specified.
          (weeknum != null && freq == "YEARLY").implies(byweekno == null)
//         ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/Weekday#weeknum.
//                            ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/freq.
//                                              ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#implies().
//                                                      ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/byweekno.
        )
    >(!isEmpty)?
//     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#isEmpty.
  
  /// The BYMONTHDAY rule part specifies one or more days of the month.
  ///
  /// Negative values represent days counting back from the end of a month.
  /// For example, -10 represents the tenth to the last day of the month.
  bymonthday: Listing<Int(isBetween(-31, 31), this != 0)>(
//^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/bymonthday.
//documentation
//> The BYMONTHDAY rule part specifies one or more days of the month.
//> 
//> Negative values represent days counting back from the end of a month.
//> For example, -10 represents the tenth to the last day of the month.
//            ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                    ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
//                        ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#isBetween().
      !isEmpty,
//     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#isEmpty.
      freq != "MONTHLY"
//    ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/freq.
    )?
  
  /// The BYYEARDAY rule part specifies one or more days of the year.
  ///
  /// Negative values represent days counting back from the end of a year.
  /// For example, -1 represents the last day of the year (December 31st) and -306 represents the 306th to the last day of the year (March 1st).
  byyearday: Listing<Int(isBetween(-366, 366), this != 0)>(
//^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/byyearday.
//documentation
//> The BYYEARDAY rule part specifies one or more days of the year.
//> 
//> Negative values represent days counting back from the end of a year.
//> For example, -1 represents the last day of the year (December 31st) and -306 represents the 306th to the last day of the year (March 1st).
//           ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                   ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
//                       ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#isBetween().
      !isEmpty,
//     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#isEmpty.
      freq != "DAILY",
//    ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/freq.
      freq != "WEEKLY",
//    ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/freq.
      freq != "MONTHLY"
//    ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/freq.
    )?
  
  /// The BYWEEKNO rule part specifies one or more ordinals specifying weeks of the year.
  ///
  /// This corresponds to weeks according to week numbering as defined in [ISO.8601.2004](https://datatracker.ietf.org/doc/html/rfc5545#ref-ISO.8601.2004).
  /// A week is defined as a seven day period, starting on the day of the week defined to be the week start (see [wkst]).
  /// Week number one of the calendar year is the first week that contains at least four (4) days in that calendar year.
  ///
  /// Note: Assuming a Monday week start, week 53 can only occur when Thursday is January 1 or if it is a leap year and Wednesday is January 1.
  byweekno: Listing<Int(isBetween(-53, 53), this != 0)>(
//^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/byweekno.
//documentation
//> The BYWEEKNO rule part specifies one or more ordinals specifying weeks of the year.
//> 
//> This corresponds to weeks according to week numbering as defined in [ISO.8601.2004](https://datatracker.ietf.org/doc/html/rfc5545#ref-ISO.8601.2004).
//> A week is defined as a seven day period, starting on the day of the week defined to be the week start (see [`wkst`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/icalendar/type/Recur.pkl#L158,C1)).
//> Week number one of the calendar year is the first week that contains at least four (4) days in that calendar year.
//> 
//> Note: Assuming a Monday week start, week 53 can only occur when Thursday is January 1 or if it is a leap year and Wednesday is January 1.
//          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                  ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
//                      ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#isBetween().
      !isEmpty,
//     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#isEmpty.
      freq == "YEARLY"
//    ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/freq.
    )?
  
  /// The BYMONTH rule part specifies one or more months of the year.
  bymonth: Listing<UInt(isBetween(1, 12))>(!isEmpty)?
//^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/bymonth.
//documentation
//> The BYMONTH rule part specifies one or more months of the year.
//         ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                 ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/UInt#
//                      ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#isBetween().
//                                          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#isEmpty.
  
  /// The WKST rule part specifies the day on which the workweek starts.
  ///
  /// This is significant when a WEEKLY "RRULE" has an interval greater than 1, and a BYDAY rule part is specified.
  /// This is also significant when in a YEARLY "RRULE" when a BYWEEKNO rule part is specified.
  /// Defaults to "MO" if not specified.
  wkst: WeekdayString?
//^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/wkst.
//documentation
//> The WKST rule part specifies the day on which the workweek starts.
//> 
//> This is significant when a WEEKLY "RRULE" has an interval greater than 1, and a BYDAY rule part is specified.
//> This is also significant when in a YEARLY "RRULE" when a BYWEEKNO rule part is specified.
//> Defaults to "MO" if not specified.
//      ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/WeekdayString#
  
  /// The BYSETPOS rule part specifies one or more values that corresponds to the nth occurrence within the set of recurrence instances specified by the rule.
  ///
  /// BYSETPOS operates on a set of recurrence instances in one interval of the recurrence rule.
  /// For example, in a WEEKLY rule, the interval would be one week A set of recurrence instances starts at the beginning of the interval defined by the FREQ rule part.
  bysetpos: Listing<Int(isBetween(-366, 366), this != 0)>(
//^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/bysetpos.
//documentation
//> The BYSETPOS rule part specifies one or more values that corresponds to the nth occurrence within the set of recurrence instances specified by the rule.
//> 
//> BYSETPOS operates on a set of recurrence instances in one interval of the recurrence rule.
//> For example, in a WEEKLY rule, the interval would be one week A set of recurrence instances starts at the beginning of the interval defined by the FREQ rule part.
//          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                  ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
//                      ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#isBetween().
      !isEmpty,
//     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#isEmpty.
      List(bysecond, byminute, byhour, byday, bymonthday, byyearday, byweekno, bymonth)
//    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
//         ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/bysecond.
//                   ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/byminute.
//                             ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/byhour.
//                                     ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/byday.
//                                            ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/bymonthday.
//                                                        ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/byyearday.
//                                                                   ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/byweekno.
//                                                                             ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/bymonth.
        .filterNonNull().length > 0 // RFC is a little ambiguous on this one, should it be >0 or ==1?
//       ^^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#filterNonNull().
//                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#length.
    )?
  
  /// Serialize the recurrence rule.
  ///
  /// Note: this departs from the RFC around line lengths.
  /// The 75-character line limit and folding behavior are not enforced.
  /// Lines are separated by "\n" (LF) and not "\r\n" (CRLF).
  /// Ref: https://datatracker.ietf.org/doc/html/rfc5545#section-3.1
  function toString(): String = List(
//         ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/toString().
//         documentation
//         > Serialize the recurrence rule.
//         > 
//         > Note: this departs from the RFC around line lengths.
//         > The 75-character line limit and folding behavior are not enforced.
//         > Lines are separated by "\n" (LF) and not "\r\n" (CRLF).
//         > Ref: https://datatracker.ietf.org/doc/html/rfc5545#section-3.1
//                     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                              ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
    dtstart?.ifNonNull((start) -> List(
//  ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/dtstart.
//           ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#ifNonNull().
//                      ^^^^^ definition local start_177
//                                ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
      "DTSTART",
      if (dtstart is Date) ";VALUE=DATE" else null,
//        ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/dtstart.
//                   ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Date.pkl`/
      tzid?.ifNonNull((tz) -> ";TZID=\(tz)"),
//    ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Recur.pkl`/tzid.
//          ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#ifNonNull().
//                     ^^ definition local tz_180
//                                     ^^ reference local tz_180
      ":\(start)"
//        ^^^^^ reference local start_177
    ).filterNonNull().join("")),
//    ^^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#filterNonNull().
//                    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#join().
    let (parts = module.toMap()
//       ^^^^^ definition local parts_183
//                      ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Typed#toMap().
      .remove("tzid").remove("dtstart")
//     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#remove().
//                    ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#remove().
      .filter((_, v) -> v != null)
//     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#filter().
//                ^ definition local v_185
//                      ^ reference local v_185
      .entries.map((entry) ->
//     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#entries.
//             ^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#map().
//                  ^^^^^ definition local entry_186
      let (value = if (entry.value is Listing)
//         ^^^^^ definition local value_187
//                     ^^^^^ reference local entry_186
//                           ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#value.
//                                    ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
        // https://github.com/apple/pkl/issues/923 :(
        // entry.value.join(",")
        entry.value.toList().map((it) -> it.toString()).join(",")
//      ^^^^^ reference local entry_186
//            ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#value.
//                                ^^ definition local it_190
//                                       ^^ reference local it_190
      else entry.value.toString())
//         ^^^^^ reference local entry_186
//               ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#value.
        "\(entry.key.toUpperCase())=\(value)"
//         ^^^^^ reference local entry_186
//               ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#key.
//                   ^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#toUpperCase().
//                                    ^^^^^ reference local value_187
    )
    )
      if (!parts.isEmpty) "RRULE:\(parts.join(";"))" else null
//         ^^^^^ reference local parts_183
//               ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#isEmpty.
//                                 ^^^^^ reference local parts_183
//                                       ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#join().
  ).filterNonNull().join("\n")
//  ^^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#filterNonNull().
//                  ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#join().
  
