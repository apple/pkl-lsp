  //===----------------------------------------------------------------------===//
  // Copyright Â© 2025 Apple Inc. and the Pkl project authors. All rights reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     https://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  //===----------------------------------------------------------------------===//
  /// This value type is used to identify values that contain a time of day.
  ///
  /// https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.12
  module icalendar.type.Time
//^^^^^^^^^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Time.pkl`/
  
  import "Time.pkl"
  
  // language=Regexp
  const hidden timeRegex = "([01][0-9]|2[0-3])([0-5][0-9])([0-5][0-9]|60)Z?"
//             ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Time.pkl`/timeRegex.
  typealias TimeString = String(matches(Regex(timeRegex)))
//          ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Time.pkl`/TimeString#
//                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                              ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#matches().
//                                      ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
//                                            ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Time.pkl`/timeRegex.
  
  /// Hour value.
  h: Int(isBetween(0, 23))
//^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Time.pkl`/h.
//   ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
//       ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#isBetween().
  
  /// Minute value.
  m: Int(isBetween(0, 59))
//^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Time.pkl`/m.
//   ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
//       ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#isBetween().
  
  /// Seconds value.
  ///
  /// A value of 60 allows accounting for positive leap seconds.
  s: Int(isBetween(0, 60))
//^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Time.pkl`/s.
//   ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
//       ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#isBetween().
  
  /// Indicates that the time is UTC, not local.
  utc: Boolean
//^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Time.pkl`/utc.
//     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
  
  function toString(): String = List(
//         ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Time.pkl`/toString().
//                     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                              ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
    h.toString().padStart(2, "0"),
//  ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Time.pkl`/h.
//    ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#toString().
//               ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#padStart().
    m.toString().padStart(2, "0"),
//  ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Time.pkl`/m.
//    ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#toString().
//               ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#padStart().
    s.toString().padStart(2, "0"),
//  ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Time.pkl`/s.
//    ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#toString().
//               ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#padStart().
    if (utc) "Z" else ""
//      ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Time.pkl`/utc.
  ).join("")
//  ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#join().
  
  /// Parse a [TimeString] into a [Time].
  const function Time(input: TimeString): Time = new {
//               ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Time.pkl`/Time().
//               documentation
//               > Parse a [`TimeString`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/icalendar/type/Time.pkl#L25,C11) into a [`Time`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/icalendar/type/Time.pkl#L19,C1).
//                    ^^^^^ definition local input_49
//                           ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Time.pkl`/TimeString#
//                                        ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Time.pkl`/
    h = input.substring(0, 2).toInt()
//  ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Time.pkl`/h.
//      ^^^^^ reference local input_49
//            ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#substring().
//                            ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#toInt().
    m = input.substring(2, 4).toInt()
//  ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Time.pkl`/m.
//      ^^^^^ reference local input_49
//            ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#substring().
//                            ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#toInt().
    s = input.substring(4, 6).toInt()
//  ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Time.pkl`/s.
//      ^^^^^ reference local input_49
//            ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#substring().
//                            ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#toInt().
    utc = input.getOrNull(6) == "Z"
//  ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/icalendar 0.1.1 `type/Time.pkl`/utc.
//        ^^^^^ reference local input_49
//              ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#getOrNull().
  }
  
