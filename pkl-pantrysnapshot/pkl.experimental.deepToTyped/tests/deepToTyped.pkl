  //===----------------------------------------------------------------------===//
  // Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     https://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  //===----------------------------------------------------------------------===//
  module pkl.experimental.deepToTyped.tests.deepToTyped
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/
  
  amends "pkl:test"
  
  import "../deepToTyped.pkl" as t
  
  local class Foo {
//            ^^^ definition local Foo_22
    x: Int
//  ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/Foo#x.
//     ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
  }
  
  local class Bar {
//            ^^^ definition local Bar_26
    foo: Foo
//  ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/Bar#foo.
//       ^^^ reference local Foo_22
  }
  
  local class Baz {
//            ^^^ definition local Baz_30
    y: Int
//  ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/Baz#y.
//     ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
    baz: Baz?
//  ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/Baz#baz.
//       ^^^ reference local Baz_30
  }
  
  local dynamic: Dynamic = new Dynamic {
//      ^^^^^^^ definition local dynamic_35
//               ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#
//                             ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#
    foo {
//  ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/foo.
      x = 1
//    ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/x.
    }
  }
  
  local typealias FooBarMapping = Mapping<Foo, Bar>//|Listing<Bar>|Foo
//                ^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/FooBarMapping#
//                                ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                                        ^^^ reference local Foo_22
//                                             ^^^ reference local Bar_26
  local exMapping: FooBarMapping = new {
//      ^^^^^^^^^ definition local exMapping_42
//                 ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/FooBarMapping#
    [new Foo { x = 42 }] {
//       ^^^ reference local Foo_22
//             ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/x.
      foo {
//    ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/foo.
        x = 1337
//      ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/x.
      }
    }
  }
  
  local typealias BarList = List<Bar>
//                ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/BarList#
//                          ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                               ^^^ reference local Bar_26
  local typealias BarListing = Listing<Bar>
//                ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/BarListing#
//                             ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                                     ^^^ reference local Bar_26
  local exListing: BarListing = new {
//      ^^^^^^^^^ definition local exListing_52
//                 ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/BarListing#
    new Bar {
//      ^^^ reference local Bar_26
      foo {
//    ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/foo.
        x = -1
//      ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/x.
      }
    }
  }
  
  local typealias BarSet = Set<Bar>
//                ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/BarSet#
//                         ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Set#
//                             ^^^ reference local Bar_26
  local exSet: BarSet = Set(new Bar { foo { x = 1 } })
//      ^^^^^ definition local exSet_61
//             ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/BarSet#
//                      ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Set().
//                              ^^^ reference local Bar_26
//                                    ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/foo.
//                                          ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/x.
  
  local typealias BarUnionSetOrList = *BarSet|BarList
//                ^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/BarUnionSetOrList#
//                                     ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/BarSet#
//                                            ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/BarList#
  
  local class MyService {
//            ^^^^^^^^^ definition local MyService_65
    metadata: MyMetadata
//  ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/MyService#metadata.
//            ^^^^^^^^^^ reference local MyMetadata_70
    spec: MySpec
//  ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/MyService#spec.
//        ^^^^^^ reference local MySpec_76
  }
  
  local class MyMetadata {
//            ^^^^^^^^^^ definition local MyMetadata_70
    name: String
//  ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/MyMetadata#name.
//        ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
    namespace: String
//  ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/MyMetadata#namespace.
//             ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
    labels: Mapping<String, String>
//  ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/MyMetadata#labels.
//          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                  ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                          ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  }
  
  local class MySpec {
//            ^^^^^^ definition local MySpec_76
    type: String
//  ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/MySpec#type.
//        ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
    ports: Listing<Port>
//  ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/MySpec#ports.
//         ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                 ^^^^ reference local Port_82
    selector: Mapping<String, String>
//  ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/MySpec#selector.
//            ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                    ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  }
  
  local class Port {
//            ^^^^ definition local Port_82
    port: Int
//  ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/Port#port.
//        ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
    targetPort: Int
//  ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/Port#targetPort.
//              ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
    protocol: String
//  ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/Port#protocol.
//            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  }
  
  local service: MyService = new {
//      ^^^^^^^ definition local service_88
//               ^^^^^^^^^ reference local MyService_65
    metadata {
//  ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/metadata.
      name = "example-service"
//    ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/name.
      namespace = "example-namespace"
//    ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/namespace.
      labels {
//    ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/labels.
        ["app"] = "example"
        ["env"] = "prod"
        ["prtn"] = "p102"
      }
    }
    spec {
//  ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/spec.
      type = "ClusterIP"
//    ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/type.
      ports {
//    ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/ports.
        new {
          port = 8080
//        ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/port.
          targetPort = 8080
//        ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/targetPort.
          protocol = "TCP"
//        ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/protocol.
        }
      }
      selector {
//    ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/selector.
        ["app"] = "example"
        ["env"] = "prod"
        ["prtn"] = "p102"
      }
    }
  }
  
  local class OverConstrained {
//            ^^^^^^^^^^^^^^^ definition local OverConstrained_115
    // k8s Deployment refers to k8s Probe, which has a type constraint on `exec` that excludes the default value of
    // the Probe class; only one field of three may be `null` and all are, by default.
    foo: String?(this != null || bar != null)
//  ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/OverConstrained#foo.
//       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                               ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/OverConstrained#bar.
    bar: Int?
//  ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/OverConstrained#bar.
//       ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
  }
  
  local typealias fooLiteral = "foo"
//                ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/fooLiteral#
  local typealias enumType = *"foo"|"bar"|"baz"
//                ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/enumType#
  
  local class ClassWithDefaultAttribute {
//            ^^^^^^^^^^^^^^^^^^^^^^^^^ definition local ClassWithDefaultAttribute_125
    what: String = "The default"
//  ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/ClassWithDefaultAttribute#what.
//        ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
    who: String?
//  ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/ClassWithDefaultAttribute#who.
//       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
    where: String
//  ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/ClassWithDefaultAttribute#where.
//         ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  }
  
  local open class BaseClass {
//                 ^^^^^^^^^ definition local BaseClass_131
    a: String
//  ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/BaseClass#a.
//     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
    b: String
//  ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/BaseClass#b.
//     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  }
  
  local class SubClass extends BaseClass {
//            ^^^^^^^^ definition local SubClass_136
//                             ^^^^^^^^^ reference local BaseClass_131
    // purposefully override `b`'s type to make sure we are converting correctly.
    b: Int
//  ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/SubClass#b.
//     ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
    c: Int
//  ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/SubClass#c.
//     ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
  }
  
  local class Storage {
//            ^^^^^^^ definition local Storage_142
    size: DataSize
//  ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/Storage#size.
//        ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/DataSize#
  }
  
  local class LooselyTyped {
//            ^^^^^^^^^^^^ definition local LooselyTyped_146
    anything: Any
//  ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/LooselyTyped#anything.
//            ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#
  }
  
  local class KeyTransform extends Annotation {
//            ^^^^^^^^^^^^ definition local KeyTransform_150
//                                 ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Annotation#
    name: String
//  ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/KeyTransform#name.
//        ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  }
  
  local class ClassWithKeyTranform {
//            ^^^^^^^^^^^^^^^^^^^^ definition local ClassWithKeyTranform_154
    @KeyTransform { name = "my_field" }
//   ^^^^^^^^^^^^ reference local KeyTransform_150
//                  ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/ClassWithKeyTranform#name.
    myField: String
//  ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/ClassWithKeyTranform#myField.
//           ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
    inner: InnerClassWithKeyTranform
//  ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/ClassWithKeyTranform#inner.
//         ^^^^^^^^^^^^^^^^^^^^^^^^^ reference local InnerClassWithKeyTranform_160
  }
  
  local class InnerClassWithKeyTranform {
//            ^^^^^^^^^^^^^^^^^^^^^^^^^ definition local InnerClassWithKeyTranform_160
    @KeyTransform { name = "my_nested_field" }
//   ^^^^^^^^^^^^ reference local KeyTransform_150
//                  ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/InnerClassWithKeyTranform#name.
    myNestedField: String
//  ^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/InnerClassWithKeyTranform#myNestedField.
//                 ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  }
  
  facts {
//^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/facts.
    ["Basic types"] {
      t.apply(Int, 1) == 1
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
      t.apply(Float, 1) == 1
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Float#
      t.apply(Float, 1.1) == 1.1
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Float#
      t.apply(Number, 1) == 1
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
      t.apply(Boolean, true) == true
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
      t.apply(String, "hello") == "hello"
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
      t.apply(fooLiteral, "foo") == "foo"
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/fooLiteral#
      t.apply(enumType, "bar") == "bar"
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/enumType#
    }
  
    ["Listy types"] {
      local list = new Listing {
//          ^^^^ definition local list_178
//                     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
        "foo"
        42
      }.toList()
//      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toList().
      t.apply(List, list) == list
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                  ^^^^ reference local list_178
//                           ^^^^ reference local list_178
      t.apply(Listing, list) == list.toListing()
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                     ^^^^ reference local list_178
//                              ^^^^ reference local list_178
//                                   ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#toListing().
      t.apply(Set, list) == list.toSet()
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Set#
//                 ^^^^ reference local list_178
//                          ^^^^ reference local list_178
//                               ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#toSet().
      // There is a choice here: Abstract (!) supertype Collection defaults to List
      t.apply(Collection, list) == list
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Collection#
//                        ^^^^ reference local list_178
//                                 ^^^^ reference local list_178
    }
  
    ["Mappy types"] {
      local map = new Mapping {
//          ^^^ definition local map_190
//                    ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
        ["bar"] = "foo"
        [0] = 42
      }.toMap()
//      ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#toMap().
      t.apply(Map, map) == map
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#
//                 ^^^ reference local map_190
//                         ^^^ reference local map_190
      t.apply(Mapping, map) == map.toMapping()
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                     ^^^ reference local map_190
//                             ^^^ reference local map_190
//                                 ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#toMapping().
    }
  
    ["Values of the correct Class type are returned"] {
      t.apply(Foo, new Foo { x = 1 }) == new Foo { x = 1 }
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^ reference local Foo_22
//                     ^^^ reference local Foo_22
//                           ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/x.
//                                           ^^^ reference local Foo_22
//                                                 ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/x.
    }
  
    ["Dynamic to user-defined class"] {
      t.apply(Foo, dynamic.foo) == new Foo { x = 1 }
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^ reference local Foo_22
//                 ^^^^^^^ reference local dynamic_35
//                                     ^^^ reference local Foo_22
//                                           ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/x.
      t.apply(Bar, dynamic) == new Bar { foo = new { x = 1 } }
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^ reference local Bar_26
//                 ^^^^^^^ reference local dynamic_35
//                                 ^^^ reference local Bar_26
//                                       ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/foo.
//                                                   ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/x.
    }
  
    ["Dynamic to concrete typealias"] {
      t.apply(FooBarMapping, exMapping.toMap().toDynamic()) == exMapping
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/FooBarMapping#
//                           ^^^^^^^^^ reference local exMapping_42
//                                     ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#toMap().
//                                             ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#toDynamic().
//                                                             ^^^^^^^^^ reference local exMapping_42
      t.apply(BarListing, exListing.toList().toDynamic()) == exListing
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/BarListing#
//                        ^^^^^^^^^ reference local exListing_52
//                                  ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toList().
//                                           ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#toDynamic().
//                                                           ^^^^^^^^^ reference local exListing_52
      t.apply(BarList, exListing.toList().toDynamic()) == exListing.toList()
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/BarList#
//                     ^^^^^^^^^ reference local exListing_52
//                               ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toList().
//                                        ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#toDynamic().
//                                                        ^^^^^^^^^ reference local exListing_52
//                                                                  ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toList().
      t.apply(BarSet, exSet.toDynamic()) == exSet
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/BarSet#
//                    ^^^^^ reference local exSet_61
//                          ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Set#toDynamic().
//                                          ^^^^^ reference local exSet_61
    }
  
    ["Dynamic to union typealias"] {
      t.apply(BarUnionSetOrList, exSet) == exSet
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/BarUnionSetOrList#
//                               ^^^^^ reference local exSet_61
//                                         ^^^^^ reference local exSet_61
      t.apply(BarUnionSetOrList, exListing.toList()) is Collection
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/BarUnionSetOrList#
//                               ^^^^^^^^^ reference local exListing_52
//                                         ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toList().
//                                                      ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Collection#
    }
  
    ["Service.toDynamic() to MyService"] {
      t.apply(MyService, service.toDynamic()) == service
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^^^^^ reference local MyService_65
//                       ^^^^^^^ reference local service_88
//                               ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Typed#toDynamic().
//                                               ^^^^^^^ reference local service_88
    }
  
    ["Service nested Dynamic to k8s Service"] {
      local nestedDynamicService = new Dynamic {
//          ^^^^^^^^^^^^^^^^^^^^ definition local nestedDynamicService_224
//                                     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#
        apiVersion = "v1"
//      ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/apiVersion.
        kind = "Service"
//      ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/kind.
        metadata {
//      ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/metadata.
          name = "example-service"
//        ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/name.
          namespace = "example-namespace"
//        ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/namespace.
          labels {
//        ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/labels.
            ["app"] = "example"
            ["env"] = "prod"
            ["prtn"] = "p102"
          }
        }
        spec {
//      ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/spec.
          type = "ClusterIP"
//        ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/type.
          ports {
//        ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/ports.
            new Dynamic {
//              ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#
              port = 8080
//            ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/port.
              targetPort = 8080
//            ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/targetPort.
              protocol = "TCP"
//            ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/protocol.
            }
          }
          selector {
//        ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/selector.
            ["app"] = "example"
            ["env"] = "prod"
            ["prtn"] = "p102"
          }
        }
      }
      t.apply(MyService, nestedDynamicService) == service
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^^^^^ reference local MyService_65
//                       ^^^^^^^^^^^^^^^^^^^^ reference local nestedDynamicService_224
//                                                ^^^^^^^ reference local service_88
    }
  
    ["Negative cases"] {
      // Something to think about: `y` is not in Foo; it quietly falls through here.
      t.apply(Foo, new Dynamic { x = 42 y = 1337 }) == new Foo { x = 42 }
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^ reference local Foo_22
//                     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#
//                               ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/x.
//                                      ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/y.
//                                                         ^^^ reference local Foo_22
//                                                               ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/x.
    }
  
    ["Type with fields that have dependent constraints"] {
      local expectedOverconstrained = new OverConstrained {
//          ^^^^^^^^^^^^^^^^^^^^^^^ definition local expectedOverconstrained_261
//                                        ^^^^^^^^^^^^^^^ reference local OverConstrained_115
        foo = "test"
//      ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/foo.
        bar = null
//      ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/bar.
      }
  
      t.apply(OverConstrained, new Dynamic { foo = "test" }) == expectedOverconstrained
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^^^^^^^^^^^ reference local OverConstrained_115
//                                 ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#
//                                           ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/foo.
//                                                              ^^^^^^^^^^^^^^^^^^^^^^^ reference local expectedOverconstrained_261
    }
  
    ["Class with default attribute gets set correctly"] {
      local expectedClassWithDefault = new ClassWithDefaultAttribute {
//          ^^^^^^^^^^^^^^^^^^^^^^^^ definition local expectedClassWithDefault_270
//                                         ^^^^^^^^^^^^^^^^^^^^^^^^^ reference local ClassWithDefaultAttribute_125
        who = "you!"
//      ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/who.
        where = "here"
//      ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/where.
      }
  
      expectedClassWithDefault.what == "The default"
//    ^^^^^^^^^^^^^^^^^^^^^^^^ reference local expectedClassWithDefault_270
//                             ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/ClassWithDefaultAttribute#what.
  
      local input = new Dynamic {
//          ^^^^^ definition local input_277
//                      ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#
        who = "you!"
//      ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/who.
        where = "here"
//      ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/where.
      }
  
      t.apply(ClassWithDefaultAttribute, input) == expectedClassWithDefault
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^^^^^^^^^^^^^^^^^^^^^ reference local ClassWithDefaultAttribute_125
//                                       ^^^^^ reference local input_277
//                                                 ^^^^^^^^^^^^^^^^^^^^^^^^ reference local expectedClassWithDefault_270
    }
  
    ["Correctly converts parent properties on a class"] {
      local expectedResult: SubClass = new {
//          ^^^^^^^^^^^^^^ definition local expectedResult_286
//                          ^^^^^^^^ reference local SubClass_136
        a = "a"
//      ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/a.
        b = 2
//      ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/b.
        c = 3
//      ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/c.
      }
  
      local value = new {
//          ^^^^^ definition local value_292
        a = "a"
//      ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/a.
        b = 2
//      ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/b.
        c = 3
//      ^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/c.
      }
  
      t.apply(SubClass, value) == expectedResult
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^^^^ reference local SubClass_136
//                      ^^^^^ reference local value_292
//                                ^^^^^^^^^^^^^^ reference local expectedResult_286
    }
  
    ["Report missing union type value"] {
      module.catch(() -> t.apply(enumType, "non")).contains("'non'")
//           ^^^^^ reference pkl . pkl 0.29.0 `pkl.test`/catch().
//                       ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//                         ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//                               ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/enumType#
//                                                 ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#contains().
    }
    ["Custom handler allows converting custom types"] {
      local expectedResult: Storage = new {
//          ^^^^^^^^^^^^^^ definition local expectedResult_305
//                          ^^^^^^^ reference local Storage_142
        size = 1024.b
//      ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/size.
//                  ^ reference pkl . pkl 0.29.0 `pkl.base`/Int#b.
      }
      local value = new {
//          ^^^^^ definition local value_308
        size = 1024
//      ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/size.
      }
      // instantiate module as we need to amend it
      new t {
//        ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
        classHandlers {
//      ^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/classHandlers.
          [DataSize] = (_, value) -> (value as Int).toDataSize("b")
//         ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/DataSize#
//                         ^^^^^ definition local value_314
//                                    ^^^^^ reference local value_314
//                                             ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
//                                                  ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#toDataSize().
        }
      }.apply(Storage, value) == expectedResult
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^^^ reference local Storage_142
//                     ^^^^^ reference local value_308
//                               ^^^^^^^^^^^^^^ reference local expectedResult_305
    }
  
    ["Supports types containing Any"] {
      local looselyTypedIntExpected: LooselyTyped = new {
//          ^^^^^^^^^^^^^^^^^^^^^^^ definition local looselyTypedIntExpected_320
//                                   ^^^^^^^^^^^^ reference local LooselyTyped_146
        anything = 0
//      ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/anything.
      }
      local looselyTypedInt = new {
//          ^^^^^^^^^^^^^^^ definition local looselyTypedInt_323
        anything = 0
//      ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/anything.
      }
      t.apply(LooselyTyped, looselyTypedInt) == looselyTypedIntExpected
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^^^^^^^^ reference local LooselyTyped_146
//                          ^^^^^^^^^^^^^^^ reference local looselyTypedInt_323
//                                              ^^^^^^^^^^^^^^^^^^^^^^^ reference local looselyTypedIntExpected_320
  
      local looselyTypedStringExpected: LooselyTyped = new {
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^ definition local looselyTypedStringExpected_328
//                                      ^^^^^^^^^^^^ reference local LooselyTyped_146
        anything = "anything"
//      ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/anything.
      }
      local looselyTypedString = new {
//          ^^^^^^^^^^^^^^^^^^ definition local looselyTypedString_331
        anything = "anything"
//      ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/anything.
      }
      t.apply(LooselyTyped, looselyTypedString) == looselyTypedStringExpected
//    ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^^^^^^^^ reference local LooselyTyped_146
//                          ^^^^^^^^^^^^^^^^^^ reference local looselyTypedString_331
//                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference local looselyTypedStringExpected_328
    }
  
    ["Supports key transformations, eg. via annotation"] {
      local input = new Dynamic {
//          ^^^^^ definition local input_338
//                      ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#
        my_field = "hello"
//      ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/my_field.
        inner {
//      ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/inner.
          my_nested_field = "world"
//        ^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/my_nested_field.
        }
      }
  
      local expectedClassWithKeyTranform = new ClassWithKeyTranform {
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ definition local expectedClassWithKeyTranform_345
//                                             ^^^^^^^^^^^^^^^^^^^^ reference local ClassWithKeyTranform_154
        myField = "hello"
//      ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/myField.
        inner {
//      ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/inner.
          myNestedField = "world"
//        ^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/myNestedField.
        }
      }
  
      new t {
//        ^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/
        keyTransform = (prop) -> prop.annotations.findOrNull((it) -> it is KeyTransform)?.name
//      ^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `tests/deepToTyped.pkl`/keyTransform.
//                      ^^^^ definition local prop_353
//                               ^^^^ reference local prop_353
//                                                            ^^ definition local it_353
//                                                                   ^^ reference local it_353
//                                                                         ^^^^^^^^^^^^ reference local KeyTransform_150
      }.apply(ClassWithKeyTranform, input) == expectedClassWithKeyTranform
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped 1.1.1 `deepToTyped.pkl`/apply().
//            ^^^^^^^^^^^^^^^^^^^^ reference local ClassWithKeyTranform_154
//                                  ^^^^^ reference local input_338
//                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reference local expectedClassWithKeyTranform_345
    }
  }
  
