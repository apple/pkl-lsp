  //===----------------------------------------------------------------------===//
  // Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     https://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  //===----------------------------------------------------------------------===//
  /// Logic for singularizing a word.
  @Unlisted
// ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Unlisted#
  module org.json_schema.contrib.internal.singularize
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/singularize.pkl`/
  
  
  // Adapted from <https://github.com/plurals/pluralize/blob/master/pluralize.js>
  //
  // Original license:
  // The MIT License (MIT)
  // Copyright (c) 2013 Blake Embrey (hello@blakeembrey.com)
  //
  // Permission is hereby granted, free of charge, to any person obtaining a copy
  // of this software and associated documentation files (the "Software"), to deal
  // in the Software without restriction, including without limitation the rights
  // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  // copies of the Software, and to permit persons to whom the Software is
  // furnished to do so, subject to the following conditions:
  //
  // The above copyright notice and this permission notice shall be included in
  // all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  // THE SOFTWARE.
  local ALWAYS_SINGLE_WORDS: Set<String|Regex> = Set(
//      ^^^^^^^^^^^^^^^^^^^ definition local ALWAYS_SINGLE_WORDS_44
//                           ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Set#
//                               ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                      ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex#
//                                               ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Set().
    "adulthood",
    "advice",
    "agenda",
    "aid",
    "aircraft",
    "alcohol",
    "ammo",
    "analytics",
    "anime",
    "athletics",
    "audio",
    "bison",
    "blood",
    "bream",
    "buffalo",
    "butter",
    "carp",
    "cash",
    "chassis",
    "chess",
    "clothing",
    "cod",
    "commerce",
    "cooperation",
    "corps",
    "debris",
    "diabetes",
    "digestion",
    "elk",
    "energy",
    "equipment",
    "excretion",
    "expertise",
    "firmware",
    "flounder",
    "fun",
    "gallows",
    "garbage",
    "graffiti",
    "hardware",
    "headquarters",
    "health",
    "herpes",
    "highjinks",
    "homework",
    "housework",
    "information",
    "jeans",
    "justice",
    "kudos",
    "labour",
    "literature",
    "machinery",
    "mackerel",
    "mail",
    "media",
    "mews",
    "moose",
    "music",
    "mud",
    "manga",
    "news",
    "only",
    "pants",
    "personnel",
    "pike",
    "plankton",
    "pliers",
    "police",
    "pollution",
    "premises",
    "rain",
    "research",
    "rice",
    "salmon",
    "scissors",
    "series",
    "sewage",
    "shambles",
    "sheep",
    "shrimp",
    "software",
    "staff",
    "swine",
    "tennis",
    "traffic",
    "transportation",
    "trousers",
    "trout",
    "tuna",
    "wealth",
    "welfare",
    "whiting",
    "wildebeest",
    "wildlife",
    "you"
  )
  
  local ALWAYS_SINGLE_WORDS_REG: Set<Regex> = Set(
//      ^^^^^^^^^^^^^^^^^^^^^^^ definition local ALWAYS_SINGLE_WORDS_REG_143
//                               ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Set#
//                                   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex#
//                                            ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Set().
    Regex(#"pok[eé]mon$"#),
//  ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    Regex(#"[^aeiou]ese$"#), // "chinese", "japanese"
//  ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    Regex(#"deer$"#), // "deer", "reindeer"
//  ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    Regex(#"fish$"#), // "fish", "blowfish", "angelfish"
//  ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    Regex(#"measles$"#),
//  ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    Regex(#"o[iu]s$"#), // "carnivorous"
//  ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    Regex(#"pox$"#), // "chickpox", "smallpox"
//  ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    Regex(#"sheep$"#)
//  ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
  )
  
  local SINGULARIZATION_RULES: Mapping<Regex, String> = new {
//      ^^^^^^^^^^^^^^^^^^^^^ definition local SINGULARIZATION_RULES_154
//                             ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                                     ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex#
//                                            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
    [Regex(#"men$"#)] = "man"
//   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    [Regex(#"(eau)x?$"#)] = "$1"
//   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    [Regex(#"(child)ren$"#)] = "$1"
//   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    [Regex(#"(pe)(rson|ople)$"#)] = "$1rson"
//   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    [Regex(#"(matr|append)ices$"#)] = "$1ix"
//   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    [Regex(#"(cod|mur|sil|vert|ind)ices$"#)] = "$1ex"
//   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    [Regex(#"(alumn|alg|vertebr)ae$"#)] = "$1a"
//   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    [Regex(#"(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$"#)] = "$1on"
//   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    [Regex(#"(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$"#)] = "$1um"
//   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    [Regex(#"(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$"#)] = "$1us"
//   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    [Regex(#"(test)(?:is|es)$"#)] = "$1is"
//   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    [Regex(#"(movie|twelve|abuse|e[mn]u)s$"#)] = "$1"
//   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    [Regex(#"(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$"#)] = "$1sis"
//   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    [Regex(#"(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$"#)] = "$1"
//   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    [Regex(#"(seraph|cherub)im$"#)] = "$1"
//   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    [Regex(#"\b((?:tit)?m|l)ice$"#)] = "$1ouse"
//   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    [Regex(#"\b(mon|smil)ies$"#)] = "$1ey"
//   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    [Regex(#"\b(l|(?:neck|cross|hog|aun)?t|coll|faer|food|gen|goon|group|hipp|junk|vegg|(?:pork)?p|charl|calor|cut)ies$"#)] = "$1ie"
//   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    [Regex(#"(dg|ss|ois|lk|ok|wn|mb|th|ch|ec|oal|is|ck|ix|sser|ts|wb)ies$"#)] = "$1ie"
//   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    [Regex(#"ies$"#)] = "y"
//   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    [Regex(#"(ar|(?:wo|[ae])l|[eo][ao])ves$"#)] = "$1f"
//   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    [Regex(#"(wi|kni|(?:after|half|high|low|mid|non|night|[^\w]|^)li)ves$"#)] = "$1fe"
//   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    [Regex(#"(ss)$"#)] = "$1"
//   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    [Regex(#"s$"#)] = ""
//   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
  }
  
  // Adapted from https://github.com/plurals/pluralize/blob/master/pluralize.js
  // Original license:
  //
  // The MIT License (MIT)
  //
  // Copyright (c) 2013 Blake Embrey (hello@blakeembrey.com)
  //
  // Permission is hereby granted, free of charge, to any person obtaining a copy
  // of this software and associated documentation files (the "Software"), to deal
  // in the Software without restriction, including without limitation the rights
  // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  // copies of the Software, and to permit persons to whom the Software is
  // furnished to do so, subject to the following conditions:
  //
  //   The above copyright notice and this permission notice shall be included in
  // all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  // THE SOFTWARE.
  /// Singularize (unpluralize) a word.
  function singularize(word: String) =
//         ^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/singularize.pkl`/singularize().
//         documentation
//         > Singularize (unpluralize) a word.
//                     ^^^^ definition local word_206
//                           ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
    if (ALWAYS_SINGLE_WORDS.contains(word)) word
//      ^^^^^^^^^^^^^^^^^^^ reference local ALWAYS_SINGLE_WORDS_44
//                          ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Set#contains().
//                                   ^^^^ reference local word_206
//                                          ^^^^ reference local word_206
    else if (ALWAYS_SINGLE_WORDS_REG.any((r) -> word.matches(r))) word
//           ^^^^^^^^^^^^^^^^^^^^^^^ reference local ALWAYS_SINGLE_WORDS_REG_143
//                                   ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Set#any().
//                                        ^ definition local r_208
//                                              ^^^^ reference local word_206
//                                                   ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#matches().
//                                                           ^ reference local r_208
//                                                                ^^^^ reference local word_206
    else
      SINGULARIZATION_RULES
//    ^^^^^^^^^^^^^^^^^^^^^ reference local SINGULARIZATION_RULES_154
        .toMap()
//       ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#toMap().
        .entries
//       ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#entries.
        .fold(Pair(word, false), (pair: Pair<String, Boolean>, rule) ->
//       ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#fold().
//            ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair().
//                 ^^^^ reference local word_206
//                                ^^^^ definition local pair_213
//                                      ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#
//                                           ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                   ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                                                             ^^^^ definition local rule_213
          // Track if we've hit one of the rules. Exit once a rule has been hit.
          if (pair.second)
//            ^^^^ reference local pair_213
//                 ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#second.
            pair
//          ^^^^ reference local pair_213
          else
            let (result = pair.first.replaceLast(rule.first, rule.second))
//               ^^^^^^ definition local result_218
//                        ^^^^ reference local pair_213
//                             ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#first.
//                                   ^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#replaceLast().
//                                               ^^^^ reference local rule_213
//                                                    ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#first.
//                                                           ^^^^ reference local rule_213
//                                                                ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#second.
              Pair(result, result != pair.first)
//            ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair().
//                 ^^^^^^ reference local result_218
//                         ^^^^^^ reference local result_218
//                                   ^^^^ reference local pair_213
//                                        ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#first.
        )
        .first
//       ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#first.
  
