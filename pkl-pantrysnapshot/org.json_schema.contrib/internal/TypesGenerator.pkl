  //===----------------------------------------------------------------------===//
  // Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     https://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  //===----------------------------------------------------------------------===//
  /// Logic for turning JSON Schemas into type nodes.
  ///
  /// A type node can be thought of as a type annotation; for example, it is `Int` within `foo: Int`.
  ///
  /// Class and typealias definitions are handled by [ClassGenerator] instead of here.
  @Unlisted
// ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Unlisted#
  module org.json_schema.contrib.internal.TypesGenerator
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/
  
  import "pkl:math"
  import "@jsonschema/JsonSchema.pkl"
  import "../ref.pkl"
  import "@syntax/TypeNode.pkl"
  import "@syntax/ExpressionNode.pkl"
  import "@syntax/operators.pkl"
  import "@uri/URI.pkl"
  import "utils.pkl"
  import "Type.pkl"
  
  /// The base URI, used to resolve `$ref` values.
  baseUri: URI
//^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/baseUri.
//documentation
//> The base URI, used to resolve `$ref` values.
//         ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.uri 1.0.3 `URI.pkl`/
  
  enclosingModuleName: String
//^^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/enclosingModuleName.
//                     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  
  /// Generate a Pkl type definition from a given schema.
  ///
  /// Expects class and typealias names to be known beforehand; [typeNames] is a map of a [JsonSchema] to its
  /// determined declared name.
  function generateTypeNode(
//         ^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/generateTypeNode().
//         documentation
//         > Generate a Pkl type definition from a given schema.
//         > 
//         > Expects class and typealias names to be known beforehand; [`typeNames`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema.contrib/internal/TypesGenerator.pkl#L45,C3) is a map of a [`JsonSchema`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L22,C1) to its
//         > determined declared name.
    schema: JsonSchema.Schema,
//  ^^^^^^ definition local schema_44
//                     ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
    typeNames: Type.TypeNames
//  ^^^^^^^^^ definition local typeNames_45
//                  ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/Type.pkl`/TypeNames#
  ): TypeNode =
//   ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/
    if (schema is JsonSchema && schema.$$refUri != null)
//      ^^^^^^ reference local schema_44
//                ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                              ^^^^^^ reference local schema_44
//                                     ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/$$refUri.
      let (resolved = ref.resolveRef(baseUri, schema))
//         ^^^^^^^^ definition local resolved_48
//                    ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `ref.pkl`/
//                        ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `ref.pkl`/resolveRef().
//                                   ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/baseUri.
//                                            ^^^^^^ reference local schema_44
        // Couldn't resolve the $ref, so mark this as an unknown type.
        if (resolved == null)
//          ^^^^^^^^ reference local resolved_48
          new TypeNode.BuiltInTypeNode { type = "unknown" }
//                     ^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/BuiltInTypeNode#
//                                       ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/type.
        else
          generateTypeNode(resolved, typeNames)
//        ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/generateTypeNode().
//                         ^^^^^^^^ reference local resolved_48
//                                   ^^^^^^^^^ reference local typeNames_45
    else if (schema is JsonSchema && schema == schema.$$baseSchema)
//           ^^^^^^ reference local schema_44
//                     ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                   ^^^^^^ reference local schema_44
//                                             ^^^^^^ reference local schema_44
//                                                    ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/$$baseSchema.
      new TypeNode.BuiltInTypeNode { type = "module" }
//                 ^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/BuiltInTypeNode#
//                                   ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/type.
    // If a boolean, `true` means "anything is valid", `false` means "nothing is valid".
    else if (schema is Boolean)
//           ^^^^^^ reference local schema_44
//                     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
      if (schema)
//        ^^^^^^ reference local schema_44
        utils.declaredType("Any")
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//            ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/declaredType().
      else
        new TypeNode.BuiltInTypeNode { type = "nothing" }
//                   ^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/BuiltInTypeNode#
//                                     ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/type.
    // If we have generated a class or typealias definition already, simply use it.
    else if (typeNames.containsKey(schema._inline_?.getOrNull("__ref_orig__") ?? schema))
//           ^^^^^^^^^ reference local typeNames_45
//                     ^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#containsKey().
//                                 ^^^^^^ reference local schema_44
//                                        ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/_inline_.
//                                                  ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#getOrNull().
//                                                                               ^^^^^^ reference local schema_44
      let (type = typeNames[(schema._inline_?.getOrNull("__ref_orig__") ?? schema) as JsonSchema])
//         ^^^^ definition local type_64
//                ^^^^^^^^^ reference local typeNames_45
//                           ^^^^^^ reference local schema_44
//                                  ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/_inline_.
//                                            ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#getOrNull().
//                                                                         ^^^^^^ reference local schema_44
//                                                                                    ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
        utils.declaredType1(type, type.moduleName != enclosingModuleName)
//      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//            ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/declaredType1().
//                          ^^^^ reference local type_64
//                                ^^^^ reference local type_64
//                                     ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/Type.pkl`/moduleName.
//                                                   ^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/enclosingModuleName.
    // Edge case: if `type` includes `"null"`, treat this as a nullable type.
    else if (schema.type is Listing && schema.type.toList().contains("null"))
//           ^^^^^^ reference local schema_44
//                  ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/type.
//                          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                                     ^^^^^^ reference local schema_44
//                                            ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/type.
//                                                 ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toList().
//                                                          ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#contains().
      let (subtype = generateTypeNode((schema) {
//         ^^^^^^^ definition local subtype_68
//                   ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/generateTypeNode().
//                                     ^^^^^^ reference local schema_44
        type = schema.type.toList().filter((t) -> t != "null").toListing()
//      ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/type.
//             ^^^^^^ reference local schema_44
//                    ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/type.
//                         ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toList().
//                                  ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#filter().
//                                          ^ definition local t_69
//                                                ^ reference local t_69
//                                                             ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#toListing().
      }, typeNames))
//       ^^^^^^^^^ reference local typeNames_45
        new TypeNode.NullableTypeNode {
//                   ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/NullableTypeNode#
          typeNode = subtype
//        ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/typeNode.
//                   ^^^^^^^ reference local subtype_68
        }
    else
      let (pair = generateBaseType(schema as JsonSchema, typeNames))
//         ^^^^ definition local pair_75
//                ^^^^^^^^^^^^^^^^ reference local generateBaseType_656
//                                 ^^^^^^ reference local schema_44
//                                           ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                       ^^^^^^^^^ reference local typeNames_45
        pair.second |> addConstraints(pair.first)
//      ^^^^ reference local pair_75
//           ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#second.
//                     ^^^^^^^^^^^^^^ reference local addConstraints_398
//                                    ^^^^ reference local pair_75
//                                         ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#first.
  
  /// Node equivalent of `isBetween`.
  ///
  /// Returns null if either of minimum or maximum are missing.
  local function constraintIsBetween(minimum: Number?, maximum: Number?): ExpressionNode.MemberAccessExpressionNode? =
//               ^^^^^^^^^^^^^^^^^^^ definition local constraintIsBetween_78
//               documentation
//               > Node equivalent of `isBetween`.
//               > 
//               > Returns null if either of minimum or maximum are missing.
//                                   ^^^^^^^ definition local minimum_81
//                                            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                                                     ^^^^^^^ definition local maximum_81
//                                                              ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/MemberAccessExpressionNode#
    if (minimum != null && maximum != null)
//      ^^^^^^^ reference local minimum_81
//                         ^^^^^^^ reference local maximum_81
      new {
        identifier {
//      ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/identifier.
          value = "isBetween"
//        ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
        }
        arguments {
//      ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/arguments.
          utils.numberLiteral(minimum)
//        ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//              ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/numberLiteral().
//                            ^^^^^^^ reference local minimum_81
          utils.numberLiteral(maximum)
//        ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//              ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/numberLiteral().
//                            ^^^^^^^ reference local maximum_81
        }
      }
    else null
  
  /// Node equivalent of `length.isBetween(...)`, given the minimum and maximum values.
  local function constraintLengthIsBetween(minimum: Number?, maximum: Number?): ExpressionNode? =
//               ^^^^^^^^^^^^^^^^^^^^^^^^^ definition local constraintLengthIsBetween_94
//               documentation
//               > Node equivalent of `length.isBetween(...)`, given the minimum and maximum values.
//                                         ^^^^^^^ definition local minimum_95
//                                                  ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                                                           ^^^^^^^ definition local maximum_95
//                                                                    ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                                                                              ^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/
    let (isBetween = constraintIsBetween(minimum, maximum))
//       ^^^^^^^^^ definition local isBetween_96
//                   ^^^^^^^^^^^^^^^^^^^ reference local constraintIsBetween_78
//                                       ^^^^^^^ reference local minimum_95
//                                                ^^^^^^^ reference local maximum_95
      if (isBetween != null)
//        ^^^^^^^^^ reference local isBetween_96
        new ExpressionNode.QualifiedMemberAccessExpressionNode {
//                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/QualifiedMemberAccessExpressionNode#
          lhs = new ExpressionNode.MemberAccessExpressionNode {
//        ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/lhs.
//                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/MemberAccessExpressionNode#
            identifier {
//          ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/identifier.
              value = "length"
//            ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
            }
          }
          rhs = isBetween
//        ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/rhs.
//              ^^^^^^^^^ reference local isBetween_96
        }
      else null
  
  /// Node equivalent of `isEmpty` or `!isEmpty`.
  local function constraintIsEmpty(minimum: Number?, maximum: Number?): ExpressionNode? =
//               ^^^^^^^^^^^^^^^^^ definition local constraintIsEmpty_108
//               documentation
//               > Node equivalent of `isEmpty` or `!isEmpty`.
//                                 ^^^^^^^ definition local minimum_109
//                                          ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                                                   ^^^^^^^ definition local maximum_109
//                                                            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                                                                      ^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/
    let (IS_EMPTY = new ExpressionNode.MemberAccessExpressionNode {
//       ^^^^^^^^ definition local IS_EMPTY_110
//                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/MemberAccessExpressionNode#
      identifier {
//    ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/identifier.
        value = "isEmpty"
//      ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
      }
    })
      if (minimum == null && maximum == 0)
//        ^^^^^^^ reference local minimum_109
//                           ^^^^^^^ reference local maximum_109
        IS_EMPTY
//      ^^^^^^^^ reference local IS_EMPTY_110
      else if (minimum == 1 && maximum == null)
//             ^^^^^^^ reference local minimum_109
//                             ^^^^^^^ reference local maximum_109
        new ExpressionNode.PrefixOperatorExpressionNode {
//                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/PrefixOperatorExpressionNode#
          operator = operators.NOT
//        ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/operator.
//                   ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                             ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/NOT.
          expression = IS_EMPTY
//        ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/expression.
//                     ^^^^^^^^ reference local IS_EMPTY_110
        }
      else null
  
  /// Node equivalent of `isPositive` or `!isPositive`.
  local function numberConstraintsIsPositive(minimum: Number?, maximum: Number?): ExpressionNode? =
//               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ definition local numberConstraintsIsPositive_124
//               documentation
//               > Node equivalent of `isPositive` or `!isPositive`.
//                                           ^^^^^^^ definition local minimum_125
//                                                    ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                                                             ^^^^^^^ definition local maximum_125
//                                                                      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                                                                                ^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/
    if (minimum == 0 && maximum == null)
//      ^^^^^^^ reference local minimum_125
//                      ^^^^^^^ reference local maximum_125
      new ExpressionNode.MemberAccessExpressionNode {
//                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/MemberAccessExpressionNode#
        identifier {
//      ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/identifier.
          value = "isPositive"
//        ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
        }
      }
    else if (minimum == null && maximum == -1)
//           ^^^^^^^ reference local minimum_125
//                              ^^^^^^^ reference local maximum_125
      new ExpressionNode.PrefixOperatorExpressionNode {
//                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/PrefixOperatorExpressionNode#
        operator = operators.NOT
//      ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/operator.
//                 ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                           ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/NOT.
        expression = new ExpressionNode.MemberAccessExpressionNode {
//      ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/expression.
//                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/MemberAccessExpressionNode#
          identifier {
//        ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/identifier.
            value = "isPositive"
//          ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
          }
        }
      }
    else null
  
  /// Constraints on numbers.
  local function numberConstraints(schema: JsonSchema): List<ExpressionNode> =
//               ^^^^^^^^^^^^^^^^^ definition local numberConstraints_143
//               documentation
//               > Constraints on numbers.
//                                 ^^^^^^ definition local schema_144
//                                         ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                      ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                                                           ^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/
    if (!isNumberSchema(schema))
//       ^^^^^^^^^^^^^^ reference local isNumberSchema_631
//                      ^^^^^^ reference local schema_144
      List()
//    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
    else
      let (minimum = if (schema.exclusiveMinimum != null) schema.exclusiveMinimum!! + 1 else schema.minimum)
//         ^^^^^^^ definition local minimum_148
//                       ^^^^^^ reference local schema_144
//                              ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/exclusiveMinimum.
//                                                        ^^^^^^ reference local schema_144
//                                                               ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/exclusiveMinimum.
//                                                                                           ^^^^^^ reference local schema_144
//                                                                                                  ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/minimum.
      let (maximum = if (schema.exclusiveMaximum != null) schema.exclusiveMaximum!! - 1 else schema.maximum)
//         ^^^^^^^ definition local maximum_149
//                       ^^^^^^ reference local schema_144
//                              ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/exclusiveMaximum.
//                                                        ^^^^^^ reference local schema_144
//                                                               ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/exclusiveMaximum.
//                                                                                           ^^^^^^ reference local schema_144
//                                                                                                  ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/maximum.
      let (isBetween = constraintIsBetween(minimum, maximum))
//         ^^^^^^^^^ definition local isBetween_150
//                     ^^^^^^^^^^^^^^^^^^^ reference local constraintIsBetween_78
//                                         ^^^^^^^ reference local minimum_148
//                                                  ^^^^^^^ reference local maximum_149
      let (isPositive = numberConstraintsIsPositive(minimum, maximum))
//         ^^^^^^^^^^ definition local isPositive_151
//                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ reference local numberConstraintsIsPositive_124
//                                                  ^^^^^^^ reference local minimum_148
//                                                           ^^^^^^^ reference local maximum_149
        new Listing {
//          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
          when (isBetween != null) {
//              ^^^^^^^^^ reference local isBetween_150
            isBetween
//          ^^^^^^^^^ reference local isBetween_150
          }
          when (isPositive != null) {
//              ^^^^^^^^^^ reference local isPositive_151
            isPositive
//          ^^^^^^^^^^ reference local isPositive_151
          }
          when (isPositive == null && isBetween == null) {
//              ^^^^^^^^^^ reference local isPositive_151
//                                    ^^^^^^^^^ reference local isBetween_150
            when (schema.minimum != null) {
//                ^^^^^^ reference local schema_144
//                       ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/minimum.
              utils.binaryOperatorNode(utils.THIS, operators.GREATER_THAN_OR_EQUALS, utils.numberLiteral(schema.minimum!!))
//            ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                  ^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/binaryOperatorNode().
//                                     ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                                           ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/THIS.
//                                                 ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                                                           ^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/GREATER_THAN_OR_EQUALS.
//                                                                                   ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                                                                                         ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/numberLiteral().
//                                                                                                       ^^^^^^ reference local schema_144
//                                                                                                              ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/minimum.
            }
  
            when (schema.exclusiveMinimum != null) {
//                ^^^^^^ reference local schema_144
//                       ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/exclusiveMinimum.
              utils.binaryOperatorNode(utils.THIS, operators.GREATER_THAN, utils.numberLiteral(schema.exclusiveMinimum!!))
//            ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                  ^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/binaryOperatorNode().
//                                     ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                                           ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/THIS.
//                                                 ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                                                           ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/GREATER_THAN.
//                                                                         ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                                                                               ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/numberLiteral().
//                                                                                             ^^^^^^ reference local schema_144
//                                                                                                    ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/exclusiveMinimum.
            }
  
            when (schema.maximum != null) {
//                ^^^^^^ reference local schema_144
//                       ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/maximum.
              utils.binaryOperatorNode(utils.THIS, operators.LESS_THAN_OR_EQUALS, utils.numberLiteral(schema.maximum!!))
//            ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                  ^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/binaryOperatorNode().
//                                     ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                                           ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/THIS.
//                                                 ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                                                           ^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/LESS_THAN_OR_EQUALS.
//                                                                                ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                                                                                      ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/numberLiteral().
//                                                                                                    ^^^^^^ reference local schema_144
//                                                                                                           ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/maximum.
            }
  
            when (schema.exclusiveMaximum != null) {
//                ^^^^^^ reference local schema_144
//                       ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/exclusiveMaximum.
              utils.binaryOperatorNode(utils.THIS, operators.LESS_THAN, utils.numberLiteral(schema.exclusiveMaximum!!))
//            ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                  ^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/binaryOperatorNode().
//                                     ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                                           ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/THIS.
//                                                 ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                                                           ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/LESS_THAN.
//                                                                      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                                                                            ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/numberLiteral().
//                                                                                          ^^^^^^ reference local schema_144
//                                                                                                 ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/exclusiveMaximum.
            }
          }
          when (schema.multipleOf != null) {
//              ^^^^^^ reference local schema_144
//                     ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/multipleOf.
            if (schema.multipleOf == 2)
//              ^^^^^^ reference local schema_144
//                     ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/multipleOf.
              new ExpressionNode.MemberAccessExpressionNode {
//                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/MemberAccessExpressionNode#
                identifier {
//              ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/identifier.
                  value = "isEven"
//                ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
                }
              }
            else
              utils.binaryOperatorNode(
//            ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                  ^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/binaryOperatorNode().
                utils.binaryOperatorNode(utils.THIS, operators.MODULO, utils.numberLiteral(schema.multipleOf!!)),
//              ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                    ^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/binaryOperatorNode().
//                                       ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                                             ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/THIS.
//                                                   ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                                                             ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/MODULO.
//                                                                     ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                                                                           ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/numberLiteral().
//                                                                                         ^^^^^^ reference local schema_144
//                                                                                                ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/multipleOf.
                operators.EQUALS,
//              ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                        ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/EQUALS.
                utils.numberLiteral(0)
//              ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                    ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/numberLiteral().
              )
          }
        }.toList()
//        ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toList().
  
  local function arrayConstraints(schema: JsonSchema): List<ExpressionNode> =
//               ^^^^^^^^^^^^^^^^ definition local arrayConstraints_192
//                                ^^^^^^ definition local schema_192
//                                        ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                     ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                                                          ^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/
    if (!isListingSchema(schema))
//       ^^^^^^^^^^^^^^^ reference local isListingSchema_646
//                       ^^^^^^ reference local schema_192
      List()
//    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
    else
      let (isBetween = constraintLengthIsBetween(schema.minItems, schema.maxItems))
//         ^^^^^^^^^ definition local isBetween_196
//                     ^^^^^^^^^^^^^^^^^^^^^^^^^ reference local constraintLengthIsBetween_94
//                                               ^^^^^^ reference local schema_192
//                                                      ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/minItems.
//                                                                ^^^^^^ reference local schema_192
//                                                                       ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/maxItems.
      let (isEmpty = constraintIsEmpty(schema.minItems, schema.maxItems))
//         ^^^^^^^ definition local isEmpty_197
//                   ^^^^^^^^^^^^^^^^^ reference local constraintIsEmpty_108
//                                     ^^^^^^ reference local schema_192
//                                            ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/minItems.
//                                                      ^^^^^^ reference local schema_192
//                                                             ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/maxItems.
        new Listing {
//          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
          when (isBetween != null) {
//              ^^^^^^^^^ reference local isBetween_196
            isBetween
//          ^^^^^^^^^ reference local isBetween_196
          }
          when (isEmpty != null) {
//              ^^^^^^^ reference local isEmpty_197
            isEmpty
//          ^^^^^^^ reference local isEmpty_197
          }
          when (isBetween == null && isEmpty == null) {
//              ^^^^^^^^^ reference local isBetween_196
//                                   ^^^^^^^ reference local isEmpty_197
            when (schema.minItems != null) {
//                ^^^^^^ reference local schema_192
//                       ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/minItems.
              utils.binaryOperatorNode(new ExpressionNode.MemberAccessExpressionNode {
//            ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                  ^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/binaryOperatorNode().
//                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/MemberAccessExpressionNode#
                identifier {
//              ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/identifier.
                  value = "length"
//                ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
                }
              }, operators.GREATER_THAN_OR_EQUALS, utils.numberLiteral(schema.minItems!!))
//               ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                         ^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/GREATER_THAN_OR_EQUALS.
//                                                 ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                                                       ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/numberLiteral().
//                                                                     ^^^^^^ reference local schema_192
//                                                                            ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/minItems.
            }
  
            when (schema.maxItems != null) {
//                ^^^^^^ reference local schema_192
//                       ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/maxItems.
              utils.binaryOperatorNode(new ExpressionNode.MemberAccessExpressionNode {
//            ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                  ^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/binaryOperatorNode().
//                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/MemberAccessExpressionNode#
                identifier {
//              ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/identifier.
                  value = "length"
//                ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
                }
              }, operators.LESS_THAN_OR_EQUALS, utils.numberLiteral(schema.maxItems!!))
//               ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                         ^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/LESS_THAN_OR_EQUALS.
//                                              ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                                                    ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/numberLiteral().
//                                                                  ^^^^^^ reference local schema_192
//                                                                         ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/maxItems.
            }
          }
          when (schema.uniqueItems == true) {
//              ^^^^^^ reference local schema_192
//                     ^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/uniqueItems.
            new ExpressionNode.MemberAccessExpressionNode {
//                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/MemberAccessExpressionNode#
              identifier {
//            ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/identifier.
                value = "isDistinct"
//              ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
              }
            }
          }
        }.toList()
//        ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toList().
  
  local function stringConstraints(schema: JsonSchema): List<ExpressionNode> =
//               ^^^^^^^^^^^^^^^^^ definition local stringConstraints_231
//                                 ^^^^^^ definition local schema_231
//                                         ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                      ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                                                           ^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/
    if (!isStringSchema(schema))
//       ^^^^^^^^^^^^^^ reference local isStringSchema_636
//                      ^^^^^^ reference local schema_231
      List()
//    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
    else
      let (isBetween = constraintLengthIsBetween(schema.minLength, schema.maxLength))
//         ^^^^^^^^^ definition local isBetween_235
//                     ^^^^^^^^^^^^^^^^^^^^^^^^^ reference local constraintLengthIsBetween_94
//                                               ^^^^^^ reference local schema_231
//                                                      ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/minLength.
//                                                                 ^^^^^^ reference local schema_231
//                                                                        ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/maxLength.
      let (isEmpty = constraintIsEmpty(schema.minLength, schema.maxLength))
//         ^^^^^^^ definition local isEmpty_236
//                   ^^^^^^^^^^^^^^^^^ reference local constraintIsEmpty_108
//                                     ^^^^^^ reference local schema_231
//                                            ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/minLength.
//                                                       ^^^^^^ reference local schema_231
//                                                              ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/maxLength.
        new Listing {
//          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
          when (isBetween != null) {
//              ^^^^^^^^^ reference local isBetween_235
            isBetween
//          ^^^^^^^^^ reference local isBetween_235
          }
          when (isEmpty != null) {
//              ^^^^^^^ reference local isEmpty_236
            isEmpty
//          ^^^^^^^ reference local isEmpty_236
          }
          when (isBetween == null && isEmpty == null) {
//              ^^^^^^^^^ reference local isBetween_235
//                                   ^^^^^^^ reference local isEmpty_236
            when (schema.minLength != null) {
//                ^^^^^^ reference local schema_231
//                       ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/minLength.
              utils.binaryOperatorNode(new ExpressionNode.MemberAccessExpressionNode {
//            ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                  ^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/binaryOperatorNode().
//                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/MemberAccessExpressionNode#
                identifier {
//              ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/identifier.
                  value = "length"
//                ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
                }
              }, operators.GREATER_THAN_OR_EQUALS, utils.numberLiteral(schema.minLength!!))
//               ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                         ^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/GREATER_THAN_OR_EQUALS.
//                                                 ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                                                       ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/numberLiteral().
//                                                                     ^^^^^^ reference local schema_231
//                                                                            ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/minLength.
            }
  
            when (schema.maxLength != null) {
//                ^^^^^^ reference local schema_231
//                       ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/maxLength.
              utils.binaryOperatorNode(new ExpressionNode.MemberAccessExpressionNode {
//            ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                  ^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/binaryOperatorNode().
//                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/MemberAccessExpressionNode#
                identifier {
//              ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/identifier.
                  value = "length"
//                ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
                }
              }, operators.LESS_THAN_OR_EQUALS, utils.numberLiteral(schema.maxLength!!))
//               ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                         ^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/LESS_THAN_OR_EQUALS.
//                                              ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                                                    ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/numberLiteral().
//                                                                  ^^^^^^ reference local schema_231
//                                                                         ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/maxLength.
            }
          }
  
          when (schema.pattern != null) {
//              ^^^^^^ reference local schema_231
//                     ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/pattern.
            new ExpressionNode.MemberAccessExpressionNode {
//                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/MemberAccessExpressionNode#
              identifier {
//            ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/identifier.
                value = "matches"
//              ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
              }
              arguments {
//            ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/arguments.
                new ExpressionNode.MemberAccessExpressionNode {
//                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/MemberAccessExpressionNode#
                  identifier {
//                ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/identifier.
                    value = "Regex"
//                  ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
                  }
                  arguments {
//                ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/arguments.
                    new ExpressionNode.LiteralValueExpressionNode {
//                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/LiteralValueExpressionNode#
                      value = schema.pattern
//                    ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
//                            ^^^^^^ reference local schema_231
//                                   ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/pattern.
                    }
                  }
                }
              }
            }
          }
  
          // For formats, regex is easy, but not really clear how to describe anything else.
          when (schema.format == "regex") {
//              ^^^^^^ reference local schema_231
//                     ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/format.
            new ExpressionNode.MemberAccessExpressionNode {
//                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/MemberAccessExpressionNode#
              identifier {
//            ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/identifier.
                value = "isRegex"
//              ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
              }
            }
          }
        }.toList()
//        ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toList().
  
  /// Constraints for [Mapping] types.
  ///
  /// Note: [JsonSchema.patternProperties] is handled in the base type rather than as a constraint.
  local function mappingConstraints(schema: JsonSchema): List<ExpressionNode> =
//               ^^^^^^^^^^^^^^^^^^ definition local mappingConstraints_292
//               documentation
//               > Constraints for [`Mapping`](pkl-lsp://stdlib/base.pkl#L2038,C7) types.
//               > 
//               > Note: [`JsonSchema.patternProperties`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L337,C1) is handled in the base type rather than as a constraint.
//                                  ^^^^^^ definition local schema_295
//                                          ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                       ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                                                            ^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/
    if (!isMappingSchema(schema))
//       ^^^^^^^^^^^^^^^ reference local isMappingSchema_651
//                       ^^^^^^ reference local schema_295
      List()
//    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
    else
      let (isBetween = constraintLengthIsBetween(schema.minProperties, schema.maxProperties))
//         ^^^^^^^^^ definition local isBetween_299
//                     ^^^^^^^^^^^^^^^^^^^^^^^^^ reference local constraintLengthIsBetween_94
//                                               ^^^^^^ reference local schema_295
//                                                      ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/minProperties.
//                                                                     ^^^^^^ reference local schema_295
//                                                                            ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/maxProperties.
        new Listing {
//          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
          when (isBetween != null) {
//              ^^^^^^^^^ reference local isBetween_299
            isBetween
//          ^^^^^^^^^ reference local isBetween_299
          }
          when (isBetween == null) {
//              ^^^^^^^^^ reference local isBetween_299
            when (schema.minProperties != null) {
//                ^^^^^^ reference local schema_295
//                       ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/minProperties.
              utils.binaryOperatorNode(new ExpressionNode.MemberAccessExpressionNode {
//            ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                  ^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/binaryOperatorNode().
//                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/MemberAccessExpressionNode#
                identifier {
//              ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/identifier.
                  value = "length"
//                ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
                }
              }, operators.GREATER_THAN_OR_EQUALS, utils.numberLiteral(schema.minProperties!!))
//               ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                         ^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/GREATER_THAN_OR_EQUALS.
//                                                 ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                                                       ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/numberLiteral().
//                                                                     ^^^^^^ reference local schema_295
//                                                                            ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/minProperties.
            }
  
            when (schema.maxProperties != null) {
//                ^^^^^^ reference local schema_295
//                       ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/maxProperties.
              utils.binaryOperatorNode(new ExpressionNode.MemberAccessExpressionNode {
//            ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                  ^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/binaryOperatorNode().
//                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/MemberAccessExpressionNode#
                identifier {
//              ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/identifier.
                  value = "length"
//                ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
                }
              }, operators.LESS_THAN_OR_EQUALS, utils.numberLiteral(schema.maxProperties!!))
//               ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                         ^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/LESS_THAN_OR_EQUALS.
//                                              ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                                                    ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/numberLiteral().
//                                                                  ^^^^^^ reference local schema_295
//                                                                         ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/maxProperties.
            }
          }
        }.toList()
//        ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toList().
  
  /// Internal implementation of [literalValueConstraints]
  ///
  /// [enums] must be a non-empty array.
  local function literalValueConstraintsImpl(enums: List<String|Boolean|Number|Null>): ExpressionNode =
//               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ definition local literalValueConstraintsImpl_323
//               documentation
//               > Internal implementation of `literalValueConstraints`
//               > 
//               > [`enums`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema.contrib/internal/TypesGenerator.pkl#L326,C44) must be a non-empty array.
//                                           ^^^^^ definition local enums_326
//                                                  ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                                                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                              ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                                                                      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                                                                             ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Null#
//                                                                                     ^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/
    if (enums.length == 1)
//      ^^^^^ reference local enums_326
//            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#length.
      new ExpressionNode.BinaryOperatorExpressionNode {
//                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/BinaryOperatorExpressionNode#
        lhs = utils.THIS
//      ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/lhs.
//            ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                  ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/THIS.
        operator = operators.EQUALS
//      ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/operator.
//                 ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                           ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/EQUALS.
        rhs = new ExpressionNode.LiteralValueExpressionNode {
//      ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/rhs.
//                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/LiteralValueExpressionNode#
          value = enums[0]
//        ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
//                ^^^^^ reference local enums_326
        }
      }
    else
      new ExpressionNode.BinaryOperatorExpressionNode {
//                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/BinaryOperatorExpressionNode#
        lhs = new ExpressionNode.BinaryOperatorExpressionNode {
//      ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/lhs.
//                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/BinaryOperatorExpressionNode#
          lhs = utils.THIS
//        ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/lhs.
//              ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                    ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/THIS.
          operator = operators.EQUALS
//        ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/operator.
//                   ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                             ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/EQUALS.
          rhs = new ExpressionNode.LiteralValueExpressionNode {
//        ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/rhs.
//                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/LiteralValueExpressionNode#
            value = enums[0]
//          ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
//                  ^^^^^ reference local enums_326
          }
        }
        operator = operators.OR
//      ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/operator.
//                 ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                           ^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/OR.
        rhs = literalValueConstraintsImpl(enums.drop(1))
//      ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/rhs.
//            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ reference local literalValueConstraintsImpl_323
//                                        ^^^^^ reference local enums_326
//                                              ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#drop().
      }
  
  /// Node equivalent of literal value restrictions.
  ///
  /// Given `"enum": [1, 2, 3, 4]`, generates `this == 1 || this == 2 || this == 3 || this == 4`
  /// Note: enums of strings is not handled by this; it is generated as a union type of string literals instead by [generateBaseType].
  local function literalValueConstraints(schema: JsonSchema): List<ExpressionNode> =
//               ^^^^^^^^^^^^^^^^^^^^^^^ definition local literalValueConstraints_348
//               documentation
//               > Node equivalent of literal value restrictions.
//               > 
//               > Given `"enum": `1, 2, 3, 4``, generates `this == 1 || this == 2 || this == 3 || this == 4`
//               > Note: enums of strings is not handled by this; it is generated as a union type of string literals instead by `generateBaseType`.
//                                       ^^^^^^ definition local schema_352
//                                               ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                            ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                                                                 ^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/
    if (schema.enum == null && schema.`const` == null)
//      ^^^^^^ reference local schema_352
//             ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/enum.
//                             ^^^^^^ reference local schema_352
//                                    ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/const.
      List()
//    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
    else
      let (enums =
//         ^^^^^ definition local enums_356
        if (schema.enum is Listing) schema.enum.toList()
//          ^^^^^^ reference local schema_352
//                 ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/enum.
//                         ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                                  ^^^^^^ reference local schema_352
//                                         ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/enum.
//                                              ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toList().
        else if (schema.`const` != null) List(schema.`const`)
//               ^^^^^^ reference local schema_352
//                      ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/const.
//                                       ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
//                                            ^^^^^^ reference local schema_352
//                                                   ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/const.
        else List(schema.enum))
//           ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
//                ^^^^^^ reference local schema_352
//                       ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/enum.
        let (filteredEnums = enums.filter((enum) -> enum is String|Boolean|Number|Null) as List<String|Boolean|Number|Null>)
//           ^^^^^^^^^^^^^ definition local filteredEnums_360
//                           ^^^^^ reference local enums_356
//                                 ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#filter().
//                                         ^^^^ definition local enum_360
//                                                  ^^^^ reference local enum_360
//                                                          ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                                 ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                                                                         ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                                                                                ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Null#
//                                                                                         ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                                                                                              ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                                                                     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                                                                                                             ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                                                                                                                    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Null#
          if (filteredEnums.isEmpty)
//            ^^^^^^^^^^^^^ reference local filteredEnums_360
//                          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#isEmpty.
            List()
//          ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
          // "enum": [true, false] is exactly the same meaning as Boolean, so skip generating literal value constraints.
          else if (filteredEnums.toSet() == Set(true, false))
//                 ^^^^^^^^^^^^^ reference local filteredEnums_360
//                               ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#toSet().
//                                          ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Set().
            List()
//          ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
          else
            List(literalValueConstraintsImpl(filteredEnums))
//          ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
//               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ reference local literalValueConstraintsImpl_323
//                                           ^^^^^^^^^^^^^ reference local filteredEnums_360
  
  /// Table of binary operators to its exact opposite.
  ///
  /// This is used to render a nicer constraint and avoid using `!`.
  /// For example, we want `this > 5` instead of `!(this <= 4)`
  local antonyms: Mapping<operators.BinaryOperator, operators.BinaryOperator> = new {
//      ^^^^^^^^ definition local antonyms_369
//      documentation
//      > Table of binary operators to its exact opposite.
//      > 
//      > This is used to render a nicer constraint and avoid using `!`.
//      > For example, we want `this > 5` instead of `!(this <= 4)`
//                ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                                  ^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/BinaryOperator#
//                                                            ^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/BinaryOperator#
    [operators.GREATER_THAN] = operators.LESS_THAN_OR_EQUALS
//   ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//             ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/GREATER_THAN.
//                             ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                                       ^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/LESS_THAN_OR_EQUALS.
    [operators.GREATER_THAN_OR_EQUALS] = operators.LESS_THAN
//   ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//             ^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/GREATER_THAN_OR_EQUALS.
//                                       ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                                                 ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/LESS_THAN.
    [operators.LESS_THAN] = operators.GREATER_THAN_OR_EQUALS
//   ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//             ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/LESS_THAN.
//                          ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                                    ^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/GREATER_THAN_OR_EQUALS.
    [operators.LESS_THAN_OR_EQUALS] = operators.GREATER_THAN
//   ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//             ^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/LESS_THAN_OR_EQUALS.
//                                    ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                                              ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/GREATER_THAN.
    [operators.EQUALS] = operators.NOT_EQUALS
//   ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//             ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/EQUALS.
//                       ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                                 ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/NOT_EQUALS.
    [operators.NOT_EQUALS] = operators.EQUALS
//   ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//             ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/NOT_EQUALS.
//                           ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                                     ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/EQUALS.
  }
  
  local memberAccessAntonyms: Mapping<String, String> = new {
//      ^^^^^^^^^^^^^^^^^^^^ definition local memberAccessAntonyms_382
//                            ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                                    ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
    ["isOdd"] = "isEven"
    ["isEven"] = "isOdd"
    ["isFinite"] = "isInfinite"
    ["isInfinite"] = "isFinite"
  }
  
  local function constraintExpressions(schema: JsonSchema.Schema): List<ExpressionNode> =
//               ^^^^^^^^^^^^^^^^^^^^^ definition local constraintExpressions_389
//                                     ^^^^^^ definition local schema_389
//                                                        ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
//                                                                 ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                                                                      ^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/
    if (schema is Boolean) List()
//      ^^^^^^ reference local schema_389
//                ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                         ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
    else
      numberConstraints(schema as JsonSchema)
//    ^^^^^^^^^^^^^^^^^ reference local numberConstraints_143
//                      ^^^^^^ reference local schema_389
//                                ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
        + arrayConstraints(schema as JsonSchema)
//        ^^^^^^^^^^^^^^^^ reference local arrayConstraints_192
//                         ^^^^^^ reference local schema_389
//                                   ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
        + stringConstraints(schema as JsonSchema)
//        ^^^^^^^^^^^^^^^^^ reference local stringConstraints_231
//                          ^^^^^^ reference local schema_389
//                                    ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
        + mappingConstraints(schema as JsonSchema)
//        ^^^^^^^^^^^^^^^^^^ reference local mappingConstraints_292
//                           ^^^^^^ reference local schema_389
//                                     ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
        + literalValueConstraints(schema as JsonSchema)
//        ^^^^^^^^^^^^^^^^^^^^^^^ reference local literalValueConstraints_348
//                                ^^^^^^ reference local schema_389
//                                          ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
  
  /// Constraints to be added to a base type.
  ///
  /// This will use "nicer" constraints if available.
  /// For exmaple, `isBetween`, `isPositive`, `isEven`, etc.
  ///
  /// **NOTE**: If `schema.type` is a [Listing], the schema might contain constraints that are only relevant to one of the subtypes.
  /// For example, a schema might have `"type": ["string", "array"]` and have `uniqueItems` set.
  /// In this situation, `uniqueItems` should apply to only the "array" subtype.
  /// We accomplish this by only applying constraints when the type is detected to be exactly the desired subtype.
  /// When generating base types, we split the types into a union type, and synthesize a subschema of that type.
  local function addConstraints(schema: JsonSchema): Mixin<TypeNode> = (_typeNode) ->
//               ^^^^^^^^^^^^^^ definition local addConstraints_398
//               documentation
//               > Constraints to be added to a base type.
//               > 
//               > This will use "nicer" constraints if available.
//               > For exmaple, `isBetween`, `isPositive`, `isEven`, etc.
//               > 
//               > **NOTE**: If `schema.type` is a [`Listing`](pkl-lsp://stdlib/base.pkl#L1860,C7), the schema might contain constraints that are only relevant to one of the subtypes.
//               > For example, a schema might have `"type": `"string", "array"`` and have `uniqueItems` set.
//               > In this situation, `uniqueItems` should apply to only the "array" subtype.
//               > We accomplish this by only applying constraints when the type is detected to be exactly the desired subtype.
//               > When generating base types, we split the types into a union type, and synthesize a subschema of that type.
//                              ^^^^^^ definition local schema_408
//                                      ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mixin#
//                                                         ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/
//                                                                      ^^^^^^^^^ definition local _typeNode_408
    let (baseConstraints = constraintExpressions(schema))
//       ^^^^^^^^^^^^^^^ definition local baseConstraints_409
//                         ^^^^^^^^^^^^^^^^^^^^^ reference local constraintExpressions_389
//                                               ^^^^^^ reference local schema_408
    let (notConstraints =
//       ^^^^^^^^^^^^^^ definition local notConstraints_410
      if (schema.not == null) List()
//        ^^^^^^ reference local schema_408
//               ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/not.
//                            ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
      else
        let (_not = (schema.not!!) { type = schema.type })
//           ^^^^ definition local _not_413
//                   ^^^^^^ reference local schema_408
//                          ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/not.
//                                   ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/type.
//                                          ^^^^^^ reference local schema_408
//                                                 ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/type.
          constraintExpressions(_not).map((_expression) ->
//        ^^^^^^^^^^^^^^^^^^^^^ reference local constraintExpressions_389
//                              ^^^^ reference local _not_413
//                                    ^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#map().
//                                         ^^^^^^^^^^^ definition local _expression_414
            // `isOdd` instead of `!isEven` etc
            if (_expression is ExpressionNode.MemberAccessExpressionNode && memberAccessAntonyms.containsKey(_expression.identifier.value))
//              ^^^^^^^^^^^ reference local _expression_414
//                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/MemberAccessExpressionNode#
//                                                                          ^^^^^^^^^^^^^^^^^^^^ reference local memberAccessAntonyms_382
//                                                                                               ^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#containsKey().
//                                                                                                           ^^^^^^^^^^^ reference local _expression_414
//                                                                                                                       ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/MemberAccessExpressionNode#identifier.
//                                                                                                                                  ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `IdentifierNode.pkl`/value.
              (_expression) {
//             ^^^^^^^^^^^ reference local _expression_414
                identifier {
//              ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/identifier.
                  value = memberAccessAntonyms[_expression.identifier.value]
//                ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
//                        ^^^^^^^^^^^^^^^^^^^^ reference local memberAccessAntonyms_382
//                                             ^^^^^^^^^^^ reference local _expression_414
//                                                         ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/MemberAccessExpressionNode#identifier.
//                                                                    ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `IdentifierNode.pkl`/value.
                }
              }
            // Use antonyms if available. For example, we can use the expression `this > 5` instead of `!(this <= 4)`
            else if (_expression is ExpressionNode.BinaryOperatorExpressionNode && antonyms.containsKey(_expression.operator))
//                   ^^^^^^^^^^^ reference local _expression_414
//                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/BinaryOperatorExpressionNode#
//                                                                                 ^^^^^^^^ reference local antonyms_369
//                                                                                          ^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#containsKey().
//                                                                                                      ^^^^^^^^^^^ reference local _expression_414
//                                                                                                                  ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/BinaryOperatorExpressionNode#operator.
              (_expression) {
//             ^^^^^^^^^^^ reference local _expression_414
                operator = antonyms[_expression.operator]
//              ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/operator.
//                         ^^^^^^^^ reference local antonyms_369
//                                  ^^^^^^^^^^^ reference local _expression_414
//                                              ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/BinaryOperatorExpressionNode#operator.
              }
            else
              new ExpressionNode.PrefixOperatorExpressionNode {
//                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/PrefixOperatorExpressionNode#
                operator = operators.NOT
//              ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/operator.
//                         ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                                   ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/NOT.
                expression = _expression
//              ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/expression.
//                           ^^^^^^^^^^^ reference local _expression_414
              })
          )
    let (allOfConstraints =
//       ^^^^^^^^^^^^^^^^ definition local allOfConstraints_433
      if (schema.allOf == null) List()
//        ^^^^^^ reference local schema_408
//               ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/allOf.
//                              ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
      else
        let (merged = utils.mergeSchemas(schema, schema.allOf!!.toList()))
//           ^^^^^^ definition local merged_436
//                    ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                          ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/mergeSchemas().
//                                       ^^^^^^ reference local schema_408
//                                               ^^^^^^ reference local schema_408
//                                                      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/allOf.
//                                                              ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toList().
          constraintExpressions(merged)
//        ^^^^^^^^^^^^^^^^^^^^^ reference local constraintExpressions_389
//                              ^^^^^^ reference local merged_436
    )
    let (allConstraints = baseConstraints + notConstraints + allOfConstraints)
//       ^^^^^^^^^^^^^^ definition local allConstraints_439
//                        ^^^^^^^^^^^^^^^ reference local baseConstraints_409
//                                          ^^^^^^^^^^^^^^ reference local notConstraints_410
//                                                           ^^^^^^^^^^^^^^^^ reference local allOfConstraints_433
      if (allConstraints.isEmpty)
//        ^^^^^^^^^^^^^^ reference local allConstraints_439
//                       ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#isEmpty.
        _typeNode
//      ^^^^^^^^^ reference local _typeNode_408
      else
        new TypeNode.ConstrainedTypeNode { typeNode = _typeNode; constraints = allConstraints.toListing() }
//                   ^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/ConstrainedTypeNode#
//                                         ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/typeNode.
//                                                    ^^^^^^^^^ reference local _typeNode_408
//                                                               ^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/constraints.
//                                                                             ^^^^^^^^^^^^^^ reference local allConstraints_439
//                                                                                            ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#toListing().
  
  /// Generates the declared type of a schema, without constraints.
  ///
  /// The base type might already represent some of the JSON Schema's constraints. For instance,
  /// `UInt32` already signifies a minimum and a maximum.
  ///
  /// If the base type represents this information, it is removed from the returned [JsonSchema] so
  /// we do not end up with redundant constraints like `UInt32(isBetween(0, 4294967295))`.
  local function generateNumberType(schema: JsonSchema): Pair<JsonSchema, TypeNode> =
//               ^^^^^^^^^^^^^^^^^^ definition local generateNumberType_445
//               documentation
//               > Generates the declared type of a schema, without constraints.
//               > 
//               > The base type might already represent some of the JSON Schema's constraints. For instance,
//               > `UInt32` already signifies a minimum and a maximum.
//               > 
//               > If the base type represents this information, it is removed from the returned [`JsonSchema`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L22,C1) so
//               > we do not end up with redundant constraints like `UInt32(isBetween(0, 4294967295))`.
//                                  ^^^^^^ definition local schema_452
//                                          ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                       ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#
//                                                            ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                                        ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/
    let (isInt = schema.type == "integer" || (schema.multipleOf != null && schema.multipleOf == schema.multipleOf?.floor))
//       ^^^^^ definition local isInt_453
//               ^^^^^^ reference local schema_452
//                      ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/type.
//                                            ^^^^^^ reference local schema_452
//                                                   ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/multipleOf.
//                                                                         ^^^^^^ reference local schema_452
//                                                                                ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/multipleOf.
//                                                                                              ^^^^^^ reference local schema_452
//                                                                                                     ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/multipleOf.
//                                                                                                                 ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#floor.
      if (isInt)
//        ^^^^^ reference local isInt_453
        let (minimum = if (schema.exclusiveMinimum != null) schema.exclusiveMinimum!! + 1 else schema.minimum)
//           ^^^^^^^ definition local minimum_455
//                         ^^^^^^ reference local schema_452
//                                ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/exclusiveMinimum.
//                                                          ^^^^^^ reference local schema_452
//                                                                 ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/exclusiveMinimum.
//                                                                                             ^^^^^^ reference local schema_452
//                                                                                                    ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/minimum.
        let (maximum = if (schema.exclusiveMaximum != null) schema.exclusiveMaximum!! - 1 else schema.maximum)
//           ^^^^^^^ definition local maximum_456
//                         ^^^^^^ reference local schema_452
//                                ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/exclusiveMaximum.
//                                                          ^^^^^^ reference local schema_452
//                                                                 ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/exclusiveMaximum.
//                                                                                             ^^^^^^ reference local schema_452
//                                                                                                    ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/maximum.
        let (refinedInt =
//           ^^^^^^^^^^ definition local refinedInt_457
          if (minimum == 0 && maximum == math.maxUInt32)
//            ^^^^^^^ reference local minimum_455
//                            ^^^^^^^ reference local maximum_456
//                                       ^^^^ reference pkl . pkl 0.29.0 `pkl.math`/
//                                            ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.math`/maxUInt32.
            utils.declaredType("UInt32")
//          ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/declaredType().
          else if (minimum == 0 && maximum == math.maxUInt16)
//                 ^^^^^^^ reference local minimum_455
//                                 ^^^^^^^ reference local maximum_456
//                                            ^^^^ reference pkl . pkl 0.29.0 `pkl.math`/
//                                                 ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.math`/maxUInt16.
            utils.declaredType("UInt16")
//          ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/declaredType().
          else if (minimum == 0 && maximum == math.maxUInt8)
//                 ^^^^^^^ reference local minimum_455
//                                 ^^^^^^^ reference local maximum_456
//                                            ^^^^ reference pkl . pkl 0.29.0 `pkl.math`/
//                                                 ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.math`/maxUInt8.
            utils.declaredType("UInt8")
//          ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/declaredType().
          else if (minimum == math.minInt32 && maximum == math.maxInt32)
//                 ^^^^^^^ reference local minimum_455
//                            ^^^^ reference pkl . pkl 0.29.0 `pkl.math`/
//                                 ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.math`/minInt32.
//                                             ^^^^^^^ reference local maximum_456
//                                                        ^^^^ reference pkl . pkl 0.29.0 `pkl.math`/
//                                                             ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.math`/maxInt32.
            utils.declaredType("Int32")
//          ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/declaredType().
          else if (minimum == math.minInt16 && maximum == math.maxInt16)
//                 ^^^^^^^ reference local minimum_455
//                            ^^^^ reference pkl . pkl 0.29.0 `pkl.math`/
//                                 ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.math`/minInt16.
//                                             ^^^^^^^ reference local maximum_456
//                                                        ^^^^ reference pkl . pkl 0.29.0 `pkl.math`/
//                                                             ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.math`/maxInt16.
            utils.declaredType("Int16")
//          ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/declaredType().
          else if (minimum == math.minInt8 && maximum == math.maxInt8)
//                 ^^^^^^^ reference local minimum_455
//                            ^^^^ reference pkl . pkl 0.29.0 `pkl.math`/
//                                 ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.math`/minInt8.
//                                            ^^^^^^^ reference local maximum_456
//                                                       ^^^^ reference pkl . pkl 0.29.0 `pkl.math`/
//                                                            ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.math`/maxInt8.
            utils.declaredType("Int8")
//          ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/declaredType().
          else null
        )
          let (_schema = (schema) {
//             ^^^^^^^ definition local _schema_472
//                        ^^^^^^ reference local schema_452
            when (refinedInt != null) {
//                ^^^^^^^^^^ reference local refinedInt_457
              minimum = null
//            ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/minimum.
              maximum = null
//            ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/maximum.
              exclusiveMinimum = null
//            ^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/exclusiveMinimum.
              exclusiveMaximum = null
//            ^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/exclusiveMaximum.
            }
            // `multipleOf: 1` is redundant if the type is already [Int].
            when (schema.multipleOf == 1) {
//                ^^^^^^ reference local schema_452
//                       ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/multipleOf.
              multipleOf = null
//            ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/multipleOf.
            }
          })
            Pair(_schema, refinedInt ?? utils.declaredType("Int"))
//          ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair().
//               ^^^^^^^ reference local _schema_472
//                        ^^^^^^^^^^ reference local refinedInt_457
//                                      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                                            ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/declaredType().
      else
        Pair(schema, utils.declaredType("Number"))
//      ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair().
//           ^^^^^^ reference local schema_452
//                   ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                         ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/declaredType().
  
  local function generateStringType(schema: JsonSchema): Pair<JsonSchema, TypeNode> =
//               ^^^^^^^^^^^^^^^^^^ definition local generateStringType_488
//                                  ^^^^^^ definition local schema_488
//                                          ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                       ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#
//                                                            ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                                        ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/
    if (schema.`const` is String)
//      ^^^^^^ reference local schema_488
//             ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/const.
//                        ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
      Pair((schema) { `const` = null }, new TypeNode.StringLiteralTypeNode { value = schema.`const` as String })
//    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair().
//          ^^^^^^ reference local schema_488
//                    ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/const.
//                                                   ^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/StringLiteralTypeNode#
//                                                                           ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
//                                                                                   ^^^^^^ reference local schema_488
//                                                                                          ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/const.
//                                                                                                     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
    else if (schema.enum != null && schema.enum is String)
//           ^^^^^^ reference local schema_488
//                  ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/enum.
//                                  ^^^^^^ reference local schema_488
//                                         ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/enum.
//                                                 ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
      Pair((schema) { enum = null }, new TypeNode.StringLiteralTypeNode { value = schema.enum as String })
//    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair().
//          ^^^^^^ reference local schema_488
//                    ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/enum.
//                                                ^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/StringLiteralTypeNode#
//                                                                        ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
//                                                                                ^^^^^^ reference local schema_488
//                                                                                       ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/enum.
//                                                                                               ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
    else if (schema.enum != null && schema.enum is Listing && schema.enum.length == 1 && schema.enum.toList().first is String)
//           ^^^^^^ reference local schema_488
//                  ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/enum.
//                                  ^^^^^^ reference local schema_488
//                                         ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/enum.
//                                                 ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                                                            ^^^^^^ reference local schema_488
//                                                                   ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/enum.
//                                                                        ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#length.
//                                                                                       ^^^^^^ reference local schema_488
//                                                                                              ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/enum.
//                                                                                                   ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toList().
//                                                                                                            ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#first.
//                                                                                                                     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
      Pair((schema) { enum = null }, new TypeNode.StringLiteralTypeNode { value = (schema.enum as Listing).toList().first })
//    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair().
//          ^^^^^^ reference local schema_488
//                    ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/enum.
//                                                ^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/StringLiteralTypeNode#
//                                                                        ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
//                                                                                 ^^^^^^ reference local schema_488
//                                                                                        ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/enum.
//                                                                                                ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                                                                                                         ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toList().
//                                                                                                                  ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#first.
    else if (schema.enum != null && schema.enum is Listing && schema.enum.toList().every((val) -> val is String))
//           ^^^^^^ reference local schema_488
//                  ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/enum.
//                                  ^^^^^^ reference local schema_488
//                                         ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/enum.
//                                                 ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                                                            ^^^^^^ reference local schema_488
//                                                                   ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/enum.
//                                                                        ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toList().
//                                                                                 ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#every().
//                                                                                        ^^^ definition local val_495
//                                                                                                ^^^ reference local val_495
//                                                                                                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
      // Edge case: If `enum` is set to all strings, this should be a union type.
      Pair(
//    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair().
        (schema) { enum = null },
//       ^^^^^^ reference local schema_488
//                 ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/enum.
        new TypeNode.UnionTypeNode {
//                   ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/UnionTypeNode#
          members {
//        ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/members.
            for (stringValue in schema.enum as Listing) {
//               ^^^^^^^^^^^ definition local stringValue_501
//                              ^^^^^^ reference local schema_488
//                                     ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/enum.
//                                             ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
              new TypeNode.StringLiteralTypeNode { value = stringValue }
//                         ^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/StringLiteralTypeNode#
//                                                 ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
//                                                         ^^^^^^^^^^^ reference local stringValue_501
            }
          }
        }
      )
    else if (schema.format == "uri")
//           ^^^^^^ reference local schema_488
//                  ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/format.
      Pair((schema) { format = null }, utils.declaredType("Uri"))
//    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair().
//          ^^^^^^ reference local schema_488
//                    ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/format.
//                                     ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                                           ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/declaredType().
    else
      Pair(schema, utils.declaredType("String"))
//    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair().
//         ^^^^^^ reference local schema_488
//                 ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                       ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/declaredType().
  
  local function generateObjectType(schema: JsonSchema, typeNames: Type.TypeNames): TypeNode =
//               ^^^^^^^^^^^^^^^^^^ definition local generateObjectType_512
//                                  ^^^^^^ definition local schema_512
//                                          ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                      ^^^^^^^^^ definition local typeNames_512
//                                                                      ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/Type.pkl`/TypeNames#
//                                                                                  ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/
    // If `patternProperties` has exactly one entry, we can convert this to a `Mapping` where
    // the key is in the form of `String(matches(...))`.
    // Otherwise if it has more keys, we can't really express a good constraint for this, because `Mapping`s
    // have homogenous types for each key-value pair, and classes cannot have entries.
    // In the latter case, simply fall back to `Dynamic`.
    if (schema.patternProperties != null && schema.patternProperties.toMap().length == 1)
//      ^^^^^^ reference local schema_512
//             ^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/patternProperties.
//                                          ^^^^^^ reference local schema_512
//                                                 ^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/patternProperties.
//                                                                   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#toMap().
//                                                                           ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#length.
      let (pair = schema.patternProperties.toMap().entries.first)
//         ^^^^ definition local pair_519
//                ^^^^^^ reference local schema_512
//                       ^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/patternProperties.
//                                         ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#toMap().
//                                                 ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#entries.
//                                                         ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#first.
        (utils.declaredType("Mapping")) {
//       ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//             ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/declaredType().
          typeArguments {
//        ^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/typeArguments.
            new TypeNode.ConstrainedTypeNode {
//                       ^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/ConstrainedTypeNode#
              typeNode = utils.declaredType("String")
//            ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/typeNode.
//                       ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                             ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/declaredType().
              constraints {
//            ^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/constraints.
                new ExpressionNode.MemberAccessExpressionNode {
//                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/MemberAccessExpressionNode#
                  identifier {
//                ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/identifier.
                    value = "matches"
//                  ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
                  }
                  arguments {
//                ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/arguments.
                    new ExpressionNode.MemberAccessExpressionNode {
//                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/MemberAccessExpressionNode#
                      identifier {
//                    ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/identifier.
                        value = "Regex"
//                      ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
                      }
                      arguments {
//                    ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/arguments.
                        new ExpressionNode.LiteralValueExpressionNode {
//                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/LiteralValueExpressionNode#
                          value = pair.first
//                        ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/value.
//                                ^^^^ reference local pair_519
//                                     ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#first.
                        }
                      }
                    }
                  }
                }
              }
            }
            generateTypeNode(pair.second, typeNames)
//          ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/generateTypeNode().
//                           ^^^^ reference local pair_519
//                                ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#second.
//                                        ^^^^^^^^^ reference local typeNames_512
          }
        }
    else if (schema.additionalProperties != null)
//           ^^^^^^ reference local schema_512
//                  ^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/additionalProperties.
      (utils.declaredType("Mapping")) {
//     ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//           ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/declaredType().
        typeArguments {
//      ^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/typeArguments.
          utils.declaredType("String")
//        ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//              ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/declaredType().
          if (schema.additionalProperties is Boolean)
//            ^^^^^^ reference local schema_512
//                   ^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/additionalProperties.
//                                           ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
            utils.declaredType("Any")
//          ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/declaredType().
          else
            generateTypeNode(schema.additionalProperties as JsonSchema, typeNames)
//          ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/generateTypeNode().
//                           ^^^^^^ reference local schema_512
//                                  ^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/additionalProperties.
//                                                          ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                                      ^^^^^^^^^ reference local typeNames_512
        }
      }
    else
      utils.declaredType("Dynamic")
//    ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//          ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/declaredType().
  
  local function generateUnionType(schema: JsonSchema, typeNames: Type.TypeNames): Pair<JsonSchema, TypeNode> =
//               ^^^^^^^^^^^^^^^^^ definition local generateUnionType_560
//                                 ^^^^^^ definition local schema_560
//                                         ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                     ^^^^^^^^^ definition local typeNames_560
//                                                                     ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/Type.pkl`/TypeNames#
//                                                                                 ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#
//                                                                                      ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                                                                  ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/
    // If there are multiple types, the base schema has constraints that apply to each of the subtypes.
    // We need to generate each one as its own type, with the constraints available on the schema.
    if (schema.type is Listing)
//      ^^^^^^ reference local schema_560
//             ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/type.
//                     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
      Pair(
//    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair().
        // Force no further constraints to be added by passing on an empty json schema.
        new JsonSchema {},
//          ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
        new TypeNode.UnionTypeNode {
//                   ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/UnionTypeNode#
          members = new Listing<TypeNode> {
//        ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/members.
//                      ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                              ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/
            for (_type in (schema.type as Listing)) {
//               ^^^^^ definition local _type_569
//                         ^^^^^^ reference local schema_560
//                                ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/type.
//                                        ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
              generateTypeNode((schema) { type = _type }, typeNames)
//            ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/generateTypeNode().
//                              ^^^^^^ reference local schema_560
//                                        ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/type.
//                                               ^^^^^ reference local _type_569
//                                                        ^^^^^^^^^ reference local typeNames_560
            }
          }.distinct
//          ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#distinct.
        }
      )
    else
      Pair(
//    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair().
        (schema) {
//       ^^^^^^ reference local schema_560
          oneOf = null
//        ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/oneOf.
          anyOf = null
//        ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/anyOf.
        },
        new TypeNode.UnionTypeNode {
//                   ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/UnionTypeNode#
          members = new Listing<TypeNode> {
//        ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/members.
//                      ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                              ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/
            when (schema.oneOf != null) {
//                ^^^^^^ reference local schema_560
//                       ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/oneOf.
              for (s in schema.oneOf!!) {
//                 ^ definition local s_584
//                      ^^^^^^ reference local schema_560
//                             ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/oneOf.
                generateTypeNode(s, typeNames)
//              ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/generateTypeNode().
//                               ^ reference local s_584
//                                  ^^^^^^^^^ reference local typeNames_560
              }
            }
            // Not perfect; `anyOf` means that it can match one or more subschema. A union type is not the correct
            // Pkl type.
            when (schema.anyOf != null) {
//                ^^^^^^ reference local schema_560
//                       ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/anyOf.
              for (s in schema.anyOf!!) {
//                 ^ definition local s_591
//                      ^^^^^^ reference local schema_560
//                             ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/anyOf.
                generateTypeNode(s, typeNames)
//              ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/generateTypeNode().
//                               ^ reference local s_591
//                                  ^^^^^^^^^ reference local typeNames_560
              }
            }
          }.distinct
//          ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#distinct.
        }
      )
  
  local function generateListingType(schema: JsonSchema, typeNames: Type.TypeNames): TypeNode =
//               ^^^^^^^^^^^^^^^^^^^ definition local generateListingType_599
//                                   ^^^^^^ definition local schema_599
//                                           ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                       ^^^^^^^^^ definition local typeNames_599
//                                                                       ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/Type.pkl`/TypeNames#
//                                                                                   ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/
    (utils.declaredType("Listing")) {
//   ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//         ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/declaredType().
      when (schema.items is JsonSchema) {
//          ^^^^^^ reference local schema_599
//                 ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/items.
//                          ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
        typeArguments {
//      ^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/typeArguments.
          generateTypeNode(schema.items as JsonSchema, typeNames)
//        ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/generateTypeNode().
//                         ^^^^^^ reference local schema_599
//                                ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/items.
//                                         ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                     ^^^^^^^^^ reference local typeNames_599
        }
      }
    }
  
  /// Tells if the schema's `enum` or `const` values all satisfy the [predicate].
  ///
  /// Used for determining the base type.
  local function constOrEnumsMatch(schema: JsonSchema, predicate: (JsonSchema.JsonSchemaValue?) -> Boolean): Boolean =
//               ^^^^^^^^^^^^^^^^^ definition local constOrEnumsMatch_608
//               documentation
//               > Tells if the schema's `enum` or `const` values all satisfy the [`predicate`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema.contrib/internal/TypesGenerator.pkl#L611,C54).
//               > 
//               > Used for determining the base type.
//                                 ^^^^^^ definition local schema_611
//                                         ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                     ^^^^^^^^^ definition local predicate_611
//                                                                            ^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/JsonSchemaValue#
//                                                                                                 ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                                                                                                           ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
    predicate.apply(schema.`const`)
//  ^^^^^^^^^ reference local predicate_611
//            ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Function1#apply().
//                  ^^^^^^ reference local schema_611
//                         ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/const.
    || (schema.enum?.toList()?.every(predicate) ?? predicate.apply(schema.enum))
//      ^^^^^^ reference local schema_611
//             ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/enum.
//                   ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toList().
//                             ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#every().
//                                   ^^^^^^^^^ reference local predicate_611
//                                                 ^^^^^^^^^ reference local predicate_611
//                                                           ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Function1#apply().
//                                                                 ^^^^^^ reference local schema_611
//                                                                        ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/enum.
  
  /// Returns the name of the schema's type if there is only one type.
  ///
  /// For example, for these two schemas, `"string"` gets returned.
  /// ```
  /// type = "string"
  /// type { "string" }
  /// ```
  ///
  /// If [JsonSchema.type] is a listing with more than one type, [null] gets returned.
  local function unwrappedSingularType(schema: JsonSchema): JsonSchema.JsonSchemaTypeName? =
//               ^^^^^^^^^^^^^^^^^^^^^ definition local unwrappedSingularType_615
//               documentation
//               > Returns the name of the schema's type if there is only one type.
//               > 
//               > For example, for these two schemas, `"string"` gets returned.
//               > ```
//               > type = "string"
//               > type { "string" }
//               > ```
//               > 
//               > If [`JsonSchema.type`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L222,C1) is a listing with more than one type, `null` gets returned.
//                                     ^^^^^^ definition local schema_624
//                                             ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                                     ^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/JsonSchemaTypeName#
    if (schema.type is Listing)
//      ^^^^^^ reference local schema_624
//             ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/type.
//                     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
      if (schema.type.length == 1) schema.type.toList().first
//        ^^^^^^ reference local schema_624
//               ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/type.
//                    ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#length.
//                                 ^^^^^^ reference local schema_624
//                                        ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/type.
//                                             ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toList().
//                                                      ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#first.
      else null
    else
      schema.type as JsonSchema.JsonSchemaTypeName?
//    ^^^^^^ reference local schema_624
//           ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/type.
//                              ^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/JsonSchemaTypeName#
  
  /// Tells if the [schema] should be generated as [Number] or [Integer].
  local function isNumberSchema(schema: JsonSchema) =
//               ^^^^^^^^^^^^^^ definition local isNumberSchema_631
//               documentation
//               > Tells if the [`schema`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema.contrib/internal/TypesGenerator.pkl#L632,C31) should be generated as [`Number`](pkl-lsp://stdlib/base.pkl#L585,C25) or `Integer`.
//                              ^^^^^^ definition local schema_632
//                                      ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
    let (type = unwrappedSingularType(schema))
//       ^^^^ definition local type_633
//              ^^^^^^^^^^^^^^^^^^^^^ reference local unwrappedSingularType_615
//                                    ^^^^^^ reference local schema_632
      type == "number" || type == "integer" || constOrEnumsMatch(schema, (elem) -> elem is Number)
//    ^^^^ reference local type_633
//                        ^^^^ reference local type_633
//                                             ^^^^^^^^^^^^^^^^^ reference local constOrEnumsMatch_608
//                                                               ^^^^^^ reference local schema_632
//                                                                        ^^^^ definition local elem_634
//                                                                                 ^^^^ reference local elem_634
//                                                                                         ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
  
  /// Tells if the [schema] should be generated as a [String].
  local function isStringSchema(schema: JsonSchema) =
//               ^^^^^^^^^^^^^^ definition local isStringSchema_636
//               documentation
//               > Tells if the [`schema`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema.contrib/internal/TypesGenerator.pkl#L637,C31) should be generated as a [`String`](pkl-lsp://stdlib/base.pkl#L1094,C16).
//                              ^^^^^^ definition local schema_637
//                                      ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
    let (type = unwrappedSingularType(schema))
//       ^^^^ definition local type_638
//              ^^^^^^^^^^^^^^^^^^^^^ reference local unwrappedSingularType_615
//                                    ^^^^^^ reference local schema_637
      type == "string" || constOrEnumsMatch(schema, (elem) -> elem is String)
//    ^^^^ reference local type_638
//                        ^^^^^^^^^^^^^^^^^ reference local constOrEnumsMatch_608
//                                          ^^^^^^ reference local schema_637
//                                                   ^^^^ definition local elem_639
//                                                            ^^^^ reference local elem_639
//                                                                    ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  
  /// Tells if the [schema] should be generated as a [Boolean].
  local function isBooleanSchema(schema: JsonSchema) =
//               ^^^^^^^^^^^^^^^ definition local isBooleanSchema_641
//               documentation
//               > Tells if the [`schema`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema.contrib/internal/TypesGenerator.pkl#L642,C32) should be generated as a [`Boolean`](pkl-lsp://stdlib/base.pkl#L1058,C16).
//                               ^^^^^^ definition local schema_642
//                                       ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
    let (type = unwrappedSingularType(schema))
//       ^^^^ definition local type_643
//              ^^^^^^^^^^^^^^^^^^^^^ reference local unwrappedSingularType_615
//                                    ^^^^^^ reference local schema_642
      type == "boolean" || constOrEnumsMatch(schema, (elem) -> elem is Boolean)
//    ^^^^ reference local type_643
//                         ^^^^^^^^^^^^^^^^^ reference local constOrEnumsMatch_608
//                                           ^^^^^^ reference local schema_642
//                                                    ^^^^ definition local elem_644
//                                                             ^^^^ reference local elem_644
//                                                                     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
  
  /// Tells if the [schema] should be generated as a [Listing]
  local function isListingSchema(schema: JsonSchema) =
//               ^^^^^^^^^^^^^^^ definition local isListingSchema_646
//               documentation
//               > Tells if the [`schema`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema.contrib/internal/TypesGenerator.pkl#L647,C32) should be generated as a [`Listing`](pkl-lsp://stdlib/base.pkl#L1860,C7)
//                               ^^^^^^ definition local schema_647
//                                       ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
    let (type = unwrappedSingularType(schema))
//       ^^^^ definition local type_648
//              ^^^^^^^^^^^^^^^^^^^^^ reference local unwrappedSingularType_615
//                                    ^^^^^^ reference local schema_647
      type == "array" || schema.items != null
//    ^^^^ reference local type_648
//                       ^^^^^^ reference local schema_647
//                              ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/items.
  
  /// Tells if the [schema] should be generated as a [Mapping].
  local function isMappingSchema(schema: JsonSchema) =
//               ^^^^^^^^^^^^^^^ definition local isMappingSchema_651
//               documentation
//               > Tells if the [`schema`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema.contrib/internal/TypesGenerator.pkl#L652,C32) should be generated as a [`Mapping`](pkl-lsp://stdlib/base.pkl#L2038,C7).
//                               ^^^^^^ definition local schema_652
//                                       ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
    let (type = unwrappedSingularType(schema))
//       ^^^^ definition local type_653
//              ^^^^^^^^^^^^^^^^^^^^^ reference local unwrappedSingularType_615
//                                    ^^^^^^ reference local schema_652
      type == "object" || schema.properties != null || schema.additionalProperties != null
//    ^^^^ reference local type_653
//                        ^^^^^^ reference local schema_652
//                               ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/properties.
//                                                     ^^^^^^ reference local schema_652
//                                                            ^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/additionalProperties.
  
  /// Generates the basic declared type (Int, Float, etc).
  ///
  /// In some cases, the basic type returns a refined type based off constraints (e.g. UInt8).
  /// If so, the returned [JsonSchema] has those matching constraints (minimum, exclusiveMinimum, etc) removed.
  local function generateBaseType(schema: JsonSchema, typeNames: Type.TypeNames): Pair<JsonSchema, TypeNode> =
//               ^^^^^^^^^^^^^^^^ definition local generateBaseType_656
//               documentation
//               > Generates the basic declared type (Int, Float, etc).
//               > 
//               > In some cases, the basic type returns a refined type based off constraints (e.g. UInt8).
//               > If so, the returned [`JsonSchema`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/org.json_schema/JsonSchema.pkl#L22,C1) has those matching constraints (minimum, exclusiveMinimum, etc) removed.
//                                ^^^^^^ definition local schema_660
//                                        ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                    ^^^^^^^^^ definition local typeNames_660
//                                                                    ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/Type.pkl`/TypeNames#
//                                                                                ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#
//                                                                                     ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                                                                 ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/
    if (schema.oneOf != null || schema.anyOf != null || schema.type is Listing && schema.type.length > 1)
//      ^^^^^^ reference local schema_660
//             ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/oneOf.
//                              ^^^^^^ reference local schema_660
//                                     ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/anyOf.
//                                                      ^^^^^^ reference local schema_660
//                                                             ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/type.
//                                                                     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                                                                                ^^^^^^ reference local schema_660
//                                                                                       ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/type.
//                                                                                            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#length.
      generateUnionType(schema, typeNames)
//    ^^^^^^^^^^^^^^^^^ reference local generateUnionType_560
//                      ^^^^^^ reference local schema_660
//                              ^^^^^^^^^ reference local typeNames_660
    else if (isNumberSchema(schema))
//           ^^^^^^^^^^^^^^ reference local isNumberSchema_631
//                          ^^^^^^ reference local schema_660
      generateNumberType(schema)
//    ^^^^^^^^^^^^^^^^^^ reference local generateNumberType_445
//                       ^^^^^^ reference local schema_660
    else if (isStringSchema(schema))
//           ^^^^^^^^^^^^^^ reference local isStringSchema_636
//                          ^^^^^^ reference local schema_660
      generateStringType(schema)
//    ^^^^^^^^^^^^^^^^^^ reference local generateStringType_488
//                       ^^^^^^ reference local schema_660
    else if (isBooleanSchema(schema))
//           ^^^^^^^^^^^^^^^ reference local isBooleanSchema_641
//                           ^^^^^^ reference local schema_660
      Pair(schema, utils.declaredType("Boolean"))
//    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair().
//         ^^^^^^ reference local schema_660
//                 ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                       ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/declaredType().
    else if (isListingSchema(schema))
//           ^^^^^^^^^^^^^^^ reference local isListingSchema_646
//                           ^^^^^^ reference local schema_660
      Pair(schema, generateListingType(schema, typeNames))
//    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair().
//         ^^^^^^ reference local schema_660
//                 ^^^^^^^^^^^^^^^^^^^ reference local generateListingType_599
//                                     ^^^^^^ reference local schema_660
//                                             ^^^^^^^^^ reference local typeNames_660
    else if (isMappingSchema(schema))
//           ^^^^^^^^^^^^^^^ reference local isMappingSchema_651
//                           ^^^^^^ reference local schema_660
      Pair(schema, generateObjectType(schema, typeNames))
//    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair().
//         ^^^^^^ reference local schema_660
//                 ^^^^^^^^^^^^^^^^^^ reference local generateObjectType_512
//                                    ^^^^^^ reference local schema_660
//                                            ^^^^^^^^^ reference local typeNames_660
    else if (schema.allOf != null)
//           ^^^^^^ reference local schema_660
//                  ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/allOf.
      let (collatedSchema = collateAllOf(schema))
//         ^^^^^^^^^^^^^^ definition local collatedSchema_674
//                          ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/collateAllOf().
//                                       ^^^^^^ reference local schema_660
        generateBaseType(collatedSchema, typeNames)
//      ^^^^^^^^^^^^^^^^ reference local generateBaseType_656
//                       ^^^^^^^^^^^^^^ reference local collatedSchema_674
//                                       ^^^^^^^^^ reference local typeNames_660
    else
      Pair(schema, utils.declaredType("Any"))
//    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair().
//         ^^^^^^ reference local schema_660
//                 ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/
//                       ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/utils.pkl`/declaredType().
  
  local function allOfErr(msg: String) = throw("Unable to combine allOf elements into one schema: \(msg)")
//               ^^^^^^^^ definition local allOfErr_679
//                        ^^^ definition local msg_679
//                             ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                                                                  ^^^ reference local msg_679
  
  function collateAllOf(schema: JsonSchema(allOf != null)): JsonSchema =
//         ^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/collateAllOf().
//                      ^^^^^^ definition local schema_681
//                              ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                         ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/allOf.
//                                                          ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
    schema.allOf.fold(schema, (res, rawElem) ->
//  ^^^^^^ reference local schema_681
//         ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/allOf.
//               ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#fold().
//                    ^^^^^^ reference local schema_681
//                             ^^^ definition local res_682
//                                  ^^^^^^^ definition local rawElem_682
      let (resolvedElem = if (rawElem is JsonSchema && rawElem.$$refUri != null) ref.resolveRef(baseUri, rawElem) else rawElem)
//         ^^^^^^^^^^^^ definition local resolvedElem_683
//                            ^^^^^^^ reference local rawElem_682
//                                       ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                     ^^^^^^^ reference local rawElem_682
//                                                             ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/$$refUri.
//                                                                               ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `ref.pkl`/
//                                                                                   ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `ref.pkl`/resolveRef().
//                                                                                              ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/baseUri.
//                                                                                                       ^^^^^^^ reference local rawElem_682
//                                                                                                                     ^^^^^^^ reference local rawElem_682
        let (elem = if (resolvedElem is JsonSchema && resolvedElem.allOf != null) collateAllOf(resolvedElem) else resolvedElem)
//           ^^^^ definition local elem_684
//                      ^^^^^^^^^^^^ reference local resolvedElem_683
//                                      ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                    ^^^^^^^^^^^^ reference local resolvedElem_683
//                                                                 ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/allOf.
//                                                                                ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/collateAllOf().
//                                                                                             ^^^^^^^^^^^^ reference local resolvedElem_683
//                                                                                                                ^^^^^^^^^^^^ reference local resolvedElem_683
          new JsonSchema {
//            ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
            // metadata
            title = collateInformation(elem.title, res.title)
//          ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/title.
//                  ^^^^^^^^^^^^^^^^^^ reference local collateInformation_800
//                                     ^^^^ reference local elem_684
//                                          ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/title.
//                                                 ^^^ reference local res_682
            description = collateInformation(elem.description, res.description)
//          ^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/description.
//                        ^^^^^^^^^^^^^^^^^^ reference local collateInformation_800
//                                           ^^^^ reference local elem_684
//                                                ^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/description.
//                                                             ^^^ reference local res_682
            default =
//          ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/default.
              if (elem.default != null && res.default != null) let (_ = trace("Unable to combine allOf elements into one schema: dropping conflicting default")) res.default
//                ^^^^ reference local elem_684
//                     ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/default.
//                                        ^^^ reference local res_682
//                                                                                                                                                               ^^^ reference local res_682
              else elem.default ?? res.default
//                 ^^^^ reference local elem_684
//                      ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/default.
//                                 ^^^ reference local res_682
            examples =
//          ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/examples.
              if (elem.examples != null && res.examples != null)
//                ^^^^ reference local elem_684
//                     ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/examples.
//                                         ^^^ reference local res_682
                new {
                  when (elem.examples is Listing) { ...elem.examples as Listing } else { elem.examples }
//                      ^^^^ reference local elem_684
//                           ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/examples.
//                                       ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                                                     ^^^^ reference local elem_684
//                                                          ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/examples.
//                                                                      ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                                                                                       ^^^^ reference local elem_684
//                                                                                            ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/examples.
                  when (res.examples is Listing) { ...res.examples as Listing } else { res.examples }
//                      ^^^ reference local res_682
//                                      ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                                                    ^^^ reference local res_682
//                                                                    ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                                                                                     ^^^ reference local res_682
                }
              else elem.examples ?? res.examples
//                 ^^^^ reference local elem_684
//                      ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/examples.
//                                  ^^^ reference local res_682
            deprecated =
//          ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/deprecated.
              if (elem.deprecated == true && res.deprecated == true) true
//                ^^^^ reference local elem_684
//                     ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/deprecated.
//                                           ^^^ reference local res_682
              else null // if we have a mix of null/false/true, this is undeterminable
            readOnly = collateMetadataBoolean(elem.readOnly, res.readOnly, "readOnly")
//          ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/readOnly.
//                     ^^^^^^^^^^^^^^^^^^^^^^ reference local collateMetadataBoolean_804
//                                            ^^^^ reference local elem_684
//                                                 ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/readOnly.
//                                                           ^^^ reference local res_682
            writeOnly = collateMetadataBoolean(elem.writeOnly, res.writeOnly, "writeOnly")
//          ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/writeOnly.
//                      ^^^^^^^^^^^^^^^^^^^^^^ reference local collateMetadataBoolean_804
//                                             ^^^^ reference local elem_684
//                                                  ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/writeOnly.
//                                                             ^^^ reference local res_682
  
            // core
            type =
//          ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/type.
              if (res.type != null && elem.type != null && res.type != elem.type) allOfErr("conflicting type")
//                ^^^ reference local res_682
//                                    ^^^^ reference local elem_684
//                                         ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/type.
//                                                         ^^^ reference local res_682
//                                                                     ^^^^ reference local elem_684
//                                                                          ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/type.
//                                                                                ^^^^^^^^ reference local allOfErr_679
              else elem.type ?? res.type
//                 ^^^^ reference local elem_684
//                      ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/type.
//                              ^^^ reference local res_682
            `const` =
//          ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/const.
              if (res.`const` != null && elem.`const` != null && res.`const` != elem.`const`) allOfErr("conflicting const")
//                ^^^ reference local res_682
//                                       ^^^^ reference local elem_684
//                                            ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/const.
//                                                               ^^^ reference local res_682
//                                                                              ^^^^ reference local elem_684
//                                                                                   ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/const.
//                                                                                            ^^^^^^^^ reference local allOfErr_679
              else elem.`const` ?? res.`const`
//                 ^^^^ reference local elem_684
//                      ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/const.
//                                 ^^^ reference local res_682
  
            // number
            multipleOf =
//          ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/multipleOf.
              if (elem.multipleOf != null && res.multipleOf != null)
//                ^^^^ reference local elem_684
//                     ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/multipleOf.
//                                           ^^^ reference local res_682
              if (elem.multipleOf is Int && res.multipleOf is Int) math.lcm(elem.multipleOf!! as Int, res.multipleOf!! as Int)
//                ^^^^ reference local elem_684
//                     ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/multipleOf.
//                                   ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
//                                          ^^^ reference local res_682
//                                                            ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
//                                                                 ^^^^ reference pkl . pkl 0.29.0 `pkl.math`/
//                                                                      ^^^ reference pkl . pkl 0.29.0 `pkl.math`/lcm().
//                                                                          ^^^^ reference local elem_684
//                                                                               ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/multipleOf.
//                                                                                               ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
//                                                                                                    ^^^ reference local res_682
//                                                                                                                        ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
              else allOfErr("multiple non-integer multipleOf")
//                 ^^^^^^^^ reference local allOfErr_679
            else elem.multipleOf ?? res.multipleOf
//               ^^^^ reference local elem_684
//                    ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/multipleOf.
//                                  ^^^ reference local res_682
            minimum = collateMin(elem.minimum, res.minimum)
//          ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/minimum.
//                    ^^^^^^^^^^ reference local collateMin_792
//                               ^^^^ reference local elem_684
//                                    ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/minimum.
//                                             ^^^ reference local res_682
            exclusiveMinimum = collateMin(elem.exclusiveMinimum, res.exclusiveMinimum)
//          ^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/exclusiveMinimum.
//                             ^^^^^^^^^^ reference local collateMin_792
//                                        ^^^^ reference local elem_684
//                                             ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/exclusiveMinimum.
//                                                               ^^^ reference local res_682
            maximum = collateMax(elem.maximum, res.maximum)
//          ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/maximum.
//                    ^^^^^^^^^^ reference local collateMax_796
//                               ^^^^ reference local elem_684
//                                    ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/maximum.
//                                             ^^^ reference local res_682
            exclusiveMaximum = collateMax(elem.exclusiveMaximum, res.exclusiveMaximum)
//          ^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/exclusiveMaximum.
//                             ^^^^^^^^^^ reference local collateMax_796
//                                        ^^^^ reference local elem_684
//                                             ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/exclusiveMaximum.
//                                                               ^^^ reference local res_682
  
            // string
            pattern =
//          ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/pattern.
              if (elem.pattern != null && res.pattern != null) "(?:\(elem.pattern))|(?:\(res.pattern))"
//                ^^^^ reference local elem_684
//                     ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/pattern.
//                                        ^^^ reference local res_682
//                                                                   ^^^^ reference local elem_684
//                                                                        ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/pattern.
//                                                                                       ^^^ reference local res_682
              else elem.pattern ?? res.pattern
//                 ^^^^ reference local elem_684
//                      ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/pattern.
//                                 ^^^ reference local res_682
            minLength = collateMin(elem.minLength, res.minLength) as UInt?
//          ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/minLength.
//                      ^^^^^^^^^^ reference local collateMin_792
//                                 ^^^^ reference local elem_684
//                                      ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/minLength.
//                                                 ^^^ reference local res_682
//                                                                   ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/UInt#
            maxLength = collateMax(elem.maxLength, res.maxLength) as UInt?
//          ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/maxLength.
//                      ^^^^^^^^^^ reference local collateMax_796
//                                 ^^^^ reference local elem_684
//                                      ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/maxLength.
//                                                 ^^^ reference local res_682
//                                                                   ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/UInt#
            format =
//          ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/format.
              if (res.format != null && elem.format != null && res.format != elem.format) allOfErr("conflicting format")
//                ^^^ reference local res_682
//                                      ^^^^ reference local elem_684
//                                           ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/format.
//                                                             ^^^ reference local res_682
//                                                                           ^^^^ reference local elem_684
//                                                                                ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/format.
//                                                                                        ^^^^^^^^ reference local allOfErr_679
              else elem.format ?? res.format
//                 ^^^^ reference local elem_684
//                      ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/format.
//                                ^^^ reference local res_682
  
            // object
            properties = collateProperties(elem.properties, res.properties)
//          ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/properties.
//                       ^^^^^^^^^^^^^^^^^ reference local collateProperties_772
//                                         ^^^^ reference local elem_684
//                                              ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/properties.
//                                                          ^^^ reference local res_682
            patternProperties = collateProperties(elem.patternProperties, res.patternProperties)
//          ^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/patternProperties.
//                              ^^^^^^^^^^^^^^^^^ reference local collateProperties_772
//                                                ^^^^ reference local elem_684
//                                                     ^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/patternProperties.
//                                                                        ^^^ reference local res_682
            additionalProperties = collateSchema(elem.additionalProperties, res.additionalProperties, "additionalProperties")
//          ^^^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/additionalProperties.
//                                 ^^^^^^^^^^^^^ reference local collateSchema_785
//                                               ^^^^ reference local elem_684
//                                                    ^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/additionalProperties.
//                                                                          ^^^ reference local res_682
            required =
//          ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/required.
              if (elem.required == null && res.required == null) null
//                ^^^^ reference local elem_684
//                     ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/required.
//                                         ^^^ reference local res_682
              else ((elem.required?.toSet() ?? Set()) + (res.required?.toSet() ?? Set())).toListing()
//                   ^^^^ reference local elem_684
//                        ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/required.
//                                  ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toSet().
//                                             ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Set().
//                                                       ^^^ reference local res_682
//                                                                                ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Set().
//                                                                                        ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Set#toListing().
            propertyNames = collateSchema(elem.propertyNames, res.propertyNames, "propertyNames")
//          ^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/propertyNames.
//                          ^^^^^^^^^^^^^ reference local collateSchema_785
//                                        ^^^^ reference local elem_684
//                                             ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/propertyNames.
//                                                            ^^^ reference local res_682
            minProperties = collateMin(elem.minProperties, res.minProperties) as UInt?
//          ^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/minProperties.
//                          ^^^^^^^^^^ reference local collateMin_792
//                                     ^^^^ reference local elem_684
//                                          ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/minProperties.
//                                                         ^^^ reference local res_682
//                                                                               ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/UInt#
            maxProperties = collateMax(elem.maxProperties, res.maxProperties) as UInt?
//          ^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/maxProperties.
//                          ^^^^^^^^^^ reference local collateMax_796
//                                     ^^^^ reference local elem_684
//                                          ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/maxProperties.
//                                                         ^^^ reference local res_682
//                                                                               ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/UInt#
  
            // array
            items =
//          ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/items.
              if (elem.items == null && res.items == null) null
//                ^^^^ reference local elem_684
//                     ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/items.
//                                      ^^^ reference local res_682
              else if ((res.items == null) != (elem.items == null)) elem.items ?? res.items
//                      ^^^ reference local res_682
//                                             ^^^^ reference local elem_684
//                                                  ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/items.
//                                                                  ^^^^ reference local elem_684
//                                                                       ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/items.
//                                                                                ^^^ reference local res_682
              else if (res.items is JsonSchema && elem.items is JsonSchema) collateAllOf(new JsonSchema { allOf { res.items; elem.items as JsonSchema } })
//                     ^^^ reference local res_682
//                                  ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                ^^^^ reference local elem_684
//                                                     ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/items.
//                                                              ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                                          ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/collateAllOf().
//                                                                                           ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                                                                        ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/allOf.
//                                                                                                                ^^^ reference local res_682
//                                                                                                                           ^^^^ reference local elem_684
//                                                                                                                                ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/items.
//                                                                                                                                         ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
              else allOfErr("conflicting items lhs:'\(elem.items)' rhs:'\(res.items)'")
//                 ^^^^^^^^ reference local allOfErr_679
//                                                    ^^^^ reference local elem_684
//                                                         ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/items.
//                                                                        ^^^ reference local res_682
            additionalItems = collateSchema(elem.additionalItems, res.additionalItems, "additionalItems")
//          ^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/additionalItems.
//                            ^^^^^^^^^^^^^ reference local collateSchema_785
//                                          ^^^^ reference local elem_684
//                                               ^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/additionalItems.
//                                                                ^^^ reference local res_682
            minItems = collateMin(elem.minItems, res.minItems) as UInt?
//          ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/minItems.
//                     ^^^^^^^^^^ reference local collateMin_792
//                                ^^^^ reference local elem_684
//                                     ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/minItems.
//                                               ^^^ reference local res_682
//                                                                ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/UInt#
            maxItems = collateMax(elem.maxItems, res.maxItems) as UInt?
//          ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/maxItems.
//                     ^^^^^^^^^^ reference local collateMax_796
//                                ^^^^ reference local elem_684
//                                     ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/maxItems.
//                                               ^^^ reference local res_682
//                                                                ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/UInt#
            uniqueItems =
//          ^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/uniqueItems.
              if (elem.uniqueItems == true || res.uniqueItems == true) true
//                ^^^^ reference local elem_684
//                     ^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/uniqueItems.
//                                            ^^^ reference local res_682
              else elem.uniqueItems ?? res.uniqueItems
//                 ^^^^ reference local elem_684
//                      ^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/uniqueItems.
//                                     ^^^ reference local res_682
  
            // composition
            oneOf = collateSet(elem.oneOf, res.oneOf)
//          ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/oneOf.
//                  ^^^^^^^^^^ reference local collateSet_765
//                             ^^^^ reference local elem_684
//                                  ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/oneOf.
//                                         ^^^ reference local res_682
            anyOf = collateSet(elem.anyOf, res.anyOf)
//          ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/anyOf.
//                  ^^^^^^^^^^ reference local collateSet_765
//                             ^^^^ reference local elem_684
//                                  ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/anyOf.
//                                         ^^^ reference local res_682
            not = collateSchema(elem.not, res.not, "not")
//          ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/not.
//                ^^^^^^^^^^^^^ reference local collateSchema_785
//                              ^^^^ reference local elem_684
//                                   ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/not.
//                                        ^^^ reference local res_682
          }
    )
  
  local function collateSet(lhs: Listing<JsonSchema.Schema>(!isEmpty)?, rhs: Listing<JsonSchema.Schema>(!isEmpty)?): Listing<JsonSchema.Schema>(!isEmpty)? =
//               ^^^^^^^^^^ definition local collateSet_765
//                          ^^^ definition local lhs_765
//                               ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                                                  ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
//                                                           ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#isEmpty.
//                                                                      ^^^ definition local rhs_765
//                                                                           ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                                                                                              ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
//                                                                                                       ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#isEmpty.
//                                                                                                                   ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                                                                                                                                      ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
//                                                                                                                                               ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#isEmpty.
    if (lhs != null && rhs != null)
//      ^^^ reference local lhs_765
//                     ^^^ reference local rhs_765
      let (intersection = lhs.toSet().intersect(rhs.toSet()))
//         ^^^^^^^^^^^^ definition local intersection_767
//                        ^^^ reference local lhs_765
//                            ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toSet().
//                                    ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Set#intersect().
//                                              ^^^ reference local rhs_765
//                                                  ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toSet().
        if (intersection.isEmpty) allOfErr("conflicting oneOf")
//          ^^^^^^^^^^^^ reference local intersection_767
//                       ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Set#isEmpty.
//                                ^^^^^^^^ reference local allOfErr_679
        else intersection.toListing()
//           ^^^^^^^^^^^^ reference local intersection_767
//                        ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Set#toListing().
    else lhs ?? rhs
//       ^^^ reference local lhs_765
//              ^^^ reference local rhs_765
  
  local function collateProperties(lhs: Mapping<String(isRegex), JsonSchema.Schema>?, rhs: Mapping<String(isRegex), JsonSchema.Schema>?): Mapping<String(isRegex), JsonSchema.Schema>? =
//               ^^^^^^^^^^^^^^^^^ definition local collateProperties_772
//                                 ^^^ definition local lhs_772
//                                      ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                                              ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#isRegex.
//                                                                          ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
//                                                                                    ^^^ definition local rhs_772
//                                                                                         ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                                                                                                 ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                                                                        ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#isRegex.
//                                                                                                                             ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
//                                                                                                                                        ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                                                                                                                                                ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                                                                                                                       ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#isRegex.
//                                                                                                                                                                            ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
    if (lhs != null && rhs != null)
//      ^^^ reference local lhs_772
//                     ^^^ reference local rhs_772
      new {
        for (key in lhs.keys + rhs.keys) {
//           ^^^ definition local key_775
//                  ^^^ reference local lhs_772
//                      ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#keys.
//                             ^^^ reference local rhs_772
//                                 ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#keys.
          when (lhs.containsKey(key) && rhs.containsKey(key)) {
//              ^^^ reference local lhs_772
//                  ^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#containsKey().
//                              ^^^ reference local key_775
//                                      ^^^ reference local rhs_772
//                                          ^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#containsKey().
//                                                      ^^^ reference local key_775
            [key] = collateAllOf(new JsonSchema { allOf { lhs[key]; rhs[key] } })
//           ^^^ reference local key_775
//                  ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/collateAllOf().
//                                   ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/allOf.
//                                                        ^^^ reference local lhs_772
//                                                            ^^^ reference local key_775
//                                                                  ^^^ reference local rhs_772
//                                                                      ^^^ reference local key_775
          } else {
            [key] = lhs.getOrNull(key) ?? rhs[key]
//           ^^^ reference local key_775
//                  ^^^ reference local lhs_772
//                      ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#getOrNull().
//                                ^^^ reference local key_775
//                                        ^^^ reference local rhs_772
//                                            ^^^ reference local key_775
          }
        }
      }
    else lhs ?? rhs
//       ^^^ reference local lhs_772
//              ^^^ reference local rhs_772
  
  local function collateSchema(lhs: JsonSchema.Schema?, rhs: JsonSchema.Schema?, fieldName: String): JsonSchema.Schema? =
//               ^^^^^^^^^^^^^ definition local collateSchema_785
//                             ^^^ definition local lhs_785
//                                             ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
//                                                      ^^^ definition local rhs_785
//                                                                      ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
//                                                                               ^^^^^^^^^ definition local fieldName_785
//                                                                                          ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                                                                              ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/Schema#
    if (lhs != null && rhs != null)
//      ^^^ reference local lhs_785
//                     ^^^ reference local rhs_785
      if (lhs is Boolean && rhs is Boolean) lhs || rhs
//        ^^^ reference local lhs_785
//               ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                          ^^^ reference local rhs_785
//                                 ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                                          ^^^ reference local lhs_785
//                                                 ^^^ reference local rhs_785
      else if (lhs is JsonSchema && rhs is JsonSchema) collateAllOf(new JsonSchema { allOf { lhs; rhs } })
//             ^^^ reference local lhs_785
//                    ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                  ^^^ reference local rhs_785
//                                         ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                     ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/collateAllOf().
//                                                                      ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema 1.1.0 `JsonSchema.pkl`/
//                                                                                   ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.json_schema.contrib 1.1.5 `internal/TypesGenerator.pkl`/allOf.
//                                                                                           ^^^ reference local lhs_785
//                                                                                                ^^^ reference local rhs_785
      else allOfErr("multiple non-JsonSchema \(fieldName)")
//         ^^^^^^^^ reference local allOfErr_679
//                                             ^^^^^^^^^ reference local fieldName_785
    else lhs ?? rhs
//       ^^^ reference local lhs_785
//              ^^^ reference local rhs_785
  
  local function collateMin(lhs: Number?, rhs: Number?): Number? =
//               ^^^^^^^^^^ definition local collateMin_792
//                          ^^^ definition local lhs_792
//                               ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                                        ^^^ definition local rhs_792
//                                             ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                                                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
    if (lhs != null && rhs != null) math.max(lhs, rhs)
//      ^^^ reference local lhs_792
//                     ^^^ reference local rhs_792
//                                  ^^^^ reference pkl . pkl 0.29.0 `pkl.math`/
//                                       ^^^ reference pkl . pkl 0.29.0 `pkl.math`/max().
//                                           ^^^ reference local lhs_792
//                                                ^^^ reference local rhs_792
    else lhs ?? rhs
//       ^^^ reference local lhs_792
//              ^^^ reference local rhs_792
  
  local function collateMax(lhs: Number?, rhs: Number?): Number? =
//               ^^^^^^^^^^ definition local collateMax_796
//                          ^^^ definition local lhs_796
//                               ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                                        ^^^ definition local rhs_796
//                                             ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                                                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
    if (lhs != null && rhs != null) math.min(lhs, rhs)
//      ^^^ reference local lhs_796
//                     ^^^ reference local rhs_796
//                                  ^^^^ reference pkl . pkl 0.29.0 `pkl.math`/
//                                       ^^^ reference pkl . pkl 0.29.0 `pkl.math`/min().
//                                           ^^^ reference local lhs_796
//                                                ^^^ reference local rhs_796
    else lhs ?? rhs
//       ^^^ reference local lhs_796
//              ^^^ reference local rhs_796
  
  local function collateInformation(lhs: String?, rhs: String?): String? =
//               ^^^^^^^^^^^^^^^^^^ definition local collateInformation_800
//                                  ^^^ definition local lhs_800
//                                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                ^^^ definition local rhs_800
//                                                     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                               ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
    if (lhs != null && rhs != null) "\(lhs)\n----\n\(rhs)"
//      ^^^ reference local lhs_800
//                     ^^^ reference local rhs_800
//                                     ^^^ reference local lhs_800
//                                                   ^^^ reference local rhs_800
    else lhs ?? rhs
//       ^^^ reference local lhs_800
//              ^^^ reference local rhs_800
  
  local function collateMetadataBoolean(lhs: Boolean?, rhs: Boolean?, fieldName: String): Boolean? =
//               ^^^^^^^^^^^^^^^^^^^^^^ definition local collateMetadataBoolean_804
//                                      ^^^ definition local lhs_804
//                                           ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                                                     ^^^ definition local rhs_804
//                                                          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                                                                    ^^^^^^^^^ definition local fieldName_804
//                                                                               ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                                                        ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
    if (lhs != rhs) allOfErr("conflicting \(fieldName)")
//      ^^^ reference local lhs_804
//             ^^^ reference local rhs_804
//                  ^^^^^^^^ reference local allOfErr_679
//                                          ^^^^^^^^^ reference local fieldName_804
    else lhs
//       ^^^ reference local lhs_804
  
