  //===----------------------------------------------------------------------===//
  // Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     https://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  //===----------------------------------------------------------------------===//
  module pkl.experimental.syntax.tests.ModuleNode
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/
  
  amends "pkl:test"
  
  import "../ModuleNode.pkl"
  import "../TypeNode.pkl"
  import "../ExpressionNode.pkl"
  import "../ObjectBodyNode.pkl"
  import "../operators.pkl"
  
  facts {
//^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/facts.
    ["new line at the end"] {
      new ModuleNode {
//        ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ModuleNode.pkl`/
        declaration {
//      ^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/declaration.
          moduleHeader {
//        ^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/moduleHeader.
            name {
//          ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/name.
              parts {
//            ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/parts.
                new { value = "modulename" }
//                    ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
              }
            }
          }
        }
      }.output.text == """
//      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Module#output.
//             ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/FileOutput#text.
        module modulename
  
        """
    }
  }
  
  examples {
//^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/examples.
    ["full declaration"] {
      new ModuleNode {
//        ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ModuleNode.pkl`/
        declaration {
//      ^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/declaration.
          shebang = "/usr/bin/env pkl eval"
//        ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/shebang.
          annotations {
//        ^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/annotations.
            new {
              identifier { parts { new { value = "test" } } }
//            ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/identifier.
//                         ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/parts.
//                                       ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
              body {
//            ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/body.
                renderInline = true
//              ^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/renderInline.
                members {
//              ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/members.
                  new ObjectBodyNode.PropertyMemberNode {
//                                   ^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ObjectBodyNode.pkl`/PropertyMemberNode#
                    propertyName { value = "annotation" }
//                  ^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/propertyName.
//                                 ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
                    assignment = new ExpressionNode.LiteralValueExpressionNode { value = true }
//                  ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/assignment.
//                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/LiteralValueExpressionNode#
//                                                                               ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
                  }
                }
              }
            }
          }
          docComment {
//        ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/docComment.
            value = """
//          ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
              This is a module doc comment!
              """
          }
          moduleHeader {
//        ^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/moduleHeader.
            modifiers { "open" }
//          ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/modifiers.
            name {
//          ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/name.
              parts {
//            ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/parts.
                new { value = "pkl" }
//                    ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
                new { value = "experimental" }
//                    ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
                new { value = "syntax" }
//                    ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
                new { value = "tests" }
//                    ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
                new { value = "ModuleNode" }
//                    ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
              }
            }
            moduleExtendsOrAmendsClause {
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/moduleExtendsOrAmendsClause.
              type = "amends"
//            ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/type.
              extendedModule = "pkl:test"
//            ^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/extendedModule.
            }
          }
        }
      }.output.text
//      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Module#output.
//             ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/FileOutput#text.
    }
    ["short methods are rendered inline"] {
      new ModuleNode {
//        ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ModuleNode.pkl`/
        methods {
//      ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/methods.
          new {
            docComment { value = "Adds five to its argument." }
//          ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/docComment.
//                       ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
            modifiers { "const"; "local" }
//          ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/modifiers.
            name { value = "addFive" }
//          ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/name.
//                 ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
            parameters {
//          ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/parameters.
              new {
                name { value = "input" }
//              ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/name.
//                     ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
                typeAnnotation {
//              ^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/typeAnnotation.
                  type = new TypeNode.DeclaredTypeNode { name { parts { new { value = "Int" } } } }
//                ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/type.
//                                    ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/DeclaredTypeNode#
//                                                       ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/name.
//                                                              ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/parts.
//                                                                            ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
                }
              }
            }
            body = new ExpressionNode.BinaryOperatorExpressionNode {
//          ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/body.
//                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/BinaryOperatorExpressionNode#
              lhs = new ExpressionNode.MemberAccessExpressionNode { identifier { value = "input" } }
//            ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/lhs.
//                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/MemberAccessExpressionNode#
//                                                                  ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/identifier.
//                                                                               ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
              operator = operators.PLUS
//            ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/operator.
//                       ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                                 ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/PLUS.
              rhs = new ExpressionNode.LiteralValueExpressionNode { value = 5 }
//            ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/rhs.
//                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/LiteralValueExpressionNode#
//                                                                  ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
            }
          }
        }
      }.output.text
//      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Module#output.
//             ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/FileOutput#text.
    }
    ["methods with long values are rendered indented"] {
      new ModuleNode {
//        ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ModuleNode.pkl`/
        methods {
//      ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/methods.
          new {
            docComment { value = "Adds five to its argument." }
//          ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/docComment.
//                       ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
            modifiers { "const"; "local" }
//          ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/modifiers.
            name { value = "myReallyLongMethodForAddingFiveToAnInteger" }
//          ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/name.
//                 ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
            parameters {
//          ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/parameters.
              new {
                name { value = "inputIntegerValue" }
//              ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/name.
//                     ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
                typeAnnotation {
//              ^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/typeAnnotation.
                  type = new TypeNode.DeclaredTypeNode { name { parts { new { value = "Int" } } } }
//                ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/type.
//                                    ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/DeclaredTypeNode#
//                                                       ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/name.
//                                                              ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/parts.
//                                                                            ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
                }
              }
            }
            body = new ExpressionNode.BinaryOperatorExpressionNode {
//          ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/body.
//                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/BinaryOperatorExpressionNode#
              lhs = new ExpressionNode.MemberAccessExpressionNode { identifier { value = "inputIntegerValue" } }
//            ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/lhs.
//                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/MemberAccessExpressionNode#
//                                                                  ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/identifier.
//                                                                               ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
              operator = operators.PLUS
//            ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/operator.
//                       ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                                 ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/PLUS.
              rhs = new ExpressionNode.LiteralValueExpressionNode { value = 5 }
//            ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/rhs.
//                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/LiteralValueExpressionNode#
//                                                                  ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
            }
          }
        }
      }.output.text
//      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Module#output.
//             ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/FileOutput#text.
    }
    ["methods with long values but short first lines are rendered inline"] {
      new ModuleNode {
//        ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ModuleNode.pkl`/
        methods {
//      ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/methods.
          new {
            docComment { value = "Adds five to its argument and returns a dynamic object containing the result." }
//          ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/docComment.
//                       ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
            modifiers { "const"; "local" }
//          ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/modifiers.
            name { value = "myLongMethodForReturningADynamicObject" }
//          ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/name.
//                 ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
            parameters {
//          ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/parameters.
              new {
                name { value = "inputIntegerValue" }
//              ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/name.
//                     ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
                typeAnnotation {
//              ^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/typeAnnotation.
                  type = new TypeNode.DeclaredTypeNode { name { parts { new { value = "Int" } } } }
//                ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/type.
//                                    ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/DeclaredTypeNode#
//                                                       ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/name.
//                                                              ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/parts.
//                                                                            ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
                }
              }
            }
            body = new ExpressionNode.ObjectExpressionNode {
//          ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/body.
//                                    ^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/ObjectExpressionNode#
              type = new TypeNode.DeclaredTypeNode { name { parts { new { value = "Dynamic" } } } }
//            ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/type.
//                                ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/DeclaredTypeNode#
//                                                   ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/name.
//                                                          ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/parts.
//                                                                        ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
              body {
//            ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/body.
                members {
//              ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/members.
                  new ObjectBodyNode.PropertyMemberNode {
//                                   ^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ObjectBodyNode.pkl`/PropertyMemberNode#
                    propertyName { value = "value" }
//                  ^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/propertyName.
//                                 ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
                    assignment = new ExpressionNode.BinaryOperatorExpressionNode {
//                  ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/assignment.
//                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/BinaryOperatorExpressionNode#
                      lhs = new ExpressionNode.MemberAccessExpressionNode { identifier { value = "inputIntegerValue" } }
//                    ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/lhs.
//                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/MemberAccessExpressionNode#
//                                                                          ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/identifier.
//                                                                                       ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
                      operator = operators.PLUS
//                    ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/operator.
//                               ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/
//                                         ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `operators.pkl`/PLUS.
                      rhs = new ExpressionNode.LiteralValueExpressionNode { value = 5 }
//                    ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/rhs.
//                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ExpressionNode.pkl`/LiteralValueExpressionNode#
//                                                                          ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
                    }
                  }
                }
              }
            }
          }
        }
      }.output.text
//      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Module#output.
//             ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/FileOutput#text.
    }
    ["typealiases"] {
      new ModuleNode {
//        ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `ModuleNode.pkl`/
        typealiases {
//      ^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/typealiases.
          new {
            name { value = "Short" }
//          ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/name.
//                 ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
            type = new TypeNode.UnionTypeNode {
//          ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/type.
//                              ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/UnionTypeNode#
              members {
//            ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/members.
                new TypeNode.StringLiteralTypeNode { value = "A" }
//                           ^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/StringLiteralTypeNode#
//                                                   ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
                new TypeNode.StringLiteralTypeNode { value = "B" }
//                           ^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/StringLiteralTypeNode#
//                                                   ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
              }
            }
          }
          new {
            name { value = "Long" }
//          ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/name.
//                 ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
            type = new TypeNode.UnionTypeNode {
//          ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/type.
//                              ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/UnionTypeNode#
              members {
//            ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/members.
                new TypeNode.StringLiteralTypeNode { value = "Apple" }
//                           ^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/StringLiteralTypeNode#
//                                                   ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
                new TypeNode.StringLiteralTypeNode { value = "Blackberry" }
//                           ^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/StringLiteralTypeNode#
//                                                   ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
                new TypeNode.StringLiteralTypeNode { value = "Cherry" }
//                           ^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/StringLiteralTypeNode#
//                                                   ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
                new TypeNode.StringLiteralTypeNode { value = "Durian" }
//                           ^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/StringLiteralTypeNode#
//                                                   ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
                new TypeNode.StringLiteralTypeNode { value = "Elderberry" }
//                           ^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/StringLiteralTypeNode#
//                                                   ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
                new TypeNode.StringLiteralTypeNode { value = "Fig" }
//                           ^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/StringLiteralTypeNode#
//                                                   ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
                new TypeNode.StringLiteralTypeNode { value = "Guava" }
//                           ^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/StringLiteralTypeNode#
//                                                   ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
                new TypeNode.StringLiteralTypeNode { value = "Huckleberry" }
//                           ^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/StringLiteralTypeNode#
//                                                   ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
                new TypeNode.StringLiteralTypeNode { value = "I_can't_think_of_a_fruit_that_starts_with_I" }
//                           ^^^^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `TypeNode.pkl`/StringLiteralTypeNode#
//                                                   ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.syntax 1.1.0 `tests/ModuleNode.pkl`/value.
              }
            }
          }
        }
      }.output.text
//      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Module#output.
//             ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/FileOutput#text.
    }
  }
  
