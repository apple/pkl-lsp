  //===----------------------------------------------------------------------===//
  // Copyright Â© 2024-2025 Apple Inc. and the Pkl project authors. All rights reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     https://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  //===----------------------------------------------------------------------===//
  open module org.openapis.v3.Document
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Document.pkl`/
  
  import "Components.pkl"
  import "Extension.pkl"
  import "ExternalDocs.pkl"
  import "Info.pkl"
  import "PathItem.pkl"
  import "Reference.pkl" as _Reference
  import "Security.pkl"
  import "Server.pkl"
  import "Tag.pkl"
  
  /// This string MUST be the semantic version number of the OpenAPI Specification version that the OpenAPI document
  /// uses.
  ///
  /// The openapi field SHOULD be used by tooling specifications and clients to interpret the OpenAPI document. This is
  /// not related to the API info.version string. The default value corresponds to the version of the spec we've
  /// implemented in this package.
  ///
  /// Since this library specifically follows version 3.0.3 of the OpenAPI spec, this value cannot change unless this
  /// library is updated to implement a later version.
  fixed openapi = "3.0.3"
//      ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Document.pkl`/openapi.
//      documentation
//      > This string MUST be the semantic version number of the OpenAPI Specification version that the OpenAPI document
//      > uses.
//      > 
//      > The openapi field SHOULD be used by tooling specifications and clients to interpret the OpenAPI document. This is
//      > not related to the API info.version string. The default value corresponds to the version of the spec we've
//      > implemented in this package.
//      > 
//      > Since this library specifically follows version 3.0.3 of the OpenAPI spec, this value cannot change unless this
//      > library is updated to implement a later version.
  
  /// Provides metadata about the API.
  ///
  /// The metadata MAY be used by tooling as required.
  info: Info
//^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Document.pkl`/info.
//documentation
//> Provides metadata about the API.
//> 
//> The metadata MAY be used by tooling as required.
//      ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Info.pkl`/
  
  /// An array of Server Objects, which provide connectivity information to a target server.
  ///
  /// If the servers property is not provided, or is an empty array, the default value would be a Server Object with a
  /// url value of /.
  servers: Listing<Server>?
//^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Document.pkl`/servers.
//documentation
//> An array of Server Objects, which provide connectivity information to a target server.
//> 
//> If the servers property is not provided, or is an empty array, the default value would be a Server Object with a
//> url value of /.
//         ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                 ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Server.pkl`/
  
  /// The available paths and operations for the API.
  ///
  /// Contains relative paths to an individual endpoint. The field name MUST begin with a forward slash (/). The path is
  /// appended (no relative URL resolution) to the expanded URL from the Server Object's url field in order to construct
  /// the full URL. Path templating is allowed.
  ///
  /// When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts.
  /// Templated paths with the same hierarchy but different templated names MUST NOT exist as they are identical.
  ///
  /// In case of ambiguous matching, it's up to the tooling to decide which one to use.
  paths: Mapping<String(startsWith("/")), PathItem>
//^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Document.pkl`/paths.
//documentation
//> The available paths and operations for the API.
//> 
//> Contains relative paths to an individual endpoint. The field name MUST begin with a forward slash (/). The path is
//> appended (no relative URL resolution) to the expanded URL from the Server Object's url field in order to construct
//> the full URL. Path templating is allowed.
//> 
//> When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts.
//> Templated paths with the same hierarchy but different templated names MUST NOT exist as they are identical.
//> 
//> In case of ambiguous matching, it's up to the tooling to decide which one to use.
//       ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//               ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                      ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#startsWith().
//                                        ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `PathItem.pkl`/
  
  /// An element to hold various schemas for the specification.
  components: Components?
//^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Document.pkl`/components.
//documentation
//> An element to hold various schemas for the specification.
//            ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Components.pkl`/
  
  /// A declaration of which security mechanisms can be used across the API.
  ///
  /// The list of values includes alternative security requirement objects that can be used. Only one of the security
  /// requirement objects need to be satisfied to authorize a request. Individual operations can override this
  /// definition. To make security optional, an empty security requirement ({}) can be included in the array.
  security: Listing<Security.Requirement>?
//^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Document.pkl`/security.
//documentation
//> A declaration of which security mechanisms can be used across the API.
//> 
//> The list of values includes alternative security requirement objects that can be used. Only one of the security
//> requirement objects need to be satisfied to authorize a request. Individual operations can override this
//> definition. To make security optional, an empty security requirement ({}) can be included in the array.
//          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                           ^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Security.pkl`/Requirement#
  
  /// A list of tags used by the specification with additional metadata.
  ///
  /// The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by
  /// the Operation Object must be declared. The tags that are not declared MAY be organized randomly or based on the
  /// tools' logic. Each tag name in the list MUST be unique.
  tags: Listing<Tag>(isDistinct)?
//^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Document.pkl`/tags.
//documentation
//> A list of tags used by the specification with additional metadata.
//> 
//> The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by
//> the Operation Object must be declared. The tags that are not declared MAY be organized randomly or based on the
//> tools' logic. Each tag name in the list MUST be unique.
//      ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//              ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Tag.pkl`/
//                   ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#isDistinct.
  
  /// Additional external documentation.
  externalDocs: ExternalDocs?
//^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Document.pkl`/externalDocs.
//documentation
//> Additional external documentation.
//              ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `ExternalDocs.pkl`/
  
  // re-export types so they are available without import
  typealias Reference = _Reference
//          ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Document.pkl`/Reference#
//                      ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Reference.pkl`/
  
  output {
//^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Document.pkl`/output.
    // noinspection TypeMismatch
    local const format: "json"|"yaml" = read?("prop:pkl.outputFormat") ?? "json"
//              ^^^^^^ definition local format_87
  
    local const renderers: Mapping<String, ValueRenderer> = new {
//              ^^^^^^^^^ definition local renderers_89
//                         ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                                 ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                         ^^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/ValueRenderer#
      ["json"] = new JsonRenderer {}
//                   ^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/JsonRenderer#
      ["yaml"] = new YamlRenderer {}
//                   ^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/YamlRenderer#
    }
  
    renderer = (renderers[format]) {
//  ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Document.pkl`/renderer.
//              ^^^^^^^^^ reference local renderers_89
//                        ^^^^^^ reference local format_87
      converters = Extension.converters
//    ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Document.pkl`/converters.
//                 ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Extension.pkl`/
//                           ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Extension.pkl`/converters.
    }
  }
  
