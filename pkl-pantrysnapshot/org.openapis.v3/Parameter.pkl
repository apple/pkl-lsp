  //===----------------------------------------------------------------------===//
  // Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     https://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  //===----------------------------------------------------------------------===//
  module org.openapis.v3.Parameter
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Parameter.pkl`/
  
  extends "BaseParameter.pkl"
  
  import "Schema.pkl"
  import "Reference.pkl"
  import "MediaType.pkl"
  
  /// The name of the parameter.
  ///
  /// Parameter names are case sensitive.
  ///
  /// * If in is "path", the name field MUST correspond to a template expression occurring within the path field in the
  ///   Paths Object. See Path Templating for further information.
  /// * If in is "header" and the name field is "Accept", "Content-Type" or "Authorization", the parameter definition
  ///   SHALL be ignored.
  /// * For all other cases, the name corresponds to the parameter name used by the in property.
  name: String
//^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Parameter.pkl`/name.
//documentation
//> The name of the parameter.
//> 
//> Parameter names are case sensitive.
//> 
//> * If in is "path", the name field MUST correspond to a template expression occurring within the path field in the
//>   Paths Object. See Path Templating for further information.
//> * If in is "header" and the name field is "Accept", "Content-Type" or "Authorization", the parameter definition
//>   SHALL be ignored.
//> * For all other cases, the name corresponds to the parameter name used by the in property.
//      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  
  /// The location of the parameter.
  `in`: "query"|"header"|"path"|"cookie"
//^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Parameter.pkl`/in.
//documentation
//> The location of the parameter.
  
  /// Determines whether the parameter value SHOULD allow reserved characters, as defined by RFC3986 :/?#[]@!$&'()*+,;=
  /// to be included without percent-encoding.
  ///
  /// This property only applies to parameters with an in value of query. The default value is false.
  allowReserved: Boolean(implies(`in` == "query"))?
//^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Parameter.pkl`/allowReserved.
//documentation
//> Determines whether the parameter value SHOULD allow reserved characters, as defined by RFC3986 :/?#[]@!$&'()*+,;=
//> to be included without percent-encoding.
//> 
//> This property only applies to parameters with an in value of query. The default value is false.
//               ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                       ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#implies().
//                               ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Parameter.pkl`/in.
  
  /// Determines whether this parameter is mandatory.
  ///
  /// If the parameter location is "path", this property is REQUIRED and its value MUST be true. Otherwise, the property
  /// MAY be included and its default value is false.
  required: Boolean?((`in` == "path").implies(this == true))
//^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Parameter.pkl`/required.
//documentation
//> Determines whether this parameter is mandatory.
//> 
//> If the parameter location is "path", this property is REQUIRED and its value MUST be true. Otherwise, the property
//> MAY be included and its default value is false.
//          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                    ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Parameter.pkl`/in.
//                                    ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#implies().
  
  /// Allowed values for a parameter's style.
  typealias Style = "matrix"|"label"|"form"|"simple"|"spaceDelimited"|"pipeDelimited"|"deepObject"
//          ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Parameter.pkl`/Style#
//          documentation
//          > Allowed values for a parameter's style.
  
  /// Describes how the parameter value will be serialized depending on the type of the parameter value.
  ///
  /// Default values (based on value of in): for query - form; for path - simple; for header - simple; for cookie - form.
  style: Style(
//^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Parameter.pkl`/style.
//documentation
//> Describes how the parameter value will be serialized depending on the type of the parameter value.
//> 
//> Default values (based on value of in): for query - form; for path - simple; for header - simple; for cookie - form.
//       ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Parameter.pkl`/Style#
    if (List("matrix", "label").contains(this))
//      ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
//                              ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#contains().
      `in` == "path"
//    ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Parameter.pkl`/in.
    else if (this == "form")
      List("query", "cookie").contains(`in`)
//    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
//                            ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#contains().
//                                     ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Parameter.pkl`/in.
    else if (this == "simple")
      List("header", "path").contains(`in`)
//    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
//                           ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#contains().
//                                    ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Parameter.pkl`/in.
    else `in` == "query"
//       ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Parameter.pkl`/in.
  )?
  
  /// The schema defining the type used for the parameter.
  schema: (*Schema|Reference)?
//^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Parameter.pkl`/schema.
//documentation
//> The schema defining the type used for the parameter.
//          ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Schema.pkl`/
//                 ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Reference.pkl`/
  
  /// A map containing the representations for the parameter.
  ///
  /// The key is the media type and the value describes it. The map MUST only contain one entry.
  content: Mapping<MediaType.MediaTypeName, MediaType>(length == 1)?
//^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Parameter.pkl`/content.
//documentation
//> A map containing the representations for the parameter.
//> 
//> The key is the media type and the value describes it. The map MUST only contain one entry.
//         ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                           ^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `MediaType.pkl`/MediaTypeName#
//                                          ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `MediaType.pkl`/
//                                                     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#length.
  
