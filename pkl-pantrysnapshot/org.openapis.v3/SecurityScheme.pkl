  //===----------------------------------------------------------------------===//
  // Copyright Â© 2024-2025 Apple Inc. and the Pkl project authors. All rights reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     https://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  //===----------------------------------------------------------------------===//
  /// Contact information for the exposed API.
  module org.openapis.v3.SecurityScheme
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `SecurityScheme.pkl`/
  
  import "Extension.pkl"
  import "OAuthFlows.pkl"
  
  typealias SecuritySchemeType = "apiKey"|"http"|"oauth2"|"openIdConnect"
//          ^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `SecurityScheme.pkl`/SecuritySchemeType#
  typealias SecuritySchemeIn = "query"|"header"|"cookie"
//          ^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `SecurityScheme.pkl`/SecuritySchemeIn#
  
  /// The type of the security scheme.
  type: SecuritySchemeType
//^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `SecurityScheme.pkl`/type.
//documentation
//> The type of the security scheme.
//      ^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `SecurityScheme.pkl`/SecuritySchemeType#
  
  /// A short description for security scheme.
  ///
  /// CommonMark syntax MAY be used for rich text representation.
  @SourceCode { language = "Markdown" }
// ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/SourceCode#
//              ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `SecurityScheme.pkl`/language.
  description: String?
//^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `SecurityScheme.pkl`/description.
//documentation
//> A short description for security scheme.
//> 
//> CommonMark syntax MAY be used for rich text representation.
//             ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  
  /// The name of the header, query or cookie parameter to be used.
  name: String?((this != null).implies(type == "apiKey"))
//^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `SecurityScheme.pkl`/name.
//documentation
//> The name of the header, query or cookie parameter to be used.
//      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                             ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#implies().
//                                     ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `SecurityScheme.pkl`/type.
  
  /// The location of the API key.
  `in`: SecuritySchemeIn?((this != null).implies(type == "apiKey"))
//^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `SecurityScheme.pkl`/in.
//documentation
//> The location of the API key.
//      ^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `SecurityScheme.pkl`/SecuritySchemeIn#
//                                       ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#implies().
//                                               ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `SecurityScheme.pkl`/type.
  
  scheme: String((this == "bearer").implies(bearerFormat != null))
//^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `SecurityScheme.pkl`/scheme.
//        ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                  ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#implies().
//                                          ^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `SecurityScheme.pkl`/bearerFormat.
  
  /// A hint to the client to identify how the bearer token is formatted.
  ///
  /// Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation
  /// purposes.
  bearerFormat: String(type == "http")?
//^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `SecurityScheme.pkl`/bearerFormat.
//documentation
//> A hint to the client to identify how the bearer token is formatted.
//> 
//> Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation
//> purposes.
//              ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                     ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `SecurityScheme.pkl`/type.
  
  /// An object containing configuration information for the flow types supported.
  flows: OAuthFlows?((type == "oauth2").implies(this != null))
//^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `SecurityScheme.pkl`/flows.
//documentation
//> An object containing configuration information for the flow types supported.
//       ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `OAuthFlows.pkl`/
//                    ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `SecurityScheme.pkl`/type.
//                                      ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#implies().
  
  /// OpenId Connect URL to discover OAuth2 configuration values.
  ///
  /// This MUST be in the form of a URL.
  openIdConnectUrl: Uri?((type == "openIdConnect").implies(this != null))
//^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `SecurityScheme.pkl`/openIdConnectUrl.
//documentation
//> OpenId Connect URL to discover OAuth2 configuration values.
//> 
//> This MUST be in the form of a URL.
//                  ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Uri#
//                        ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `SecurityScheme.pkl`/type.
//                                                 ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#implies().
  
  /// Custom properties starting with x- extend OpenAPI with additional information
  /// or functionality.
  ///
  /// This is a child property because Pkl modules cannot express both known names
  /// and arbitrary names.
  ///
  /// <https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#specification-extensions>
  hidden extensions: Mapping<Extension.Key, Any>?
//       ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `SecurityScheme.pkl`/extensions.
//       documentation
//       > Custom properties starting with x- extend OpenAPI with additional information
//       > or functionality.
//       > 
//       > This is a child property because Pkl modules cannot express both known names
//       > and arbitrary names.
//       > 
//       > <https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#specification-extensions>
//                   ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                                     ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/org.openapis.v3 2.2.0 `Extension.pkl`/Key#
//                                          ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#
  
