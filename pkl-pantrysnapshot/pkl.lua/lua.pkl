  //===----------------------------------------------------------------------===//
  // Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     https://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  //===----------------------------------------------------------------------===//
  /// A [Parser] and [Renderer] for a subset of [Lua](https://www.lua.org).
  @ModuleInfo { minPklVersion = "0.25.0" }
// ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/ModuleInfo#
//              ^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/minPklVersion.
  module pkl.lua.lua
//^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/
  
  import "pkl:reflect"
  import "pkl:base"
  import "pkl:math"
  import "lua.pkl"
  
  local const pathSpecRegex: Regex = let (prop = #"(?:[^\[\]^*.]+)"#) Regex(#"""
//            ^^^^^^^^^^^^^ definition local pathSpecRegex_25
//                           ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex#
//                                        ^^^^ definition local prop_25
//                                                                    ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    (?x)
    \^?
    (?:
      (?:
        \#(prop)
//         ^^^^ reference local prop_25
      | \*
      | \[(?:\#(prop)|\*)\]
//              ^^^^ reference local prop_25
      )
      (?:
        \.\#(prop)
//           ^^^^ reference local prop_25
      | \.\*
      | \[(?:\#(prop)|\*)\]
//              ^^^^ reference local prop_25
      )*
    )?
    """#)
  local const pathSpecSplitRegex: Regex = Regex(#"\.|(?=\[)|(?<=[\^\]])"#)
//            ^^^^^^^^^^^^^^^^^^ definition local pathSpecSplitRegex_41
//                                ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex#
//                                        ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
  
  // Returns a [Prop] for string keys, otherwise [splatKey].
  local const function Prop(k: Any): Prop|Key =
//                     ^^^^ definition local Prop_44
//                          ^ definition local k_44
//                             ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#
//                                   ^^^^ reference local Prop_47
//                                        ^^^ reference local Key_55
    if (k is String) new Prop { name = k } else splatKey
//      ^ reference local k_44
//           ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                       ^^^^ reference local Prop_47
//                              ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/name.
//                                     ^ reference local k_44
//                                              ^^^^^^^^ reference local splatKey_61
  
  local class Prop {
//            ^^^^ definition local Prop_47
    name: String
//  ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Prop#name.
//        ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  }
  
  // Returns a [Key] for string keys, otherwise [splatKey]
  local const function Key(k: Any): Key =
//                     ^^^ definition local Key_52
//                         ^ definition local k_52
//                            ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#
//                                  ^^^ reference local Key_55
    if (k is String) new Key { key = k } else splatKey
//      ^ reference local k_52
//           ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                       ^^^ reference local Key_55
//                             ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/key.
//                                   ^ reference local k_52
//                                            ^^^^^^^^ reference local splatKey_61
  
  local class Key {
//            ^^^ definition local Key_55
    key: String
//  ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Key#key.
//       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  }
  
  local typealias PathEntry = Prop|Key|"^"
//                ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/PathEntry#
//                            ^^^^ reference local Prop_47
//                                 ^^^ reference local Key_55
  
  local const splatKey: Key = new Key { key = "*" }
//            ^^^^^^^^ definition local splatKey_61
//                      ^^^ reference local Key_55
//                                ^^^ reference local Key_55
//                                      ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/key.
  
  local const function splitPathConverters(converterMap: Map<Class|String, (unknown) -> unknown>): List<Pair<List<PathEntry>, (unknown) -> unknown>> =
//                     ^^^^^^^^^^^^^^^^^^^ definition local splitPathConverters_63
//                                         ^^^^^^^^^^^^ definition local converterMap_63
//                                                       ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#
//                                                           ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Class#
//                                                                 ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                                                                 ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                                                                                                      ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#
//                                                                                                           ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                                                                                                                ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/PathEntry#
    converterMap
//  ^^^^^^^^^^^^ reference local converterMap_63
      .filter((key, _) -> key is String)
//     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#filter().
//             ^^^ definition local key_65
//                        ^^^ reference local key_65
//                               ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
      .mapKeys((key, _) ->
//     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#mapKeys().
//              ^^^ definition local key_66
      if (key.matches(pathSpecRegex))
//        ^^^ reference local key_66
//            ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#matches().
//                    ^^^^^^^^^^^^^ reference local pathSpecRegex_25
        if (key == "") List("^") else // PcfRenderer treats empty path as "^"
//          ^^^ reference local key_66
//                     ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
          key
//        ^^^ reference local key_66
            .split(pathSpecSplitRegex)
//           ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#split().
//                 ^^^^^^^^^^^^^^^^^^ reference local pathSpecSplitRegex_41
            .map((it) ->
//           ^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#map().
//                ^^ definition local it_71
              if (it == "^") "^"
//                ^^ reference local it_71
              else if (it.startsWith("[")) new Key { key = it.substring(1, it.length-1) }
//                     ^^ reference local it_71
//                        ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#startsWith().
//                                             ^^^ reference local Key_55
//                                                   ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/key.
//                                                         ^^ reference local it_71
//                                                            ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#substring().
//                                                                         ^^ reference local it_71
//                                                                            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#length.
              else new Prop { name = it })
//                     ^^^^ reference local Prop_47
//                            ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/name.
//                                   ^^ reference local it_71
            .reverse()
//           ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#reverse().
      else throw("Converter path `\(key)` has invalid syntax."))
//                                  ^^^ reference local key_66
      .entries
//     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#entries.
  
  /// A string that is a Lua reserved keyword.
  ///
  /// These strings are not allowed to be used as identifiers.
  @AlsoKnownAs { names { "LuaKeyword" } }
// ^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/AlsoKnownAs#
//               ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/names.
  typealias Keyword = "and"|"break"|"do"|"else"|"elseif"|"end"|"false"|"for"|"function"|"goto"|"if"|"in"|"local"|"nil"|"not"|"or"|"repeat"|"return"|"then"|"true"|"until"|"while"
//          ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Keyword#
//          documentation
//          > A string that is a Lua reserved keyword.
//          > 
//          > These strings are not allowed to be used as identifiers.
  
  /// Obsolete alias for [Keyword].
  @Deprecated { message = "Use [Keyword] instead."; replaceWith = "lua.Keyword"; since = "1.1.0" }
// ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Deprecated#
//              ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/message.
//                                                  ^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/replaceWith.
//                                                                               ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/since.
  typealias LuaKeyword = Keyword
//          ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/LuaKeyword#
//          documentation
//          > Obsolete alias for [`Keyword`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/pkl.lua/lua.pkl#L83,C11).
//                       ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Keyword#
  
  /// A string that is a valid Lua identifier.
  @AlsoKnownAs { names { "LuaIdentifier" } }
// ^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/AlsoKnownAs#
//               ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/names.
  typealias Identifier = String(matches(Regex("[a-zA-Z_][a-zA-Z0-9_]*")) && !(this is lua.Keyword))
//          ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Identifier#
//          documentation
//          > A string that is a valid Lua identifier.
//                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                              ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#matches().
//                                      ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
//                                                                                        ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Keyword#
  
  /// Obsolete alias for [Identifier].
  @Deprecated { message = "Use [Identifier] instead."; replaceWith = "lua.Identifier"; since = "1.1.0" }
// ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Deprecated#
//              ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/message.
//                                                     ^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/replaceWith.
//                                                                                     ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/since.
  typealias LuaIdentifier = Identifier
//          ^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/LuaIdentifier#
//          documentation
//          > Obsolete alias for [`Identifier`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/pkl.lua/lua.pkl#L91,C11).
//                          ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Identifier#
  
  /// Pkl representation of a Lua value.
  typealias Value = Null|Boolean|Number|String|Listing|Dynamic|Mapping
//          ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Value#
//          documentation
//          > Pkl representation of a Lua value.
//                  ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Null#
//                       ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                               ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                                      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                             ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                                                     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#
//                                                             ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
  
  /// Pkl representation of a valid Lua table key.
  typealias TableKey = Boolean|Number(!isNaN)|String|Listing|Dynamic|Mapping
//          ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/TableKey#
//          documentation
//          > Pkl representation of a valid Lua table key.
//                     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                             ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                                     ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#isNaN.
//                                            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                   ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                                                           ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#
//                                                                   ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
  
  // region Renderer
  
  /// Directs [Renderer] to output additional text [before] and/or [after] rendering a [value].
  @AlsoKnownAs { names { "LuaRenderDirective" } }
// ^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/AlsoKnownAs#
//               ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/RenderDirective#names.
  class RenderDirective {
//      ^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/RenderDirective#
//      documentation
//      > Directs [`Renderer`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/pkl.lua/lua.pkl#L123,C7) to output additional text [`before`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/pkl.lua/lua.pkl#L109,C3) and/or [`after`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/pkl.lua/lua.pkl#L115,C3) rendering a [`value`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/pkl.lua/lua.pkl#L112,C3).
    /// The text to output before rendering [value].
    before: String?
//  ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/RenderDirective#before.
//  documentation
//  > The text to output before rendering [`value`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/pkl.lua/lua.pkl#L112,C3).
//          ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  
    /// The value to render.
    value: Any
//  ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/RenderDirective#value.
//  documentation
//  > The value to render.
//         ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#
  
    /// The text to output after rendering [value].
    after: String?
//  ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/RenderDirective#after.
//  documentation
//  > The text to output after rendering [`value`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/pkl.lua/lua.pkl#L112,C3).
//         ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  }
  
  /// Obsolete alias for [RenderDirective].
  @Deprecated { message = "Use [RenderDirective] instead."; replaceWith = "lua.RenderDirective"; since = "1.1.0" }
// ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Deprecated#
//              ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/message.
//                                                          ^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/replaceWith.
//                                                                                               ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/since.
  typealias LuaRenderDirective = RenderDirective
//          ^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/LuaRenderDirective#
//          documentation
//          > Obsolete alias for [`RenderDirective`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/pkl.lua/lua.pkl#L107,C7).
//                               ^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/RenderDirective#
  
  /// Renders values as Lua.
  class Renderer extends ValueRenderer {
//      ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Renderer#
//      documentation
//      > Renders values as Lua.
//                       ^^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/ValueRenderer#
    /// The characters to use for indenting output. Defaults to two spaces.
    indent: String = "  "
//  ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Renderer#indent.
//  documentation
//  > The characters to use for indenting output. Defaults to two spaces.
//          ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  
    /// Whether to skip rendering properties whose value is [null].
    ///
    /// Note that due to language limitations, any entries in a [Dynamic] will be treated as
    /// properties.
    omitNullProperties: Boolean = false
//  ^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Renderer#omitNullProperties.
//  documentation
//  > Whether to skip rendering properties whose value is `null`.
//  > 
//  > Note that due to language limitations, any entries in a [`Dynamic`](pkl-lsp://stdlib/base.pkl#L1808,C7) will be treated as
//  > properties.
//                      ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
  
    /// The number of elements in a [Mapping] or [Listing] to render them multiline.
    ///
    /// The default value of `2` means a collection with a single element will be rendered in the
    /// inline style, although any nested collections may be rendered in the multiline style.
    ///
    /// Note that [Map] and [List] are always rendered in the inline style.
    multilineThreshold: Int = 2
//  ^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Renderer#multilineThreshold.
//  documentation
//  > The number of elements in a [`Mapping`](pkl-lsp://stdlib/base.pkl#L2038,C7) or [`Listing`](pkl-lsp://stdlib/base.pkl#L1860,C7) to render them multiline.
//  > 
//  > The default value of `2` means a collection with a single element will be rendered in the
//  > inline style, although any nested collections may be rendered in the multiline style.
//  > 
//  > Note that [`Map`](pkl-lsp://stdlib/base.pkl#L3286,C16) and [`List`](pkl-lsp://stdlib/base.pkl#L2873,C16) are always rendered in the inline style.
//                      ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
  
    /// Value converters to apply before values are rendered.
    ///
    /// For more information see [ValueRenderer.converters]. Note that due to language limitations,
    /// when rendering a [Dynamic], any entries with a [String] key will have converters applied as
    /// though the entry was a property. This means paths like `x[foo]` only apply when rendering
    /// a [Mapping], or when a class converter converts an entry key into a [String].
    converters: Mapping<(Class|String), (unknown) -> Any>
//  ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Renderer#converters.
//  documentation
//  > Value converters to apply before values are rendered.
//  > 
//  > For more information see [`ValueRenderer.converters`](pkl-lsp://stdlib/base.pkl#L308,C3). Note that due to language limitations,
//  > when rendering a [`Dynamic`](pkl-lsp://stdlib/base.pkl#L1808,C7), any entries with a [`String`](pkl-lsp://stdlib/base.pkl#L1094,C16) key will have converters applied as
//  > though the entry was a property. This means paths like `x`foo`` only apply when rendering
//  > a [`Mapping`](pkl-lsp://stdlib/base.pkl#L2038,C7), or when a class converter converts an entry key into a [`String`](pkl-lsp://stdlib/base.pkl#L1094,C16).
//              ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                       ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Class#
//                             ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                   ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#
  
    extension = "lua"
//  ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Renderer#extension.
//  documentation
//  > The file extension associated with this output format,
//  > or `null` if this format does not have an extension.
  
    function renderValue(value: Any): String =
//           ^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Renderer#renderValue().
//           documentation
//           > Renders [`value`](pkl-lsp://stdlib/base.pkl#L323,C33).
//                       ^^^^^ definition local value_151
//                              ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#
//                                    ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
      let (path = List("^"))
//         ^^^^ definition local path_152
//                ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
        render(convert(value, path), path, 0)
//      ^^^^^^ reference local render_223
//             ^^^^^^^ reference local convert_197
//                     ^^^^^ reference local value_151
//                            ^^^^ reference local path_152
//                                   ^^^^ reference local path_152
  
    function renderDocument(value: Any): String =
//           ^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Renderer#renderDocument().
//           documentation
//           > Renders [`value`](pkl-lsp://stdlib/base.pkl#L320,C36) as a complete document.
//           > 
//           > Some renderers impose restrictions on which types of values can be rendered as document.
//           > 
//           > A typical implementation of this method renders a document header/footer
//           > and otherwise delegates to [`renderValue()`](pkl-lsp://stdlib/base.pkl#L323,C3).
//                          ^^^^^ definition local value_155
//                                 ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#
//                                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
      let (path = List("^"))
//         ^^^^ definition local path_156
//                ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
      let (value = convert(value, path))
//         ^^^^^ definition local value_157
//                 ^^^^^^^ reference local convert_197
//                         ^^^^^ reference local value_155
//                                ^^^^ reference local path_156
        if (value is base.RenderDirective) "\(value.text)\n"
//          ^^^^^ reference local value_157
//                        ^^^^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RenderDirective#
//                                            ^^^^^ reference local value_157
//                                                  ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RenderDirective#text.
        else if (value is RenderDirective) "\(value.before ?? "")\(render(value.value, path, 0))\(value.after ?? "")\n"
//               ^^^^^ reference local value_157
//                        ^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/RenderDirective#
//                                            ^^^^^ reference local value_157
//                                                  ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/RenderDirective#before.
//                                                                 ^^^^^^ reference local render_223
//                                                                        ^^^^^ reference local value_157
//                                                                              ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/RenderDirective#value.
//                                                                                     ^^^^ reference local path_156
//                                                                                                ^^^^^ reference local value_157
//                                                                                                      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/RenderDirective#after.
        else if (value is Dynamic|Typed)
//               ^^^^^ reference local value_157
//                        ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#
//                                ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Typed#
          value.toMap().fold("", (acc, k, v) ->
//        ^^^^^ reference local value_157
//              ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Typed#toMap().
//                      ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#fold().
//                                ^^^ definition local acc_161
//                                     ^ definition local k_161
//                                        ^ definition local v_161
            let (isProp = k is String)
//               ^^^^^^ definition local isProp_162
//                        ^ reference local k_161
//                             ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
            let (k = if (isProp) k else convert(k, null))
//               ^ definition local k_163
//                       ^^^^^^ reference local isProp_162
//                               ^ reference local k_161
//                                      ^^^^^^^ reference local convert_197
//                                              ^ reference local k_161
            let (path = path.add(if (isProp) Prop(k) else Key(k)))
//               ^^^^ definition local path_164
//                      ^^^^ reference local path_156
//                           ^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#add().
//                                   ^^^^^^ reference local isProp_162
//                                           ^^^^ reference local Prop_44
//                                                ^ reference local k_163
//                                                        ^^^ reference local Key_52
//                                                            ^ reference local k_163
            let (v = convert(v, path))
//               ^ definition local v_165
//                   ^^^^^^^ reference local convert_197
//                           ^ reference local v_161
//                              ^^^^ reference local path_164
              if (omitNullProperties && v == null && isProp) acc
//                ^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Renderer#omitNullProperties.
//                                      ^ reference local v_165
//                                                   ^^^^^^ reference local isProp_162
//                                                           ^^^ reference local acc_161
              else acc + "\(renderKey(k, "_ENV")) = \(render(v, path, 0))\n")
//                 ^^^ reference local acc_161
//                          ^^^^^^^^^ reference local renderKey_236
//                                    ^ reference local k_163
//                                                    ^^^^^^ reference local render_223
//                                                           ^ reference local v_165
//                                                              ^^^^ reference local path_164
          + (if (value is Dynamic) value.toList() else List()).foldIndexed("", (idx, acc, v) ->
//               ^^^^^ reference local value_157
//                        ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#
//                                 ^^^^^ reference local value_157
//                                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#toList().
//                                                     ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
//                                                             ^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#foldIndexed().
//                                                                              ^^^ definition local idx_168
//                                                                                   ^^^ definition local acc_168
//                                                                                        ^ definition local v_168
            let (path = path.add(splatKey))
//               ^^^^ definition local path_169
//                      ^^^^ reference local path_156
//                           ^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#add().
//                               ^^^^^^^^ reference local splatKey_61
            let (v = convert(v, path))
//               ^ definition local v_170
//                   ^^^^^^^ reference local convert_197
//                           ^ reference local v_168
//                              ^^^^ reference local path_169
              // remember, Lua indexes are 1-based
              acc + "_ENV[\(idx+1)] = \(render(v, path, 0))\n")
//            ^^^ reference local acc_168
//                          ^^^ reference local idx_168
//                                      ^^^^^^ reference local render_223
//                                             ^ reference local v_170
//                                                ^^^^ reference local path_169
        else if (value is Mapping|Map)
//               ^^^^^ reference local value_157
//                        ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                                ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#
          value.fold("", (acc, k, v) ->
//        ^^^^^ reference local value_157
//              ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#fold().
//                        ^^^ definition local acc_174
//                             ^ definition local k_174
//                                ^ definition local v_174
            let (k = convert(k, null))
//               ^ definition local k_175
//                   ^^^^^^^ reference local convert_197
//                           ^ reference local k_174
            let (path = path.add(Key(k)))
//               ^^^^ definition local path_176
//                      ^^^^ reference local path_156
//                           ^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#add().
//                               ^^^ reference local Key_52
//                                   ^ reference local k_175
            let (v = convert(v, path))
//               ^ definition local v_177
//                   ^^^^^^^ reference local convert_197
//                           ^ reference local v_174
//                              ^^^^ reference local path_176
              acc + "\(renderKey(k, "_ENV")) = \(render(v, path, 0))\n")
//            ^^^ reference local acc_174
//                     ^^^^^^^^^ reference local renderKey_236
//                               ^ reference local k_175
//                                               ^^^^^^ reference local render_223
//                                                      ^ reference local v_177
//                                                         ^^^^ reference local path_176
        else throw("The top-level value of a Lua document must have type `Typed`, `Dynamic`, `Mapping`, or `Map`, but got type `\(value.getClass())`")
//                                                                                                                                ^^^^^ reference local value_157
//                                                                                                                                      ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#getClass().
  
    // region Converters
  
    local converterMap = converters.toMap()
//        ^^^^^^^^^^^^ definition local converterMap_183
//                       ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Renderer#converters.
//                                  ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#toMap().
  
    // path specs are already in reversed order
    local pathConverters: List<Pair<List<PathEntry>,(unknown) -> Any>> =
//        ^^^^^^^^^^^^^^ definition local pathConverters_186
//                        ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                             ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#
//                                  ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                                       ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/PathEntry#
//                                                               ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#
      splitPathConverters(converterMap)
//    ^^^^^^^^^^^^^^^^^^^ reference local splitPathConverters_63
//                        ^^^^^^^^^^^^ reference local converterMap_183
  
    // [true] if the converters define any class converters.
    // For the time being this is limited to any subclasses of [Typed], as this matches current
    // [PcfRenderer] behavior. I understand this is a Pkl bug and e.g. [Number] should match [Int],
    // but we'll match the bug for now for performance reasons.
    local hasTypedConverters: Boolean =
//        ^^^^^^^^^^^^^^^^^^ definition local hasTypedConverters_193
//                            ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
      let (typedClass = reflect.Class(Typed))
//         ^^^^^^^^^^ definition local typedClass_194
//                      ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.reflect`/
//                              ^^^^^ reference pkl . pkl 0.29.0 `pkl.reflect`/Class().
//                                    ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Typed#
        converterMap.any((k,_) -> k is Class && reflect.Class(k).isSubclassOf(typedClass))
//      ^^^^^^^^^^^^ reference local converterMap_183
//                   ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#any().
//                        ^ definition local k_195
//                                ^ reference local k_195
//                                     ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Class#
//                                              ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.reflect`/
//                                                      ^^^^^ reference pkl . pkl 0.29.0 `pkl.reflect`/Class().
//                                                            ^ reference local k_195
//                                                               ^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.reflect`/Class#isSubclassOf().
//                                                                            ^^^^^^^^^^ reference local typedClass_194
  
    local function convert(value: Any, path: List<PathEntry>?): Any =
//                 ^^^^^^^ definition local convert_197
//                         ^^^^^ definition local value_197
//                                ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#
//                                     ^^^^ definition local path_197
//                                           ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                                                ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/PathEntry#
//                                                              ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#
      let (f =
//         ^ definition local f_198
        if (path != null && !pathConverters.isEmpty)
//          ^^^^ reference local path_197
//                           ^^^^^^^^^^^^^^ reference local pathConverters_186
//                                          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#isEmpty.
          let (path = path.reverse())
//             ^^^^ definition local path_200
//                    ^^^^ reference local path_197
//                         ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#reverse().
            pathConverters.findOrNull((p) -> comparePaths(path, p.key))?.value
//          ^^^^^^^^^^^^^^ reference local pathConverters_186
//                         ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#findOrNull().
//                                     ^ definition local p_201
//                                           ^^^^^^^^^^^^ reference local comparePaths_209
//                                                        ^^^^ reference local path_200
//                                                              ^ reference local p_201
//                                                                ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#key.
//                                                                       ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#value.
        else null)
      let (klass = value.getClass())
//         ^^^^^ definition local klass_203
//                 ^^^^^ reference local value_197
//                       ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#getClass().
      let (f = f ?? converterMap.getOrNull(klass))
//         ^ definition local f_204
//             ^ reference local f_198
//                  ^^^^^^^^^^^^ reference local converterMap_183
//                               ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#getOrNull().
//                                         ^^^^^ reference local klass_203
      let (f = f ?? if (hasTypedConverters && value is Typed) findTypedConverter(reflect.Class(klass).superclass) else null) // find superclass converters
//         ^ definition local f_205
//             ^ reference local f_204
//                      ^^^^^^^^^^^^^^^^^^ reference local hasTypedConverters_193
//                                            ^^^^^ reference local value_197
//                                                     ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Typed#
//                                                            ^^^^^^^^^^^^^^^^^^ reference local findTypedConverter_216
//                                                                               ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.reflect`/
//                                                                                       ^^^^^ reference pkl . pkl 0.29.0 `pkl.reflect`/Class().
//                                                                                             ^^^^^ reference local klass_203
//                                                                                                    ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.reflect`/Class#superclass.
        if (f != null) f.apply(value) else value
//          ^ reference local f_205
//                     ^ reference local f_205
//                       ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Function1#apply().
//                             ^^^^^ reference local value_197
//                                         ^^^^^ reference local value_197
  
    // the path and spec must already be reversed
    local function comparePaths(path: List<PathEntry>, pathSpec: List<PathEntry>): Boolean =
//                 ^^^^^^^^^^^^ definition local comparePaths_209
//                              ^^^^ definition local path_209
//                                    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                                         ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/PathEntry#
//                                                     ^^^^^^^^ definition local pathSpec_209
//                                                               ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                                                                    ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/PathEntry#
//                                                                                 ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
      path.length >= pathSpec.length && path.zip(pathSpec).every((p) ->
//    ^^^^ reference local path_209
//         ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#length.
//                   ^^^^^^^^ reference local pathSpec_209
//                            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#length.
//                                      ^^^^ reference local path_209
//                                           ^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#zip().
//                                               ^^^^^^^^ reference local pathSpec_209
//                                                         ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#every().
//                                                                ^ definition local p_210
        if (p.second is Prop && p.second.name == "*") p.first is Prop
//          ^ reference local p_210
//            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#second.
//                      ^^^^ reference local Prop_47
//                              ^ reference local p_210
//                                ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#second.
//                                       ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Prop#name.
//                                                    ^ reference local p_210
//                                                      ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#first.
//                                                               ^^^^ reference local Prop_47
        else if (p.second is Key && p.second.key == "*") p.first is Key
//               ^ reference local p_210
//                 ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#second.
//                           ^^^ reference local Key_55
//                                  ^ reference local p_210
//                                    ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#second.
//                                           ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Key#key.
//                                                       ^ reference local p_210
//                                                         ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#first.
//                                                                  ^^^ reference local Key_55
        else p.first == p.second
//           ^ reference local p_210
//             ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#first.
//                      ^ reference local p_210
//                        ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#second.
      )
  
    local function findTypedConverter(klass: reflect.Class?): ((unknown) -> Any)? =
//                 ^^^^^^^^^^^^^^^^^^ definition local findTypedConverter_216
//                                    ^^^^^ definition local klass_216
//                                                   ^^^^^ reference pkl . pkl 0.29.0 `pkl.reflect`/Class#
//                                                                          ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#
      if (klass == null) null
//        ^^^^^ reference local klass_216
      else converters.getOrNull(klass.reflectee) ?? findTypedConverter(klass.superclass)
//         ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Renderer#converters.
//                    ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#getOrNull().
//                              ^^^^^ reference local klass_216
//                                    ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.reflect`/Class#reflectee.
//                                                  ^^^^^^^^^^^^^^^^^^ reference local findTypedConverter_216
//                                                                     ^^^^^ reference local klass_216
//                                                                           ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.reflect`/Class#superclass.
  
    // endregion
    // region Rendering functions
  
    local function render(value: Any, path: List<PathEntry>, level: UInt?): String =
//                 ^^^^^^ definition local render_223
//                        ^^^^^ definition local value_223
//                               ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#
//                                    ^^^^ definition local path_223
//                                          ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                                               ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/PathEntry#
//                                                           ^^^^^ definition local level_223
//                                                                  ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/UInt#
//                                                                          ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
      if (value is String) renderString(value, level != null)
//        ^^^^^ reference local value_223
//                 ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                         ^^^^^^^^^^^^ reference local renderString_243
//                                      ^^^^^ reference local value_223
//                                             ^^^^^ reference local level_223
      else if (value is Boolean) value.toString()
//             ^^^^^ reference local value_223
//                      ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                               ^^^^^ reference local value_223
//                                     ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#toString().
      else if (value is Number) renderNumber(value)
//             ^^^^^ reference local value_223
//                      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                              ^^^^^^^^^^^^ reference local renderNumber_271
//                                           ^^^^^ reference local value_223
      else if (value is Null) "nil"
//             ^^^^^ reference local value_223
//                      ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Null#
      else if (value is Mapping|Map) renderMap(value, path, level)
//             ^^^^^ reference local value_223
//                      ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                              ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#
//                                   ^^^^^^^^^ reference local renderMap_276
//                                             ^^^^^ reference local value_223
//                                                    ^^^^ reference local path_223
//                                                          ^^^^^ reference local level_223
      else if (value is Listing|List) renderList(value, path, level)
//             ^^^^^ reference local value_223
//                      ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                              ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                                    ^^^^^^^^^^ reference local renderList_291
//                                               ^^^^^ reference local value_223
//                                                      ^^^^ reference local path_223
//                                                            ^^^^^ reference local level_223
      else if (value is Dynamic) renderDynamic(value, path, level)
//             ^^^^^ reference local value_223
//                      ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#
//                               ^^^^^^^^^^^^^ reference local renderDynamic_302
//                                             ^^^^^ reference local value_223
//                                                    ^^^^ reference local path_223
//                                                          ^^^^^ reference local level_223
      else if (value is base.RenderDirective) value.text
//             ^^^^^ reference local value_223
//                           ^^^^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RenderDirective#
//                                            ^^^^^ reference local value_223
//                                                  ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RenderDirective#text.
      else if (value is RenderDirective) "\(value.before ?? "")\(render(value.value, path, level))\(value.after ?? "")"
//             ^^^^^ reference local value_223
//                      ^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/RenderDirective#
//                                          ^^^^^ reference local value_223
//                                                ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/RenderDirective#before.
//                                                               ^^^^^^ reference local render_223
//                                                                      ^^^^^ reference local value_223
//                                                                            ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/RenderDirective#value.
//                                                                                   ^^^^ reference local path_223
//                                                                                         ^^^^^ reference local level_223
//                                                                                                  ^^^^^ reference local value_223
//                                                                                                        ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/RenderDirective#after.
      else if (value is Typed) renderDynamic(value, path, level)
//             ^^^^^ reference local value_223
//                      ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Typed#
//                             ^^^^^^^^^^^^^ reference local renderDynamic_302
//                                           ^^^^^ reference local value_223
//                                                  ^^^^ reference local path_223
//                                                        ^^^^^ reference local level_223
      else throw("Cannot render value of type `\(value.getClass())` as Lua.\nValue: \(value)")
//                                               ^^^^^ reference local value_223
//                                                     ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#getClass().
//                                                                                    ^^^^^ reference local value_223
  
    local function renderKey(key: Any, prefix: String): String =
//                 ^^^^^^^^^ definition local renderKey_236
//                           ^^^ definition local key_236
//                                ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#
//                                     ^^^^^^ definition local prefix_236
//                                             ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
      if (key is Null) throw("Lua table keys cannot be null")
//        ^^^ reference local key_236
//               ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Null#
      else if (key is Number && key.isNaN) throw("Lua table keys cannot be NaN")
//             ^^^ reference local key_236
//                    ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                              ^^^ reference local key_236
//                                  ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#isNaN.
      else if (key is Identifier) key
//             ^^^ reference local key_236
//                    ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Identifier#
//                                ^^^ reference local key_236
      else if (key is base.RenderDirective) key.text
//             ^^^ reference local key_236
//                         ^^^^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RenderDirective#
//                                          ^^^ reference local key_236
//                                              ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RenderDirective#text.
      else "\(prefix)[\(render(key, List(), null))]"
//            ^^^^^^ reference local prefix_236
//                      ^^^^^^ reference local render_223
//                             ^^^ reference local key_236
//                                  ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
  
    local function renderString(value: String, multiline: Boolean): String =
//                 ^^^^^^^^^^^^ definition local renderString_243
//                              ^^^^^ definition local value_243
//                                     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                             ^^^^^^^^^ definition local multiline_243
//                                                        ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                                                                  ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
      let (delim = if (value.contains("\"") && !value.contains("'")) "'" else "\"")
//         ^^^^^ definition local delim_244
//                     ^^^^^ reference local value_243
//                           ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#contains().
//                                              ^^^^^ reference local value_243
//                                                    ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#contains().
      if (multiline && value.contains(Regex(#"[^\n]\n++[^\n]"#)))
//        ^^^^^^^^^ reference local multiline_243
//                     ^^^^^ reference local value_243
//                           ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#contains().
//                                    ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
        // there are interior newlines, we'll do a multiline style
        if (value.contains(Regex(#"[\p{Cntrl}\#(delim)&&[^\n ]]"#)))
//          ^^^^^ reference local value_243
//                ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#contains().
//                         ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
//                                              ^^^^^ reference local delim_244
          // we need escapes, we'll do multiline with escaped newlines
          "\(delim)\(escapeString(value, delim, true))\(delim)"
//           ^^^^^ reference local delim_244
//                   ^^^^^^^^^^^^ reference local escapeString_259
//                                ^^^^^ reference local value_243
//                                       ^^^^^ reference local delim_244
//                                                      ^^^^^ reference local delim_244
        else
          IntSeq(0, 10)
//        ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/IntSeq().
            .map((n) -> "=".repeat(n))
//           ^^^ reference pkl . pkl 0.29.0 `pkl.base`/IntSeq#map().
//                ^ definition local n_252
//                          ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#repeat().
//                                 ^ reference local n_252
            .findOrNull((eq) -> !value.contains("]\(eq)]"))
//           ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#findOrNull().
//                       ^^ definition local eq_253
//                               ^^^^^ reference local value_243
//                                     ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#contains().
//                                                  ^^ reference local eq_253
            .ifNonNull((eq) -> "[\(eq)[\n\(value)]\(eq)]")
//           ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#ifNonNull().
//                      ^^ definition local eq_254
//                                 ^^ reference local eq_254
//                                         ^^^^^ reference local value_243
//                                                  ^^ reference local eq_254
          // if we can't find a good ]==] ending, use the other style
          ?? "\(delim)\(escapeString(value, delim, true))\(delim)"
//              ^^^^^ reference local delim_244
//                      ^^^^^^^^^^^^ reference local escapeString_259
//                                   ^^^^^ reference local value_243
//                                          ^^^^^ reference local delim_244
//                                                         ^^^^^ reference local delim_244
      else "\(delim)\(escapeString(value, delim, false))\(delim)"
//            ^^^^^ reference local delim_244
//                    ^^^^^^^^^^^^ reference local escapeString_259
//                                 ^^^^^ reference local value_243
//                                        ^^^^^ reference local delim_244
//                                                        ^^^^^ reference local delim_244
  
    local function escapeString(value: String, delim: String, multiline: Boolean): String =
//                 ^^^^^^^^^^^^ definition local escapeString_259
//                              ^^^^^ definition local value_259
//                                     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                             ^^^^^ definition local delim_259
//                                                    ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                            ^^^^^^^^^ definition local multiline_259
//                                                                       ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                                                                                 ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
      value.replaceAllMapped(Regex(#"[\p{Cntrl}\\\#(delim)&&[^ ]]"#), (match) ->
//    ^^^^^ reference local value_259
//          ^^^^^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#replaceAllMapped().
//                           ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
//                                                  ^^^^^ reference local delim_259
//                                                                     ^^^^^ definition local match_260
        if (match.value == "\u{7}") "\\a"
//          ^^^^^ reference local match_260
//                ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
        else if (match.value == "\u{8}") "\\b"
//               ^^^^^ reference local match_260
//                     ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
        else if (match.value == "\u{c}") "\\f"
//               ^^^^^ reference local match_260
//                     ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
        else if (match.value == "\n") if (multiline) "\\\n" else "\\n"
//               ^^^^^ reference local match_260
//                     ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                        ^^^^^^^^^ reference local multiline_259
        else if (match.value == "\r") "\\r"
//               ^^^^^ reference local match_260
//                     ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
        else if (match.value == "\t") "\\t"
//               ^^^^^ reference local match_260
//                     ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
        else if (match.value == "\u{b}") "\\v"
//               ^^^^^ reference local match_260
//                     ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
        else if (match.value == delim) "\\\(delim)"
//               ^^^^^ reference local match_260
//                     ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                              ^^^^^ reference local delim_259
//                                          ^^^^^ reference local delim_259
        else "\\u{\(match.value.codePoints.first.toRadixString(16))}")
//                  ^^^^^ reference local match_260
//                        ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                              ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#codePoints.
//                                         ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#first.
//                                               ^^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#toRadixString().
  
    local function renderNumber(value: Number): String =
//                 ^^^^^^^^^^^^ definition local renderNumber_271
//                              ^^^^^ definition local value_271
//                                     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                                              ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
      if (value.isNaN) "(0/0)"
//        ^^^^^ reference local value_271
//              ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#isNaN.
      else if (value.isInfinite) "(\(value.sign.toInt())/0)"
//             ^^^^^ reference local value_271
//                   ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#isInfinite.
//                                   ^^^^^ reference local value_271
//                                         ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#sign.
//                                              ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#toInt().
      else value.toString()
//         ^^^^^ reference local value_271
//               ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#toString().
  
    local function renderMap(value: Mapping|Map, path: List<PathEntry>, level: UInt?): String =
//                 ^^^^^^^^^ definition local renderMap_276
//                           ^^^^^ definition local value_276
//                                  ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                                          ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#
//                                               ^^^^ definition local path_276
//                                                     ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                                                          ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/PathEntry#
//                                                                      ^^^^^ definition local level_276
//                                                                             ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/UInt#
//                                                                                     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
      if (value.isEmpty) "{}" else
//        ^^^^^ reference local value_276
//              ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#isEmpty.
        let (map = value.toMap())
//           ^^^ definition local map_278
//                 ^^^^^ reference local value_276
//                       ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#toMap().
        let (multiline = map.length >= multilineThreshold && level != null && value is Mapping)
//           ^^^^^^^^^ definition local multiline_279
//                       ^^^ reference local map_278
//                           ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#length.
//                                     ^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Renderer#multilineThreshold.
//                                                           ^^^^^ reference local level_276
//                                                                            ^^^^^ reference local value_276
//                                                                                     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
        let (level_ = if (multiline) level!! + 1 else level)
//           ^^^^^^ definition local level__280
//                        ^^^^^^^^^ reference local multiline_279
//                                   ^^^^^ reference local level_276
//                                                    ^^^^^ reference local level_276
          (if (multiline) "{\n\(indent.repeat(level_!!))" else "{ ")
//             ^^^^^^^^^ reference local multiline_279
//                              ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Renderer#indent.
//                                     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#repeat().
//                                            ^^^^^^ reference local level__280
          + new Listing {
//              ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
            for (k,v in map) {
//               ^ definition local k_283
//                 ^ definition local v_283
//                      ^^^ reference local map_278
              let (k = convert(k, null))
//                 ^ definition local k_284
//                     ^^^^^^^ reference local convert_197
//                             ^ reference local k_283
              let (path = path.add(Key(k)))
//                 ^^^^ definition local path_285
//                        ^^^^ reference local path_276
//                             ^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#add().
//                                 ^^^ reference local Key_52
//                                     ^ reference local k_284
              "\(renderKey(k, "")) = \(render(convert(v, path), path, level_));"
//               ^^^^^^^^^ reference local renderKey_236
//                         ^ reference local k_284
//                                     ^^^^^^ reference local render_223
//                                            ^^^^^^^ reference local convert_197
//                                                    ^ reference local v_283
//                                                       ^^^^ reference local path_285
//                                                              ^^^^ reference local path_285
//                                                                    ^^^^^^ reference local level__280
            }
          }.join(if (multiline) "\n\(indent.repeat(level_!!))" else " ")
//          ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#join().
//                   ^^^^^^^^^ reference local multiline_279
//                                   ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Renderer#indent.
//                                          ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#repeat().
//                                                 ^^^^^^ reference local level__280
          + if (multiline) "\n\(indent.repeat(level!!))}" else " }"
//              ^^^^^^^^^ reference local multiline_279
//                              ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Renderer#indent.
//                                     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#repeat().
//                                            ^^^^^ reference local level_276
  
    local function renderList(value: Listing|List, path: List<PathEntry>, level: UInt?): String =
//                 ^^^^^^^^^^ definition local renderList_291
//                            ^^^^^ definition local value_291
//                                   ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                                           ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                                                 ^^^^ definition local path_291
//                                                       ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                                                            ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/PathEntry#
//                                                                        ^^^^^ definition local level_291
//                                                                               ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/UInt#
//                                                                                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
      if (value.isEmpty) "{}" else
//        ^^^^^ reference local value_291
//              ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#isEmpty.
        let (path = path.add(splatKey))
//           ^^^^ definition local path_293
//                  ^^^^ reference local path_291
//                       ^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#add().
//                           ^^^^^^^^ reference local splatKey_61
        let (multiline = value.length >= multilineThreshold && level != null && !(value is List))
//           ^^^^^^^^^ definition local multiline_294
//                       ^^^^^ reference local value_291
//                             ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#length.
//                                       ^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Renderer#multilineThreshold.
//                                                             ^^^^^ reference local level_291
//                                                                                ^^^^^ reference local value_291
//                                                                                         ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
        let (level_ = if (multiline) level!! + 1 else level)
//           ^^^^^^ definition local level__295
//                        ^^^^^^^^^ reference local multiline_294
//                                   ^^^^^ reference local level_291
//                                                    ^^^^^ reference local level_291
          (if (multiline) "{\n\(indent.repeat(level_!!))" else "{ ")
//             ^^^^^^^^^ reference local multiline_294
//                              ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Renderer#indent.
//                                     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#repeat().
//                                            ^^^^^^ reference local level__295
          + value.toList()
//          ^^^^^ reference local value_291
//                ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#toList().
            .map((it) -> render(convert(it, path), path, level_))
//           ^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#map().
//                ^^ definition local it_298
//                       ^^^^^^ reference local render_223
//                              ^^^^^^^ reference local convert_197
//                                      ^^ reference local it_298
//                                          ^^^^ reference local path_293
//                                                 ^^^^ reference local path_293
//                                                       ^^^^^^ reference local level__295
            .join(if (multiline) ",\n\(indent.repeat(level_!!))" else ", ")
//           ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#join().
//                    ^^^^^^^^^ reference local multiline_294
//                                     ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Renderer#indent.
//                                            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#repeat().
//                                                   ^^^^^^ reference local level__295
          + if (multiline) "\n\(indent.repeat(level!!))}" else " }"
//              ^^^^^^^^^ reference local multiline_294
//                              ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Renderer#indent.
//                                     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#repeat().
//                                            ^^^^^ reference local level_291
  
    local function renderDynamic(value: Dynamic|Typed, path: List<PathEntry>, level: UInt?): String =
//                 ^^^^^^^^^^^^^ definition local renderDynamic_302
//                               ^^^^^ definition local value_302
//                                      ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#
//                                              ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Typed#
//                                                     ^^^^ definition local path_302
//                                                           ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                                                                ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/PathEntry#
//                                                                            ^^^^^ definition local level_302
//                                                                                   ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/UInt#
//                                                                                           ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
      let (list = if (value is Dynamic) value.toList() else List())
//         ^^^^ definition local list_303
//                    ^^^^^ reference local value_302
//                             ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#
//                                      ^^^^^ reference local value_302
//                                            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#toList().
//                                                          ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
      let (map = value.toMap())
//         ^^^ definition local map_304
//               ^^^^^ reference local value_302
//                     ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Typed#toMap().
      // note: Map.keys.toList() is O(1), other ways of converting are O(n) (as of Pkl 0.25.3)
      let (entries = map.keys.toList().mapNonNull((k_) ->
//         ^^^^^^^ definition local entries_306
//                   ^^^ reference local map_304
//                       ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#keys.
//                            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Set#toList().
//                                     ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#mapNonNull().
//                                                 ^^ definition local k__306
        let (isProp = k_ is String)
//           ^^^^^^ definition local isProp_307
//                    ^^ reference local k__306
//                          ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
        let (k = if (isProp) k_ else convert(k_, null))
//           ^ definition local k_308
//                   ^^^^^^ reference local isProp_307
//                           ^^ reference local k__306
//                                   ^^^^^^^ reference local convert_197
//                                           ^^ reference local k__306
        let (path = path.add(if (isProp) Prop(k) else Key(k)))
//           ^^^^ definition local path_309
//                  ^^^^ reference local path_302
//                       ^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#add().
//                               ^^^^^^ reference local isProp_307
//                                       ^^^^ reference local Prop_44
//                                            ^ reference local k_308
//                                                    ^^^ reference local Key_52
//                                                        ^ reference local k_308
        let (v = convert(map[k_], path))
//           ^ definition local v_310
//               ^^^^^^^ reference local convert_197
//                       ^^^ reference local map_304
//                           ^^ reference local k__306
//                                ^^^^ reference local path_309
          if (omitNullProperties && v == null && isProp) null
//            ^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Renderer#omitNullProperties.
//                                  ^ reference local v_310
//                                               ^^^^^^ reference local isProp_307
          else Pair(k, Pair(path, v))
//             ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair().
//                  ^ reference local k_308
//                     ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair().
//                          ^^^^ reference local path_309
//                                ^ reference local v_310
      ))
        if (entries.isEmpty && list.isEmpty) "{}" else
//          ^^^^^^^ reference local entries_306
//                  ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#isEmpty.
//                             ^^^^ reference local list_303
//                                  ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#isEmpty.
          let (multiline = entries.length + list.length >= multilineThreshold && level != null)
//             ^^^^^^^^^ definition local multiline_315
//                         ^^^^^^^ reference local entries_306
//                                 ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#length.
//                                          ^^^^ reference local list_303
//                                               ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#length.
//                                                         ^^^^^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Renderer#multilineThreshold.
//                                                                               ^^^^^ reference local level_302
          let (level_ = if (multiline) level!! + 1 else level)
//             ^^^^^^ definition local level__316
//                          ^^^^^^^^^ reference local multiline_315
//                                     ^^^^^ reference local level_302
//                                                      ^^^^^ reference local level_302
          let (listPath = if (list.isEmpty) path else path.add(splatKey))
//             ^^^^^^^^ definition local listPath_317
//                            ^^^^ reference local list_303
//                                 ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#isEmpty.
//                                          ^^^^ reference local path_302
//                                                    ^^^^ reference local path_302
//                                                         ^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#add().
//                                                             ^^^^^^^^ reference local splatKey_61
            (if (multiline) "{\n\(indent.repeat(level_!!))" else "{ ")
//               ^^^^^^^^^ reference local multiline_315
//                                ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Renderer#indent.
//                                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#repeat().
//                                              ^^^^^^ reference local level__316
            + new Listing {
//                ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
              for (kpv in entries) { // kpv = Pair(key, Pair(path, value))
//                 ^^^ definition local kpv_320
//                        ^^^^^^^ reference local entries_306
                "\(renderKey(kpv.key, "")) = \(render(kpv.value.value, kpv.value.key, level_));"
//                 ^^^^^^^^^ reference local renderKey_236
//                           ^^^ reference local kpv_320
//                               ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#key.
//                                             ^^^^^^ reference local render_223
//                                                    ^^^ reference local kpv_320
//                                                        ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#value.
//                                                              ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#value.
//                                                                     ^^^ reference local kpv_320
//                                                                         ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#value.
//                                                                               ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#key.
//                                                                                    ^^^^^^ reference local level__316
              }
              for (i,elt in list) {
//                 ^ definition local i_323
//                   ^^^ definition local elt_323
//                          ^^^^ reference local list_303
                when (i < list.lastIndex) {
//                    ^ reference local i_323
//                        ^^^^ reference local list_303
//                             ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#lastIndex.
                  "\(render(convert(elt, listPath), listPath, level_)),"
//                   ^^^^^^ reference local render_223
//                          ^^^^^^^ reference local convert_197
//                                  ^^^ reference local elt_323
//                                       ^^^^^^^^ reference local listPath_317
//                                                  ^^^^^^^^ reference local listPath_317
//                                                            ^^^^^^ reference local level__316
                } else {
                  render(convert(list.last, listPath), listPath, level_)
//                ^^^^^^ reference local render_223
//                       ^^^^^^^ reference local convert_197
//                               ^^^^ reference local list_303
//                                    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#last.
//                                          ^^^^^^^^ reference local listPath_317
//                                                     ^^^^^^^^ reference local listPath_317
//                                                               ^^^^^^ reference local level__316
                }
              }
            }.join(if (multiline) "\n\(indent.repeat(level_!!))" else " ")
//            ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#join().
//                     ^^^^^^^^^ reference local multiline_315
//                                     ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Renderer#indent.
//                                            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#repeat().
//                                                   ^^^^^^ reference local level__316
            + if (multiline) "\n\(indent.repeat(level!!))}" else " }"
//                ^^^^^^^^^ reference local multiline_315
//                                ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Renderer#indent.
//                                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#repeat().
//                                              ^^^^^ reference local level_302
  
    // endregion
  }
  
  // endregion
  // region Parser
  
  /// A parser for a strict subset of Lua.
  ///
  /// This parser can handle Lua files that consist of comments and `key=value` lines, where the key is a Lua identifier
  /// and the value is a literal string, number, boolean, `nil`, or table. Expressions are not supported. At the top level
  /// the key cannot be the identifier `_ENV` unless it is followed by a subscript expression, as in `_ENV[key]=value`.
  /// An `_ENV` subscript like this allows the top-level to contain keys that are not Lua identifiers.
  ///
  /// When parsing nested tables, tables using key/value syntax (`{ [key] = value; â¦ }`) will be parsed as list elements
  /// if the key is integral and equal to the next unused index, otherwise they will be treated as map entries. Be aware
  /// that the order of keys is important here; `{ [0] = "a"; [1] = "b"; [2] = "c" }` will be parsed as a list whereas
  /// `{ [2] = "c"; [1] = "b"; [0] = "a" }` will be parsed as a map despite being equivalent Lua tables. See [useDynamic]
  /// for details on the type used to represent nested tables.
  ///
  /// When parsing `_ENV[key]=value` statements at the top-level, if the subscript key is an integral value and
  /// [useDynamic] is [true] then it will be parsed as a list element in the same fashion as nested tables. However if
  /// [useDynamic] is [false] then integral keys will not be treated any differently than other keys.
  ///
  /// Lua values are mapped to Pkl values as follows:
  ///
  /// **Lua type** | **Pkl type**
  /// -------------|-------------
  /// nil          | [Null]
  /// boolean      | [Boolean]
  /// number       | [Number]
  /// string       | [String]
  /// table        | [Dynamic] or [Mapping]/[Listing] depending on [Parser.useDynamic]
  ///
  /// # Example
  ///
  /// This is a sample Lua file that can be parsed with this Parser.
  /// ```lua
  /// --[[
  /// This file has a header comment.
  /// ]]
  /// foo="bar"
  /// count=2
  /// -- line comment here
  /// enable=true
  /// frob=nil
  /// ports={80, 443}
  /// ips={
  ///   localhost = "127.0.0.1";
  ///   ["example.com"] = "93.184.215.14";
  /// }
  /// _ENV[" "]="space"
  /// ```
  class Parser {
//      ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#
//      documentation
//      > A parser for a strict subset of Lua.
//      > 
//      > This parser can handle Lua files that consist of comments and `key=value` lines, where the key is a Lua identifier
//      > and the value is a literal string, number, boolean, `nil`, or table. Expressions are not supported. At the top level
//      > the key cannot be the identifier `_ENV` unless it is followed by a subscript expression, as in `_ENV`key`=value`.
//      > An `_ENV` subscript like this allows the top-level to contain keys that are not Lua identifiers.
//      > 
//      > When parsing nested tables, tables using key/value syntax (`{ `key` = value; â¦ }`) will be parsed as list elements
//      > if the key is integral and equal to the next unused index, otherwise they will be treated as map entries. Be aware
//      > that the order of keys is important here; `{ `0` = "a"; `1` = "b"; `2` = "c" }` will be parsed as a list whereas
//      > `{ `2` = "c"; `1` = "b"; `0` = "a" }` will be parsed as a map despite being equivalent Lua tables. See [`useDynamic`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/pkl.lua/lua.pkl#L395,C3)
//      > for details on the type used to represent nested tables.
//      > 
//      > When parsing `_ENV`key`=value` statements at the top-level, if the subscript key is an integral value and
//      > [`useDynamic`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/pkl.lua/lua.pkl#L395,C3) is `true` then it will be parsed as a list element in the same fashion as nested tables. However if
//      > [`useDynamic`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/pkl.lua/lua.pkl#L395,C3) is `false` then integral keys will not be treated any differently than other keys.
//      > 
//      > Lua values are mapped to Pkl values as follows:
//      > 
//      > **Lua type** | **Pkl type**
//      > -------------|-------------
//      > nil          | [`Null`](pkl-lsp://stdlib/base.pkl#L59,C16)
//      > boolean      | [`Boolean`](pkl-lsp://stdlib/base.pkl#L1058,C16)
//      > number       | [`Number`](pkl-lsp://stdlib/base.pkl#L585,C25)
//      > string       | [`String`](pkl-lsp://stdlib/base.pkl#L1094,C16)
//      > table        | [`Dynamic`](pkl-lsp://stdlib/base.pkl#L1808,C7) or [`Mapping`](pkl-lsp://stdlib/base.pkl#L2038,C7)/[`Listing`](pkl-lsp://stdlib/base.pkl#L1860,C7) depending on [`Parser.useDynamic`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/pkl.lua/lua.pkl#L395,C3)
//      > 
//      > # Example
//      > 
//      > This is a sample Lua file that can be parsed with this Parser.
//      > ```lua
//      > --[[
//      > This file has a header comment.
//      > ]]
//      > foo="bar"
//      > count=2
//      > -- line comment here
//      > enable=true
//      > frob=nil
//      > ports={80, 443}
//      > ips={
//      >   localhost = "127.0.0.1";
//      >   `"example.com"` = "93.184.215.14";
//      > }
//      > _ENV`" "`="space"
//      > ```
    /// Determines what the parser produces when parsing Lua.
    ///
    /// If [true] (the default), the parse result is a [Dynamic], otherwise it's a [Mapping].
    ///
    /// For nested tables, if [true] every nested table is a [Dynamic], otherwise a nested table will be a [Mapping] if it
    /// contains key/value pairs, a [Listing] if it contains elements, or it will throw an error if it contains both. If
    /// [false] then empty tables will be represented as empty [Listing]s.
    ///
    /// If [useDynamic] is [true], Lua keys named "default" will be shadowed by the built-in [Dynamic.default] property.
    useDynamic: Boolean = true
//  ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#useDynamic.
//  documentation
//  > Determines what the parser produces when parsing Lua.
//  > 
//  > If `true` (the default), the parse result is a [`Dynamic`](pkl-lsp://stdlib/base.pkl#L1808,C7), otherwise it's a [`Mapping`](pkl-lsp://stdlib/base.pkl#L2038,C7).
//  > 
//  > For nested tables, if `true` every nested table is a [`Dynamic`](pkl-lsp://stdlib/base.pkl#L1808,C7), otherwise a nested table will be a [`Mapping`](pkl-lsp://stdlib/base.pkl#L2038,C7) if it
//  > contains key/value pairs, a [`Listing`](pkl-lsp://stdlib/base.pkl#L1860,C7) if it contains elements, or it will throw an error if it contains both. If
//  > `false` then empty tables will be represented as empty [`Listing`](pkl-lsp://stdlib/base.pkl#L1860,C7)s.
//  > 
//  > If [`useDynamic`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/pkl.lua/lua.pkl#L395,C3) is `true`, Lua keys named "default" will be shadowed by the built-in [`Dynamic.default`](pkl-lsp://stdlib/base.pkl#L1810,C3) property.
//              ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
  
    /// Value converters to apply to parsed values.
    ///
    /// For further information see [ValueRenderer.converters]. Table entries with string keys are treated as properties.
    /// This means paths like `x[foo]` will never match anything.
    converters: Mapping<(Class|String), (unknown) -> Any>
//  ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#converters.
//  documentation
//  > Value converters to apply to parsed values.
//  > 
//  > For further information see [`ValueRenderer.converters`](pkl-lsp://stdlib/base.pkl#L308,C3). Table entries with string keys are treated as properties.
//  > This means paths like `x`foo`` will never match anything.
//              ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                       ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Class#
//                             ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                   ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#
  
    // region Parsing functions
  
    /// Parses [source] as a strict subset of Lua.
    ///
    /// Throws if an error occurs during parsing.
    ///
    /// If [source] is a [Resource], the resource URI is included in parse error messages.
    ///
    /// In the absence of converters this will return a [Dynamic] or a [Mapping<String, Value>][Mapping].
    function parse(source: Resource|String): unknown =
//           ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#parse().
//           documentation
//           > Parses [`source`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/pkl.lua/lua.pkl#L412,C18) as a strict subset of Lua.
//           > 
//           > Throws if an error occurs during parsing.
//           > 
//           > If [`source`](file:///Users/thomas/src/github.com/apple/pkl-pantry/packages/pkl.lua/lua.pkl#L412,C18) is a [`Resource`](pkl-lsp://stdlib/base.pkl#L519,C7), the resource URI is included in parse error messages.
//           > 
//           > In the absence of converters this will return a [`Dynamic`](pkl-lsp://stdlib/base.pkl#L1808,C7) or a [`Mapping<String, Value>`](pkl-lsp://stdlib/base.pkl#L2038,C7).
//                 ^^^^^^ definition local source_412
//                         ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Resource#
//                                  ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
      let (uri = if (source is Resource) source.uri else null)
//         ^^^ definition local uri_413
//                   ^^^^^^ reference local source_412
//                             ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Resource#
//                                       ^^^^^^ reference local source_412
//                                              ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Resource#uri.
      let (source = if (source is Resource) source.text else source)
//         ^^^^^^ definition local source_414
//                      ^^^^^^ reference local source_412
//                                ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Resource#
//                                          ^^^^^^ reference local source_412
//                                                 ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Resource#text.
//                                                           ^^^^^^ reference local source_412
      let (source = source.replaceAll(Regex(#"\r\n?|\n\r"#), "\n")) // normalize line endings
//         ^^^^^^ definition local source_415
//                  ^^^^^^ reference local source_414
//                         ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#replaceAll().
//                                    ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
      let (tokens = tokenRegex.findMatchesIn(source))
//         ^^^^^^ definition local tokens_416
//                  ^^^^^^^^^^ reference local tokenRegex_744
//                             ^^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex#findMatchesIn().
//                                           ^^^^^^ reference local source_415
      let (state: ParseState = tokens.fold(new ParseState { path = List("^") }, (state: ParseState, token) ->
//         ^^^^^ definition local state_417
//                ^^^^^^^^^^ reference local ParseState_642
//                             ^^^^^^ reference local tokens_416
//                                    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#fold().
//                                             ^^^^^^^^^^ reference local ParseState_642
//                                                          ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#path.
//                                                                 ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
//                                                                               ^^^^^ definition local state_417
//                                                                                      ^^^^^^^^^^ reference local ParseState_642
//                                                                                                  ^^^^^ definition local token_417
        // the way parsing works is by folding over a list of tokens and maintaining state in the ParseState object.
        // since we don't have enums with associated values, we instead rely on knowing which combinations of state fields
        // are reachable and which combinations will never occur. This is a complete list of all valid combinations, where
        // the `type` column is "root" for ParseState and "child" for ChildParseState and the other columns are fields:
        //
        //  # | type  |  op     |  key   | negate | valid next token
        // ---|-------|---------|--------|--------|-----------------
        // 1a | root  | null    | null   | null   | identifier or ";" or EOF
        // 1b | child | null    | null   | null   | identifier or value or "[" or "}" or "-"
        //  2 | child | null    | null   | bool   | number or "-"
        //  3 | root  | null    | "_ENV" | null   | "["
        //  4 | any   | null    | !nullÂ¹ | null   | "="
        //  5 | any   | "="     | !null  | null   | value or "-" or "{"
        //  6 | any   | "="     | !null  | bool   | number or "-"
        //  7 | any   | "["     | null   | null   | value or "-" or "{"
        //  8 | any   | "["     | null   | bool   | number or "-"
        //  9 | any   | "key"   | !null  | null   | "]"
        // 10 | any   | "]"     | !null  | null   | "="
        // 11 | child | "value" | null   | null   | "," or ";" or "}"
        //
        // Â¹In state #4, if the type is root then the key cannot be "_ENV" (see state #2).
        if (validateToken(token, source, uri).value.startsWith("--")) state // skip comment
//          ^^^^^^^^^^^^^ reference local validateToken_781
//                        ^^^^^ reference local token_417
//                               ^^^^^^ reference local source_415
//                                       ^^^ reference local uri_413
//                                            ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                                  ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#startsWith().
//                                                                    ^^^^^ reference local state_417
        else if (state.op == null)
//               ^^^^^ reference local state_417
//                     ^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#op.
          if (state.key == null)
//            ^^^^^ reference local state_417
//                  ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#key.
            if (state is ChildParseState)
//              ^^^^^ reference local state_417
//                       ^^^^^^^^^^^^^^^ reference local ChildParseState_689
              // state #1b/#2, state is ChildParseState
              if (state.negate == null && token.value.matches(identifierRegex))
//                ^^^^^ reference local state_417
//                      ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#negate.
//                                        ^^^^^ reference local token_417
//                                              ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                                    ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#matches().
//                                                            ^^^^^^^^^^^^^^^ reference local identifierRegex_795
                if (token.value is Keyword) throwError("Unexpected keyword `\(token.value)`", source, uri, token)
//                  ^^^^^ reference local token_417
//                        ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                 ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Keyword#
//                                          ^^^^^^^^^^ reference local throwError_826
//                                                                            ^^^^^ reference local token_417
//                                                                                  ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                                                                            ^^^^^^ reference local source_415
//                                                                                                    ^^^ reference local uri_413
//                                                                                                         ^^^^^ reference local token_417
                else (state) { key = token.value; mapStart = super.mapStart ?? token } // -> #4
//                    ^^^^^ reference local state_417
//                             ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#key.
//                                   ^^^^^ reference local token_417
//                                         ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                                ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#mapStart.
//                                                                 ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#mapStart.
//                                                                             ^^^^^ reference local token_417
              else if (state.negate == null && token.value == "[")
//                     ^^^^^ reference local state_417
//                           ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#negate.
//                                             ^^^^^ reference local token_417
//                                                   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
                (state) { op = "[" } // -> #7
//               ^^^^^ reference local state_417
//                        ^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#op.
              else if (state.negate == null && token.value == "}")
//                     ^^^^^ reference local state_417
//                           ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#negate.
//                                             ^^^^^ reference local token_417
//                                                   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
                let (value = state.toValue(useDynamic, source, uri))
//                   ^^^^^ definition local value_450
//                           ^^^^^ reference local state_417
//                                 ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#toValue().
//                                         ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#useDynamic.
//                                                     ^^^^^^ reference local source_415
//                                                             ^^^ reference local uri_413
                  let (parent = state.parent)
//                     ^^^^^^ definition local parent_451
//                              ^^^^^ reference local state_417
//                                    ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#parent.
                    if (parent.op == "[") // parent is in state #7
//                      ^^^^^^ reference local parent_451
//                             ^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#op.
                      parent.setKey(convertKey(value, state), state.brace) // -> #9
//                    ^^^^^^ reference local parent_451
//                           ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#setKey().
//                                  ^^^^^^^^^^ reference local convertKey_622
//                                             ^^^^^ reference local value_450
//                                                    ^^^^^ reference local state_417
//                                                            ^^^^^ reference local state_417
//                                                                  ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#brace.
                    else
                      parent.put(convert(value, parent.path.add(Prop(parent.key!!))), state.brace, useDynamic) // -> #11 or #1a
//                    ^^^^^^ reference local parent_451
//                           ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#put().
//                               ^^^^^^^ reference local convert_616
//                                       ^^^^^ reference local value_450
//                                              ^^^^^^ reference local parent_451
//                                                     ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#path.
//                                                          ^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#add().
//                                                              ^^^^ reference local Prop_44
//                                                                   ^^^^^^ reference local parent_451
//                                                                          ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#key.
//                                                                                    ^^^^^ reference local state_417
//                                                                                          ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#brace.
//                                                                                                 ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#useDynamic.
              else if (token.value == "-")
//                     ^^^^^ reference local token_417
//                           ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
                state.negate() // -> #2
//              ^^^^^ reference local state_417
//                    ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#negate().
              else
                let (value = parseValue(source, uri, state, token, "identifier or value or [ or }"))
//                   ^^^^^ definition local value_459
//                           ^^^^^^^^^^ reference local parseValue_534
//                                      ^^^^^^ reference local source_415
//                                              ^^^ reference local uri_413
//                                                   ^^^^^ reference local state_417
//                                                          ^^^^^ reference local token_417
                  state.add(convert(value, state.path.add(splatKey)), token) // -> #11
//                ^^^^^ reference local state_417
//                      ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#add().
//                          ^^^^^^^ reference local convert_616
//                                  ^^^^^ reference local value_459
//                                         ^^^^^ reference local state_417
//                                               ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#path.
//                                                    ^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#add().
//                                                        ^^^^^^^^ reference local splatKey_61
//                                                                    ^^^^^ reference local token_417
            else
              // state #1a, state is ParseState
              if (token.value.matches(identifierRegex))
//                ^^^^^ reference local token_417
//                      ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                            ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#matches().
//                                    ^^^^^^^^^^^^^^^ reference local identifierRegex_795
                if (token.value is Keyword) throwError("Unexpected keyword `\(token.value)`", source, uri, token)
//                  ^^^^^ reference local token_417
//                        ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                 ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Keyword#
//                                          ^^^^^^^^^^ reference local throwError_826
//                                                                            ^^^^^ reference local token_417
//                                                                                  ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                                                                            ^^^^^^ reference local source_415
//                                                                                                    ^^^ reference local uri_413
//                                                                                                         ^^^^^ reference local token_417
                else (state) { key = token.value } // -> #4
//                    ^^^^^ reference local state_417
//                             ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#key.
//                                   ^^^^^ reference local token_417
//                                         ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
              else if (token.value == ";")
//                     ^^^^^ reference local token_417
//                           ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
                state // stay in state #1a
//              ^^^^^ reference local state_417
              else throwExpected("identifier or ;", source, uri, token)
//                 ^^^^^^^^^^^^^ reference local throwExpected_846
//                                                  ^^^^^^ reference local source_415
//                                                          ^^^ reference local uri_413
//                                                               ^^^^^ reference local token_417
          else if (state.key == "_ENV" && !(state is ChildParseState))
//                 ^^^^^ reference local state_417
//                       ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#key.
//                                          ^^^^^ reference local state_417
//                                                   ^^^^^^^^^^^^^^^ reference local ChildParseState_689
            // state #2, state is ParseState
            if (token.value == "[")
//              ^^^^^ reference local token_417
//                    ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
              (state) { key = null; op = "[" } // -> #7
//             ^^^^^ reference local state_417
//                      ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#key.
//                                  ^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#op.
            else if (token.value == "=") throwError("_ENV cannot be assigned to directly", source, uri, token)
//                   ^^^^^ reference local token_417
//                         ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                       ^^^^^^^^^^ reference local throwError_826
//                                                                                         ^^^^^^ reference local source_415
//                                                                                                 ^^^ reference local uri_413
//                                                                                                      ^^^^^ reference local token_417
            else throwExpected("[", source, uri, token)
//               ^^^^^^^^^^^^^ reference local throwExpected_846
//                                  ^^^^^^ reference local source_415
//                                          ^^^ reference local uri_413
//                                               ^^^^^ reference local token_417
          else if (token.value == "=") // key is !null
//                 ^^^^^ reference local token_417
//                       ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
            // state #4
            (state) { op = "=" } // -> #5
//           ^^^^^ reference local state_417
//                    ^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#op.
          else throwExpected("=", source, uri, token)
//             ^^^^^^^^^^^^^ reference local throwExpected_846
//                                ^^^^^^ reference local source_415
//                                        ^^^ reference local uri_413
//                                             ^^^^^ reference local token_417
        else if (state.op == "=")
//               ^^^^^ reference local state_417
//                     ^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#op.
          // state #5/#6
          if (token.value == "-")
//            ^^^^^ reference local token_417
//                  ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
            state.negate() // -> #6
//          ^^^^^ reference local state_417
//                ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#negate().
          else if (token.value == "{" && state.negate == null)
//                 ^^^^^ reference local token_417
//                       ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                       ^^^^^ reference local state_417
//                                             ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#negate.
            new ChildParseState { parent = state; brace = token; path = state.path.add(Prop(state.key!!)) } // -> #1b
//              ^^^^^^^^^^^^^^^ reference local ChildParseState_689
//                                ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#parent.
//                                         ^^^^^ reference local state_417
//                                                ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#brace.
//                                                        ^^^^^ reference local token_417
//                                                               ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#path.
//                                                                      ^^^^^ reference local state_417
//                                                                            ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#path.
//                                                                                 ^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#add().
//                                                                                     ^^^^ reference local Prop_44
//                                                                                          ^^^^^ reference local state_417
//                                                                                                ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#key.
          else
            let (value = parseValue(source, uri, state, token, "value or {"))
//               ^^^^^ definition local value_486
//                       ^^^^^^^^^^ reference local parseValue_534
//                                  ^^^^^^ reference local source_415
//                                          ^^^ reference local uri_413
//                                               ^^^^^ reference local state_417
//                                                      ^^^^^ reference local token_417
              state.put(convert(value, state.path.add(Prop(state.key!!))), token, useDynamic) // -> #11 or #1a
//            ^^^^^ reference local state_417
//                  ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#put().
//                      ^^^^^^^ reference local convert_616
//                              ^^^^^ reference local value_486
//                                     ^^^^^ reference local state_417
//                                           ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#path.
//                                                ^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#add().
//                                                    ^^^^ reference local Prop_44
//                                                         ^^^^^ reference local state_417
//                                                               ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#key.
//                                                                         ^^^^^ reference local token_417
//                                                                                ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#useDynamic.
        else if (state.op == "[")
//               ^^^^^ reference local state_417
//                     ^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#op.
          // state #7/#8
          if (token.value == "-") state.negate() // -> #8
//            ^^^^^ reference local token_417
//                  ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                ^^^^^ reference local state_417
//                                      ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#negate().
          else if (token.value == "{" && state.negate == null)
//                 ^^^^^ reference local token_417
//                       ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                       ^^^^^ reference local state_417
//                                             ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#negate.
            new ChildParseState { parent = state; brace = token; path = List() } // -> #1b
//              ^^^^^^^^^^^^^^^ reference local ChildParseState_689
//                                ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#parent.
//                                         ^^^^^ reference local state_417
//                                                ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#brace.
//                                                        ^^^^^ reference local token_417
//                                                               ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#path.
//                                                                      ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
          else
            let (value = parseValue(source, uri, state, token, "value or {"))
//               ^^^^^ definition local value_494
//                       ^^^^^^^^^^ reference local parseValue_534
//                                  ^^^^^^ reference local source_415
//                                          ^^^ reference local uri_413
//                                               ^^^^^ reference local state_417
//                                                      ^^^^^ reference local token_417
              if (value == null) throwError("Table key cannot be nil", source, uri, token)
//                ^^^^^ reference local value_494
//                               ^^^^^^^^^^ reference local throwError_826
//                                                                     ^^^^^^ reference local source_415
//                                                                             ^^^ reference local uri_413
//                                                                                  ^^^^^ reference local token_417
              else if (value is Number && value.isNaN) throwError("Table key cannot be NaN", source, uri, token)
//                     ^^^^^ reference local value_494
//                              ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                                        ^^^^^ reference local value_494
//                                              ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#isNaN.
//                                                     ^^^^^^^^^^ reference local throwError_826
//                                                                                           ^^^^^^ reference local source_415
//                                                                                                   ^^^ reference local uri_413
//                                                                                                        ^^^^^ reference local token_417
              else state.setKey(convertKey(value, state), token) // -> #9
//                 ^^^^^ reference local state_417
//                       ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#setKey().
//                              ^^^^^^^^^^ reference local convertKey_622
//                                         ^^^^^ reference local value_494
//                                                ^^^^^ reference local state_417
//                                                        ^^^^^ reference local token_417
        else if (state.op == "key")
//               ^^^^^ reference local state_417
//                     ^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#op.
          // state #9
          if (token.value == "]") (state) { op = "]" } // -> #10
//            ^^^^^ reference local token_417
//                  ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                 ^^^^^ reference local state_417
//                                          ^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#op.
          else throwExpected("]", source, uri, token)
//             ^^^^^^^^^^^^^ reference local throwExpected_846
//                                ^^^^^^ reference local source_415
//                                        ^^^ reference local uri_413
//                                             ^^^^^ reference local token_417
        else if (state.op == "]")
//               ^^^^^ reference local state_417
//                     ^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#op.
          // state #10
          if (token.value == "=") (state) { op = "=" } // -> #5
//            ^^^^^ reference local token_417
//                  ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                 ^^^^^ reference local state_417
//                                          ^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#op.
          else throwExpected("=", source, uri, token)
//             ^^^^^^^^^^^^^ reference local throwExpected_846
//                                ^^^^^^ reference local source_415
//                                        ^^^ reference local uri_413
//                                             ^^^^^ reference local token_417
        else if (state.op == "value" && state is ChildParseState)
//               ^^^^^ reference local state_417
//                     ^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#op.
//                                      ^^^^^ reference local state_417
//                                               ^^^^^^^^^^^^^^^ reference local ChildParseState_689
          // state #11, state is ChildParseState
          if (token.value is ","|";") (state) { op = null } // -> #1b
//            ^^^^^ reference local token_417
//                  ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                     ^^^^^ reference local state_417
//                                              ^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#op.
          else if (token.value == "}")
//                 ^^^^^ reference local token_417
//                       ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
            let (value = state.toValue(useDynamic, source, uri))
//               ^^^^^ definition local value_510
//                       ^^^^^ reference local state_417
//                             ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#toValue().
//                                     ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#useDynamic.
//                                                 ^^^^^^ reference local source_415
//                                                         ^^^ reference local uri_413
              let (parent = state.parent)
//                 ^^^^^^ definition local parent_511
//                          ^^^^^ reference local state_417
//                                ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#parent.
                if (parent.op == "[") // parent is in state #7
//                  ^^^^^^ reference local parent_511
//                         ^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#op.
                  parent.setKey(convertKey(value, parent), state.brace) // -> #9
//                ^^^^^^ reference local parent_511
//                       ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#setKey().
//                              ^^^^^^^^^^ reference local convertKey_622
//                                         ^^^^^ reference local value_510
//                                                ^^^^^^ reference local parent_511
//                                                         ^^^^^ reference local state_417
//                                                               ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#brace.
                else
                  parent.put(convert(value, parent.path.add(Prop(parent.key!!))), state.brace, useDynamic) // -> #11 or #1a
//                ^^^^^^ reference local parent_511
//                       ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#put().
//                           ^^^^^^^ reference local convert_616
//                                   ^^^^^ reference local value_510
//                                          ^^^^^^ reference local parent_511
//                                                 ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#path.
//                                                      ^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#add().
//                                                          ^^^^ reference local Prop_44
//                                                               ^^^^^^ reference local parent_511
//                                                                      ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#key.
//                                                                                ^^^^^ reference local state_417
//                                                                                      ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#brace.
//                                                                                             ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#useDynamic.
          else throwExpected(", or ; or }", source, uri, token)
//             ^^^^^^^^^^^^^ reference local throwExpected_846
//                                          ^^^^^^ reference local source_415
//                                                  ^^^ reference local uri_413
//                                                       ^^^^^ reference local token_417
        else
          // invalid state, we can't ever get here
          throwError("Internal error; invalid state", source, uri, token)
//        ^^^^^^^^^^ reference local throwError_826
//                                                    ^^^^^^ reference local source_415
//                                                            ^^^ reference local uri_413
//                                                                 ^^^^^ reference local token_417
      ))
        // We're at EOF, check if we allow EOF here
        if (state.negate != null) throwExpected("number", source, uri, null) // state #2/#6/#8
//          ^^^^^ reference local state_417
//                ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#negate.
//                                ^^^^^^^^^^^^^ reference local throwExpected_846
//                                                        ^^^^^^ reference local source_415
//                                                                ^^^ reference local uri_413
        else if (state.op == null)
//               ^^^^^ reference local state_417
//                     ^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#op.
          if (state.key == null)
//            ^^^^^ reference local state_417
//                  ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#key.
            if (state is ChildParseState) throwExpected("identifier or value or [ or }", source, uri, null) // state #1b
//              ^^^^^ reference local state_417
//                       ^^^^^^^^^^^^^^^ reference local ChildParseState_689
//                                        ^^^^^^^^^^^^^ reference local throwExpected_846
//                                                                                       ^^^^^^ reference local source_415
//                                                                                               ^^^ reference local uri_413
            else convert(state.toValue(useDynamic, source, uri), state.path) // state #1a
//               ^^^^^^^ reference local convert_616
//                       ^^^^^ reference local state_417
//                             ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#toValue().
//                                     ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#useDynamic.
//                                                 ^^^^^^ reference local source_415
//                                                         ^^^ reference local uri_413
//                                                               ^^^^^ reference local state_417
//                                                                     ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#path.
          else if (state.key == "_ENV" && !(state is ChildParseState)) throwExpected("[", source, uri, null) // state #3
//                 ^^^^^ reference local state_417
//                       ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#key.
//                                          ^^^^^ reference local state_417
//                                                   ^^^^^^^^^^^^^^^ reference local ChildParseState_689
//                                                                     ^^^^^^^^^^^^^ reference local throwExpected_846
//                                                                                        ^^^^^^ reference local source_415
//                                                                                                ^^^ reference local uri_413
          else throwExpected("=", source, uri, null) // state #4
//             ^^^^^^^^^^^^^ reference local throwExpected_846
//                                ^^^^^^ reference local source_415
//                                        ^^^ reference local uri_413
        else if (state.op is "="|"[") throwExpected("value or {", source, uri, null) // state #5/#7
//               ^^^^^ reference local state_417
//                     ^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#op.
//                                    ^^^^^^^^^^^^^ reference local throwExpected_846
//                                                                ^^^^^^ reference local source_415
//                                                                        ^^^ reference local uri_413
        else if (state.op == "key") throwExpected("]", source, uri, null) // state #9
//               ^^^^^ reference local state_417
//                     ^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#op.
//                                  ^^^^^^^^^^^^^ reference local throwExpected_846
//                                                     ^^^^^^ reference local source_415
//                                                             ^^^ reference local uri_413
        else if (state.op == "]") throwExpected("=", source, uri, null) // state #10
//               ^^^^^ reference local state_417
//                     ^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#op.
//                                ^^^^^^^^^^^^^ reference local throwExpected_846
//                                                   ^^^^^^ reference local source_415
//                                                           ^^^ reference local uri_413
        else /* op is "value" */ throwExpected(", or ; or }", source, uri, null) // state #11
//                               ^^^^^^^^^^^^^ reference local throwExpected_846
//                                                            ^^^^^^ reference local source_415
//                                                                    ^^^ reference local uri_413
  
    local function parseValue(source: String, uri: Uri?, state: ParseState, token: RegexMatch, expected: String): (Boolean|Number|String)? =
//                 ^^^^^^^^^^ definition local parseValue_534
//                            ^^^^^^ definition local source_534
//                                    ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                            ^^^ definition local uri_534
//                                                 ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Uri#
//                                                       ^^^^^ definition local state_534
//                                                              ^^^^^^^^^^ reference local ParseState_642
//                                                                          ^^^^^ definition local token_534
//                                                                                 ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#
//                                                                                             ^^^^^^^^ definition local expected_534
//                                                                                                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                                                                                 ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                                                                                                                         ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                                                                                                                                ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
      let (value = if (token.value == "nil") null
//         ^^^^^ definition local value_535
//                     ^^^^^ reference local token_534
//                           ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
      else if (token.value == "true") true
//             ^^^^^ reference local token_534
//                   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
      else if (token.value == "false") false
//             ^^^^^ reference local token_534
//                   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
      else if (token.value.startsWith(Regex(#"\.?0[xX]"#)))
//             ^^^^^ reference local token_534
//                   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                         ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#startsWith().
//                                    ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
        parseHexLiteral(token, state.negate ?? false, source, uri)
//      ^^^^^^^^^^^^^^^ reference local parseHexLiteral_551
//                      ^^^^^ reference local token_534
//                             ^^^^^ reference local state_534
//                                   ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#negate.
//                                                    ^^^^^^ reference local source_534
//                                                            ^^^ reference local uri_534
      else if (token.value.startsWith(Regex(#"\.?[0-9]"#)))
//             ^^^^^ reference local token_534
//                   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                         ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#startsWith().
//                                    ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
        parseDecLiteral(token, state.negate ?? false, source, uri)
//      ^^^^^^^^^^^^^^^ reference local parseDecLiteral_565
//                      ^^^^^ reference local token_534
//                             ^^^^^ reference local state_534
//                                   ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#negate.
//                                                    ^^^^^^ reference local source_534
//                                                            ^^^ reference local uri_534
      else if (token.value.startsWith(Regex(#"["']"#)))
//             ^^^^^ reference local token_534
//                   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                         ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#startsWith().
//                                    ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
        parseShortString(token, source, uri)
//      ^^^^^^^^^^^^^^^^ reference local parseShortString_570
//                       ^^^^^ reference local token_534
//                              ^^^^^^ reference local source_534
//                                      ^^^ reference local uri_534
      else if (token.value.startsWith(Regex(#"\[=*+\["#)))
//             ^^^^^ reference local token_534
//                   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                         ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#startsWith().
//                                    ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
        parseLongString(token)
//      ^^^^^^^^^^^^^^^ reference local parseLongString_602
//                      ^^^^^ reference local token_534
      else throwExpected(if (state.negate == null) expected else "number", source, uri, token))
//         ^^^^^^^^^^^^^ reference local throwExpected_846
//                           ^^^^^ reference local state_534
//                                 ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#negate.
//                                                 ^^^^^^^^ reference local expected_534
//                                                                         ^^^^^^ reference local source_534
//                                                                                 ^^^ reference local uri_534
//                                                                                      ^^^^^ reference local token_534
        if (state.negate != null && !(value is Number))
//          ^^^^^ reference local state_534
//                ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#negate.
//                                    ^^^^^ reference local value_535
//                                             ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
          throwError("Attempted to negate non-numeric value", source, uri, token)
//        ^^^^^^^^^^ reference local throwError_826
//                                                            ^^^^^^ reference local source_534
//                                                                    ^^^ reference local uri_534
//                                                                         ^^^^^ reference local token_534
        else value
//           ^^^^^ reference local value_535
  
    local function parseHexLiteral(token: RegexMatch, negate: Boolean, source: String, uri: Uri?): Number =
//                 ^^^^^^^^^^^^^^^ definition local parseHexLiteral_551
//                                 ^^^^^ definition local token_551
//                                        ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#
//                                                    ^^^^^^ definition local negate_551
//                                                            ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                                                                     ^^^^^^ definition local source_551
//                                                                             ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                                                     ^^^ definition local uri_551
//                                                                                          ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Uri#
//                                                                                                 ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
      let (match = hexLiteralRegex.matchEntire(token.value) ?? throwError("Invalid numeric literal: \(token.value)", source, uri, token))
//         ^^^^^ definition local match_552
//                 ^^^^^^^^^^^^^^^ reference local hexLiteralRegex_793
//                                 ^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex#matchEntire().
//                                             ^^^^^ reference local token_551
//                                                   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                                             ^^^^^^^^^^ reference local throwError_826
//                                                                                                    ^^^^^ reference local token_551
//                                                                                                          ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                                                                                                   ^^^^^^ reference local source_551
//                                                                                                                           ^^^ reference local uri_551
//                                                                                                                                ^^^^^ reference local token_551
      let (intPart = match.groups[1]!!.value)
//         ^^^^^^^ definition local intPart_553
//                   ^^^^^ reference local match_552
//                         ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#groups.
//                                     ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
      let (fracPart = match.groups[2]?.value ?? "")
//         ^^^^^^^^ definition local fracPart_554
//                    ^^^^^ reference local match_552
//                          ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#groups.
//                                     ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
      let (exp = match.groups[3]?.value?.toInt())
//         ^^^ definition local exp_555
//               ^^^^^ reference local match_552
//                     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#groups.
//                                ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                       ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#toInt().
      let (base = if (exp != null || !fracPart.isEmpty) 0.0 else 0)
//         ^^^^ definition local base_556
//                    ^^^ reference local exp_555
//                                    ^^^^^^^^ reference local fracPart_554
//                                             ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#isEmpty.
      let (intValue: Number =
//         ^^^^^^^^ definition local intValue_557
//                   ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
        if (negate) intPart.chars.fold(base, (acc: Number, it) -> acc * 16 - parseHex(it))
//          ^^^^^^ reference local negate_551
//                  ^^^^^^^ reference local intPart_553
//                          ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#chars.
//                                ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#fold().
//                                     ^^^^ reference local base_556
//                                            ^^^ definition local acc_558
//                                                 ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                                                         ^^ definition local it_558
//                                                                ^^^ reference local acc_558
//                                                                           ^^^^^^^^ reference local parseHex_858
//                                                                                    ^^ reference local it_558
        else intPart.chars.fold(base, (acc: Number, it) -> acc * 16 + parseHex(it)))
//           ^^^^^^^ reference local intPart_553
//                   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#chars.
//                         ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#fold().
//                              ^^^^ reference local base_556
//                                     ^^^ definition local acc_559
//                                          ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                                                  ^^ definition local it_559
//                                                         ^^^ reference local acc_559
//                                                                    ^^^^^^^^ reference local parseHex_858
//                                                                             ^^ reference local it_559
      let (fracValue = fracPart.chars.foldBack(0.0, (it, acc: Float) -> acc / 16 + parseHex(it) / 16) as Float)
//         ^^^^^^^^^ definition local fracValue_560
//                     ^^^^^^^^ reference local fracPart_554
//                              ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#chars.
//                                    ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#foldBack().
//                                                   ^^ definition local it_560
//                                                       ^^^ definition local acc_560
//                                                            ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Float#
//                                                                      ^^^ reference local acc_560
//                                                                                 ^^^^^^^^ reference local parseHex_858
//                                                                                          ^^ reference local it_560
//                                                                                                       ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Float#
      let (value = if (fracPart.isEmpty) intValue else if (negate) intValue - fracValue else intValue + fracValue)
//         ^^^^^ definition local value_561
//                     ^^^^^^^^ reference local fracPart_554
//                              ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#isEmpty.
//                                       ^^^^^^^^ reference local intValue_557
//                                                         ^^^^^^ reference local negate_551
//                                                                 ^^^^^^^^ reference local intValue_557
//                                                                            ^^^^^^^^^ reference local fracValue_560
//                                                                                           ^^^^^^^^ reference local intValue_557
//                                                                                                      ^^^^^^^^^ reference local fracValue_560
        if (exp != null) value * (2.0 ** exp)
//          ^^^ reference local exp_555
//                       ^^^^^ reference local value_561
//                                       ^^^ reference local exp_555
        else value
//           ^^^^^ reference local value_561
  
    local function parseDecLiteral(token: RegexMatch, negate: Boolean, source: String, uri: Uri?): Number =
//                 ^^^^^^^^^^^^^^^ definition local parseDecLiteral_565
//                                 ^^^^^ definition local token_565
//                                        ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#
//                                                    ^^^^^^ definition local negate_565
//                                                            ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                                                                     ^^^^^^ definition local source_565
//                                                                             ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                                                     ^^^ definition local uri_565
//                                                                                          ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Uri#
//                                                                                                 ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
      let (value = if (negate) "-\(token.value)" else token.value)
//         ^^^^^ definition local value_566
//                     ^^^^^^ reference local negate_565
//                                 ^^^^^ reference local token_565
//                                       ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                                    ^^^^^ reference local token_565
//                                                          ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
        (if (value.contains(Regex("[.eE]"))) value.toFloatOrNull() else value.toIntOrNull())
//           ^^^^^ reference local value_566
//                 ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#contains().
//                          ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
//                                           ^^^^^ reference local value_566
//                                                 ^^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#toFloatOrNull().
//                                                                      ^^^^^ reference local value_566
//                                                                            ^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#toIntOrNull().
        ?? throwError("Invalid numeric literal: \(token.value)", source, uri, token)
//         ^^^^^^^^^^ reference local throwError_826
//                                                ^^^^^ reference local token_565
//                                                      ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                                               ^^^^^^ reference local source_565
//                                                                       ^^^ reference local uri_565
//                                                                            ^^^^^ reference local token_565
  
    local function parseShortString(token: RegexMatch, source: String, uri: Uri?): String =
//                 ^^^^^^^^^^^^^^^^ definition local parseShortString_570
//                                  ^^^^^ definition local token_570
//                                         ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#
//                                                     ^^^^^^ definition local source_570
//                                                             ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                                     ^^^ definition local uri_570
//                                                                          ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Uri#
//                                                                                 ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
      let (value = token.value.substring(1, token.value.length-1)) // drop quotes
//         ^^^^^ definition local value_571
//                 ^^^^^ reference local token_570
//                       ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                             ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#substring().
//                                          ^^^^^ reference local token_570
//                                                ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                                      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#length.
        value.replaceAllMapped(Regex(#"(?s-U)\\(z[ \f\n\t\x0b]*|x\p{XDigit}{1,2}|\d{1,3}+|u\{\p{XDigit}*}?|.)"#), (it) ->
//      ^^^^^ reference local value_571
//            ^^^^^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#replaceAllMapped().
//                             ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
//                                                                                                                 ^^ definition local it_572
          let (value = it.groups[1]!!.value)
//             ^^^^^ definition local value_573
//                     ^^ reference local it_572
//                        ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#groups.
//                                    ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
            if (value.startsWith("z")) ""
//              ^^^^^ reference local value_573
//                    ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#startsWith().
            else if (value == "\n") "\n"
//                   ^^^^^ reference local value_573
            else if (value == "a") "\u{7}"
//                   ^^^^^ reference local value_573
            else if (value == "b") "\u{8}"
//                   ^^^^^ reference local value_573
            else if (value == "f") "\u{c}"
//                   ^^^^^ reference local value_573
            else if (value == "n") "\n"
//                   ^^^^^ reference local value_573
            else if (value == "r") "\r"
//                   ^^^^^ reference local value_573
            else if (value == "t") "\t"
//                   ^^^^^ reference local value_573
            else if (value == "v") "\u{b}"
//                   ^^^^^ reference local value_573
            else if (value is "\\"|"\""|"'") value
//                   ^^^^^ reference local value_573
//                                           ^^^^^ reference local value_573
            else if (value.startsWith("x"))
//                   ^^^^^ reference local value_573
//                         ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#startsWith().
              if (!value.matches(Regex(#"(?-U)x\p{XDigit}{2}"#))) throwError("Invalid hex escape in string: \(it.value)", source, uri, it)
//                 ^^^^^ reference local value_573
//                       ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#matches().
//                               ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
//                                                                ^^^^^^^^^^ reference local throwError_826
//                                                                                                            ^^ reference local it_572
//                                                                                                               ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                                                                                                        ^^^^^^ reference local source_570
//                                                                                                                                ^^^ reference local uri_570
//                                                                                                                                     ^^ reference local it_572
              else
                let (c = parseHexOctet(value.drop(1)))
//                   ^ definition local c_587
//                       ^^^^^^^^^^^^^ reference local parseHexOctet_861
//                                     ^^^^^ reference local value_573
//                                           ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#drop().
                  if (c > 0x7f) throwError("Non-ascii hex escape in string: \(it.value)", source, uri, it)
//                    ^ reference local c_587
//                              ^^^^^^^^^^ reference local throwError_826
//                                                                            ^^ reference local it_572
//                                                                               ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                                                                        ^^^^^^ reference local source_570
//                                                                                                ^^^ reference local uri_570
//                                                                                                     ^^ reference local it_572
                  else c.toChar()
//                     ^ reference local c_587
//                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#toChar().
            else if (value.startsWith("u"))
//                   ^^^^^ reference local value_573
//                         ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#startsWith().
              if (!value.matches(Regex(#"(?-U)u\{\p{XDigit}{1,8}}"#))) throwError("Invalid unicode escape in string: \(it.value)", source, uri, it)
//                 ^^^^^ reference local value_573
//                       ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#matches().
//                               ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
//                                                                     ^^^^^^^^^^ reference local throwError_826
//                                                                                                                     ^^ reference local it_572
//                                                                                                                        ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                                                                                                                 ^^^^^^ reference local source_570
//                                                                                                                                         ^^^ reference local uri_570
//                                                                                                                                              ^^ reference local it_572
              else
                let (c = parseHex32(value.substring(2, value.length-1).padStart(8, "0")))
//                   ^ definition local c_593
//                       ^^^^^^^^^^ reference local parseHex32_864
//                                  ^^^^^ reference local value_573
//                                        ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#substring().
//                                                     ^^^^^ reference local value_573
//                                                           ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#length.
//                                                                     ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#padStart().
                  if (c > 0x10FFFF) throwError("Out-of-range unicode escape in string: \(it.value)", source, uri, it)
//                    ^ reference local c_593
//                                  ^^^^^^^^^^ reference local throwError_826
//                                                                                       ^^ reference local it_572
//                                                                                          ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                                                                                   ^^^^^^ reference local source_570
//                                                                                                           ^^^ reference local uri_570
//                                                                                                                ^^ reference local it_572
                  else c.toChar()
//                     ^ reference local c_593
//                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#toChar().
            else if (value.matches(Regex(#"[0-9]{1,3}"#)))
//                   ^^^^^ reference local value_573
//                         ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#matches().
//                                 ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
              let (c = value.toInt())
//                 ^ definition local c_597
//                     ^^^^^ reference local value_573
//                           ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#toInt().
                if (c > 0x7f) throwError("Non-ascii decimal escape in string: \(it.value)", source, uri, it)
//                  ^ reference local c_597
//                            ^^^^^^^^^^ reference local throwError_826
//                                                                              ^^ reference local it_572
//                                                                                 ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                                                                          ^^^^^^ reference local source_570
//                                                                                                  ^^^ reference local uri_570
//                                                                                                       ^^ reference local it_572
                else c.toChar()
//                   ^ reference local c_597
//                     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#toChar().
            else throwError("Invalid backslash in string: \(it.value)", source, uri, it))
//               ^^^^^^^^^^ reference local throwError_826
//                                                          ^^ reference local it_572
//                                                             ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                                                      ^^^^^^ reference local source_570
//                                                                              ^^^ reference local uri_570
//                                                                                   ^^ reference local it_572
  
    local function parseLongString(token: RegexMatch): String =
//                 ^^^^^^^^^^^^^^^ definition local parseLongString_602
//                                 ^^^^^ definition local token_602
//                                        ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#
//                                                     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
      // we know we start with [=â¦[ and end with ]=â¦] (end was validated in validateToken)
      // group 5 is starting equals, group 6 is the whole end
      let (value = token.value.substring(token.groups[5]!!.end-token.start+1, token.groups[6]!!.start-token.start))
//         ^^^^^ definition local value_605
//                 ^^^^^ reference local token_602
//                       ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                             ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#substring().
//                                       ^^^^^ reference local token_602
//                                             ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#groups.
//                                                         ^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#end.
//                                                             ^^^^^ reference local token_602
//                                                                   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#start.
//                                                                            ^^^^^ reference local token_602
//                                                                                  ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#groups.
//                                                                                              ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#start.
//                                                                                                    ^^^^^ reference local token_602
//                                                                                                          ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#start.
        if (value.startsWith("\n")) value.drop(1)
//          ^^^^^ reference local value_605
//                ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#startsWith().
//                                  ^^^^^ reference local value_605
//                                        ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#drop().
        else value
//           ^^^^^ reference local value_605
  
    // endregion
    // region Converters
  
    // path specs are already in reversed order
    local pathConverters: List<Pair<List<PathEntry>, (unknown) -> Any>> =
//        ^^^^^^^^^^^^^^ definition local pathConverters_613
//                        ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                             ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#
//                                  ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                                       ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/PathEntry#
//                                                                ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#
      splitPathConverters(converters.toMap())
//    ^^^^^^^^^^^^^^^^^^^ reference local splitPathConverters_63
//                        ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#converters.
//                                   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#toMap().
  
    local function convert(value: Value, path: List<PathEntry>): unknown =
//                 ^^^^^^^ definition local convert_616
//                         ^^^^^ definition local value_616
//                                ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Value#
//                                       ^^^^ definition local path_616
//                                             ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                                                  ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/PathEntry#
      let (path = path.reverse())
//         ^^^^ definition local path_617
//                ^^^^ reference local path_616
//                     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#reverse().
      let (f = pathConverters.findOrNull((p) -> comparePaths(path, p.key))?.value)
//         ^ definition local f_618
//             ^^^^^^^^^^^^^^ reference local pathConverters_613
//                            ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#findOrNull().
//                                        ^ definition local p_618
//                                              ^^^^^^^^^^^^ reference local comparePaths_630
//                                                           ^^^^ reference local path_617
//                                                                 ^ reference local p_618
//                                                                   ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#key.
//                                                                          ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#value.
      let (f = f ?? converters.getOrNull(value.getClass()))
//         ^ definition local f_619
//             ^ reference local f_618
//                  ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#converters.
//                             ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#getOrNull().
//                                       ^^^^^ reference local value_616
//                                             ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#getClass().
        if (f != null) f.apply(value) else value
//          ^ reference local f_619
//                     ^ reference local f_619
//                       ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Function1#apply().
//                             ^^^^^ reference local value_616
//                                         ^^^^^ reference local value_616
  
    local function convertKey(value: Value, state: ParseState): unknown =
//                 ^^^^^^^^^^ definition local convertKey_622
//                            ^^^^^ definition local value_622
//                                   ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Value#
//                                          ^^^^^ definition local state_622
//                                                 ^^^^^^^^^^ reference local ParseState_642
      if (state.isListIndex(value) && (useDynamic || state is ChildParseState)) value // don't convert indices
//        ^^^^^ reference local state_622
//              ^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#isListIndex().
//                          ^^^^^ reference local value_622
//                                     ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#useDynamic.
//                                                   ^^^^^ reference local state_622
//                                                            ^^^^^^^^^^^^^^^ reference local ChildParseState_689
//                                                                              ^^^^^ reference local value_622
      else if (value is String) value // String keys are treated as properties
//             ^^^^^ reference local value_622
//                      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                              ^^^^^ reference local value_622
      else
        let (f = converters.getOrNull(value.getClass()))
//           ^ definition local f_626
//               ^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Parser#converters.
//                          ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#getOrNull().
//                                    ^^^^^ reference local value_622
//                                          ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#getClass().
          if (f != null) f.apply(value) else value
//            ^ reference local f_626
//                       ^ reference local f_626
//                         ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Function1#apply().
//                               ^^^^^ reference local value_622
//                                           ^^^^^ reference local value_622
  
    // the path and spec must already be reversed
    local function comparePaths(path: List<PathEntry>, pathSpec: List<PathEntry>): Boolean =
//                 ^^^^^^^^^^^^ definition local comparePaths_630
//                              ^^^^ definition local path_630
//                                    ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                                         ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/PathEntry#
//                                                     ^^^^^^^^ definition local pathSpec_630
//                                                               ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//                                                                    ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/PathEntry#
//                                                                                 ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
      path.length >= pathSpec.length && path.zip(pathSpec).every((p) ->
//    ^^^^ reference local path_630
//         ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#length.
//                   ^^^^^^^^ reference local pathSpec_630
//                            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#length.
//                                      ^^^^ reference local path_630
//                                           ^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#zip().
//                                               ^^^^^^^^ reference local pathSpec_630
//                                                         ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#every().
//                                                                ^ definition local p_631
        if (p.second is Prop && p.second.name == "*") p.first is Prop
//          ^ reference local p_631
//            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#second.
//                      ^^^^ reference local Prop_47
//                              ^ reference local p_631
//                                ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#second.
//                                       ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Prop#name.
//                                                    ^ reference local p_631
//                                                      ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#first.
//                                                               ^^^^ reference local Prop_47
        else if (p.second is Key && p.second.key == "*") p.first is Key
//               ^ reference local p_631
//                 ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#second.
//                           ^^^ reference local Key_55
//                                  ^ reference local p_631
//                                    ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#second.
//                                           ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/Key#key.
//                                                       ^ reference local p_631
//                                                         ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#first.
//                                                                  ^^^ reference local Key_55
        else p.first == p.second
//           ^ reference local p_631
//             ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#first.
//                      ^ reference local p_631
//                        ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#second.
      )
  
    // endregion
  }
  
  // region State
  
  local open class ParseState {
//                 ^^^^^^^^^^ definition local ParseState_642
    map: Map // note: can't provide key/value types, converters can return non-Lua types
//  ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#map.
//       ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#
    list: List
//  ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#list.
//        ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
    key: Any = null
//  ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#key.
//       ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#
    op: ("["|"key"|"]"|"=")? // op is "["? iff key is null
//  ^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#op.
    negate: Boolean? // negative numbers are unary negation
//  ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#negate.
//          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
    path: List<PathEntry>
//  ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#path.
//        ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
//             ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/PathEntry#
  
    function toValue(useDynamic: Boolean, _, _): Dynamic|Mapping =
//           ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#toValue().
//                   ^^^^^^^^^^ definition local useDynamic_650
//                               ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                                               ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#
//                                                       ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
      if (useDynamic) (map.toDynamic()) {
//        ^^^^^^^^^^ reference local useDynamic_650
//                     ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#map.
//                         ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#toDynamic().
        ...list
//         ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#list.
      } else map.toMapping() // list should be empty
//           ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#map.
//               ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#toMapping().
  
    function put(value, token, useDynamic: Boolean): ParseState =
//           ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#put().
//               ^^^^^ definition local value_655
//                      ^^^^^ definition local token_655
//                             ^^^^^^^^^^ definition local useDynamic_655
//                                         ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                                                   ^^^^^^^^^^ reference local ParseState_642
      if (useDynamic && isListIndex(key)) add(value, token)
//        ^^^^^^^^^^ reference local useDynamic_655
//                      ^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#isListIndex().
//                                  ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#key.
//                                        ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#add().
//                                            ^^^^^ reference local value_655
//                                                   ^^^^^ reference local token_655
      else (this) {
        map = super.map.put(super.key!!, value)
//      ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#map.
//                  ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#map.
//                      ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#put().
//                                ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#key.
//                                       ^^^^^ reference local value_655
        key = null
//      ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#key.
        op = null
//      ^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#op.
        negate = null
//      ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#negate.
      }
  
    // used for _ENV[0]=value expressions when useDynamic is true
    function add(value, _): ParseState =
//           ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#add().
//               ^^^^^ definition local value_665
//                          ^^^^^^^^^^ reference local ParseState_642
      (this) {
        list = super.list.add(value)
//      ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#list.
//                   ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#list.
//                        ^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#add().
//                            ^^^^^ reference local value_665
        key = null
//      ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#key.
        op = null
//      ^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#op.
        negate = null
//      ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#negate.
      }
  
    // only use this for [key]= keys
    function setKey(value, _): ParseState =
//           ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#setKey().
//                  ^^^^^ definition local value_674
//                             ^^^^^^^^^^ reference local ParseState_642
      (this) {
        key = value
//      ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#key.
//            ^^^^^ reference local value_674
        op = "key"
//      ^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#op.
        negate = null
//      ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#negate.
      }
  
    function negate(): ParseState =
//           ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#negate().
//                     ^^^^^^^^^^ reference local ParseState_642
      (this) { negate = !(super.negate ?? false) }
//             ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#negate.
//                              ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#negate.
  
    function isListIndex(key): Boolean =
//           ^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#isListIndex().
//                       ^^^ definition local key_684
//                             ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
      // note: Lua indexes are 1-based
      key is Int && key == list.length + 1
//    ^^^ reference local key_684
//           ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
//                  ^^^ reference local key_684
//                         ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#list.
//                              ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#length.
  }
  
  local class ChildParseState extends ParseState {
//            ^^^^^^^^^^^^^^^ definition local ChildParseState_689
//                                    ^^^^^^^^^^ reference local ParseState_642
    parent: ParseState
//  ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#parent.
//          ^^^^^^^^^^ reference local ParseState_642
    brace: RegexMatch // token for opening {, used for error reporting
//  ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#brace.
//         ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#
    op: ("["|"key"|"]"|"="|"value")? // op is "["|"value"? iff key is null
//  ^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#op.
    mapStart: RegexMatch? // non-null if !map.isEmpty
//  ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#mapStart.
//            ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#
    listStart: RegexMatch? // non-null if !list.isEmpty
//  ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#listStart.
//             ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#
  
    function toValue(useDynamic: Boolean, source: String, uri: Uri?): Dynamic|Mapping|Listing =
//           ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#toValue().
//                   ^^^^^^^^^^ definition local useDynamic_696
//                               ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                                        ^^^^^^ definition local source_696
//                                                ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                        ^^^ definition local uri_696
//                                                             ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Uri#
//                                                                    ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#
//                                                                            ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                                                                                    ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
      if (useDynamic) (map.toDynamic()) {
//        ^^^^^^^^^^ reference local useDynamic_696
//                     ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#map.
//                         ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#toDynamic().
        ...list
      } else if (map.isEmpty) list.toListing()
//               ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#map.
//                   ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#isEmpty.
//                            ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#list.
//                                 ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#toListing().
      else if (list.isEmpty) map.toMapping()
//             ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#list.
//                  ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#isEmpty.
//                           ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#map.
//                               ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#toMapping().
      else throwError2("Table has both list elements and map entries", source, uri, mapStart!!, "first map entry", listStart!!, "first list entry")
//         ^^^^^^^^^^^ reference local throwError2_831
//                                                                     ^^^^^^ reference local source_696
//                                                                             ^^^ reference local uri_696
//                                                                                  ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#mapStart.
//                                                                                                                 ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#listStart.
  
    function put(value, token: RegexMatch, _): ChildParseState =
//           ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#put().
//               ^^^^^ definition local value_703
//                      ^^^^^ definition local token_703
//                             ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#
//                                             ^^^^^^^^^^^^^^^ reference local ChildParseState_689
      if (isListIndex(key)) add(value, token)
//        ^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#isListIndex().
//                    ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#key.
//                          ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#add().
//                              ^^^^^ reference local value_703
//                                     ^^^^^ reference local token_703
      else (this) {
        map = super.map.put(super.key!!, value)
//      ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#map.
//                  ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#map.
//                      ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#put().
//                                ^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#key.
//                                       ^^^^^ reference local value_703
        key = null
//      ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#key.
        op = "value"
//      ^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#op.
        negate = null
//      ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#negate.
      }
  
    function add(value, token: RegexMatch): ChildParseState =
//           ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#add().
//               ^^^^^ definition local value_712
//                      ^^^^^ definition local token_712
//                             ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#
//                                          ^^^^^^^^^^^^^^^ reference local ChildParseState_689
      (this) {
        list = super.list.add(value)
//      ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#list.
//                   ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#list.
//                        ^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#add().
//                            ^^^^^ reference local value_712
        key = null // key could be [int]
//      ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#key.
        op = "value"
//      ^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#op.
        negate = null
//      ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#negate.
        listStart = super.listStart ?? token
//      ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#listStart.
//                        ^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#listStart.
//                                     ^^^^^ reference local token_712
      }
  
    function setKey(value, token: RegexMatch): ChildParseState =
//           ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#setKey().
//                  ^^^^^ definition local value_721
//                         ^^^^^ definition local token_721
//                                ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#
//                                             ^^^^^^^^^^^^^^^ reference local ChildParseState_689
      (this) {
        key = value
//      ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#key.
//            ^^^^^ reference local value_721
        op = "key"
//      ^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#op.
        negate = null
//      ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#negate.
        mapStart =
//      ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#mapStart.
          // don't update mapStart if this will become a listing element
          if (isListIndex(value)) super.mapStart
//            ^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ParseState#isListIndex().
//                        ^^^^^ reference local value_721
//                                      ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#mapStart.
          else super.mapStart ?? token
//                   ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ChildParseState#mapStart.
//                               ^^^^^ reference local token_721
      }
  }
  
  // endregion
  // region Tokens
  
  // Regex that matches a single Lua token, or an invalid character.
  // This regex assumes line endings have already been normalized, so no carriage returns exist.
  // Error states:
  // - Group 2 is ""
  // - Group 3 is not "\""?
  // - Group 4 is not "'"?
  // - Group 6 is ""
  // - Last group is non-null
  local const tokenRegex: Regex = Regex(##"""
//            ^^^^^^^^^^ definition local tokenRegex_744
//                        ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex#
//                                ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    (?x-uU)
      --(?:               # comment
        \[(?<eq1>=*)\[    # long comment (equals are GROUP 1)
        (?>(?>
          [^]]
        | ](?!\k<eq1>])
        )*)
        (]\k<eq1>]|\z)    # match end or EOF (GROUP 2)
      | .*                # short comment
      )
    | [\w&&\D]\w*         # identifier
    | "(?>(?>             # short literal string (")
        [^\\\n"]
      | \\(?>z[\ \f\n\t\x0b]*|x\p{XDigit}{2}|\d{1,3}|u\{\p{XDigit}+}|(?s:.)|\z)
      )*)("|(?s:.)|\z)    # match string truncated by newline or EOF (GROUP 3)
    | '(?>(?>             # short literal string (')
        [^\\\n']
      | \\(?>z[\ \f\n\t\x0b]*|x\p{XDigit}{2}|\d{1,3}|u\{\p{XDigit}+}|(?s:.)|\z)
      )*)('|(?s:.)|\z)    # match string truncated by newline or EOF (GROUP 4)
    | \[(?<eq2>=*)\[      # long literal string (equals are GROUP 5)
      (?>(?>
        [^]]
      | ](?!\k<eq2>])
      )*)
      (]\k<eq2>]|\z)      # match end or EOF (GROUP 6)
      # for the numeric literals, they consume extra periods and hex digits and throw a parse error
      # this regex aims to match everything Lua 5.3 itself will tokenize as numeric
    | \.?0[xX](?:(?:[pP][-+]?)?[.\p{XDigit}])*   # hex numeric literal
    | \.?\d(?:(?:[eE][-+]?)?[.\p{XDigit}])*   # dec numeric literal
    | [-+*%^\#&|(){}\[\];,]   # single-char operators
    | <[<=]? | >[>=]? | //? | ~=? | ==? | ::? | \.{1,3}   # multi-char operators
    | ([^\ \f\n\t\x0b])   # invalid token (last group)
    """##)
  
  // checks the error states documented on tokenRegex
  // returns the same token, or throws an error
  local const function validateToken(token: RegexMatch, source: String, uri: Uri?): RegexMatch =
//                     ^^^^^^^^^^^^^ definition local validateToken_781
//                                   ^^^^^ definition local token_781
//                                          ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#
//                                                      ^^^^^^ definition local source_781
//                                                              ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                                      ^^^ definition local uri_781
//                                                                           ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Uri#
//                                                                                  ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#
    if (token.groups[2]?.value == "") throwError("Expected ]\(token.groups[1]!!.value)], found EOF", source, uri, token.groups[2]!!)
//      ^^^^^ reference local token_781
//            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#groups.
//                       ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                    ^^^^^^^^^^ reference local throwError_826
//                                                            ^^^^^ reference local token_781
//                                                                  ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#groups.
//                                                                              ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                                                                                   ^^^^^^ reference local source_781
//                                                                                                           ^^^ reference local uri_781
//                                                                                                                ^^^^^ reference local token_781
//                                                                                                                      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#groups.
    else let (g = token.groups[3]) if (g != null && g.value != "\"") throwExpected("\"", source, uri, g)
//            ^ definition local g_783
//                ^^^^^ reference local token_781
//                      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#groups.
//                                     ^ reference local g_783
//                                                  ^ reference local g_783
//                                                    ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                                                   ^^^^^^^^^^^^^ reference local throwExpected_846
//                                                                                       ^^^^^^ reference local source_781
//                                                                                               ^^^ reference local uri_781
//                                                                                                    ^ reference local g_783
    else let (g = token.groups[4]) if (g != null && g.value != "'") throwExpected("'", source, uri, g)
//            ^ definition local g_784
//                ^^^^^ reference local token_781
//                      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#groups.
//                                     ^ reference local g_784
//                                                  ^ reference local g_784
//                                                    ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                                                  ^^^^^^^^^^^^^ reference local throwExpected_846
//                                                                                     ^^^^^^ reference local source_781
//                                                                                             ^^^ reference local uri_781
//                                                                                                  ^ reference local g_784
    else if (token.groups[6]?.value == "") throwError("Expected ]\(token.groups[5]!!.value)], found EOF", source, uri, token.groups[6]!!)
//           ^^^^^ reference local token_781
//                 ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#groups.
//                            ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                         ^^^^^^^^^^ reference local throwError_826
//                                                                 ^^^^^ reference local token_781
//                                                                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#groups.
//                                                                                   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                                                                                        ^^^^^^ reference local source_781
//                                                                                                                ^^^ reference local uri_781
//                                                                                                                     ^^^^^ reference local token_781
//                                                                                                                           ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#groups.
    else let (g = token.groups.last) if (g != null) throwError("Illegal token \(g.value)", source, uri, g)
//            ^ definition local g_786
//                ^^^^^ reference local token_781
//                      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#groups.
//                             ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#last.
//                                       ^ reference local g_786
//                                                  ^^^^^^^^^^ reference local throwError_826
//                                                                              ^ reference local g_786
//                                                                                ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                                                                                         ^^^^^^ reference local source_781
//                                                                                                 ^^^ reference local uri_781
//                                                                                                      ^ reference local g_786
    else token
//       ^^^^^ reference local token_781
  
  // groups:
  // 1 - integral part (String)
  // 2 - fractional part (String?)
  // 3 - exponent (String(!isEmpty)?)
  local const hexLiteralRegex: Regex = Regex(#"(?-U)0[xX](?=\.?\p{XDigit})(\p{XDigit}*)(?:\.(\p{XDigit}*))?(?:[pP]([-+]?\d+))?"#)
//            ^^^^^^^^^^^^^^^ definition local hexLiteralRegex_793
//                             ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex#
//                                     ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
  
  local const identifierRegex = Regex("[a-zA-Z_][a-zA-Z0-9_]*")
//            ^^^^^^^^^^^^^^^ definition local identifierRegex_795
//                              ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
  
  // endregion
  // region Errors
  
  local class ErrorLocation {
//            ^^^^^^^^^^^^^ definition local ErrorLocation_800
    row1: Int // 1-based row
//  ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#row1.
//        ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
    col1: Int // 1-based column
//  ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#col1.
//        ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
    line: String // with prefix
//  ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#line.
//        ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
    marker: String
//  ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#marker.
//          ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
  }
  
  local const function errorLocation(source: String, token: RegexMatch): ErrorLocation =
//                     ^^^^^^^^^^^^^ definition local errorLocation_807
//                                   ^^^^^^ definition local source_807
//                                           ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                   ^^^^^ definition local token_807
//                                                          ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#
//                                                                       ^^^^^^^^^^^^^ reference local ErrorLocation_800
    let (lineOffset = (source.take(token.start).lastIndexOfOrNull("\n") ?? -1) + 1)
//       ^^^^^^^^^^ definition local lineOffset_808
//                     ^^^^^^ reference local source_807
//                            ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#take().
//                                 ^^^^^ reference local token_807
//                                       ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#start.
//                                              ^^^^^^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#lastIndexOfOrNull().
    // locate the entire line the token starts on
    let (lineEndOffset = source.drop(token.start).indexOfOrNull("\n"))
//       ^^^^^^^^^^^^^ definition local lineEndOffset_810
//                       ^^^^^^ reference local source_807
//                              ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#drop().
//                                   ^^^^^ reference local token_807
//                                         ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#start.
//                                                ^^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#indexOfOrNull().
    let (source = if (lineEndOffset != null) source.take(token.start + lineEndOffset) else source)
//       ^^^^^^ definition local source_811
//                    ^^^^^^^^^^^^^ reference local lineEndOffset_810
//                                           ^^^^^^ reference local source_807
//                                                  ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#take().
//                                                       ^^^^^ reference local token_807
//                                                             ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#start.
//                                                                     ^^^^^^^^^^^^^ reference local lineEndOffset_810
//                                                                                         ^^^^^^ reference local source_807
    // zero-width split so we don't lose any blank lines from the end
    let (lines = source.split(Regex(#"(?<=\n)"#)))
//       ^^^^^ definition local lines_813
//               ^^^^^^ reference local source_811
//                      ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#split().
//                            ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
    let (_line = lines.last)
//       ^^^^^ definition local _line_814
//               ^^^^^ reference local lines_813
//                     ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#last.
    let (_row1 = lines.length)
//       ^^^^^ definition local _row1_815
//               ^^^^^ reference local lines_813
//                     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#length.
    let (col0 = math.min(token.start - lineOffset, _line.length) as Int) // min() is just in case
//       ^^^^ definition local col0_816
//              ^^^^ reference pkl . pkl 0.29.0 `pkl.math`/
//                   ^^^ reference pkl . pkl 0.29.0 `pkl.math`/min().
//                       ^^^^^ reference local token_807
//                             ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#start.
//                                     ^^^^^^^^^^ reference local lineOffset_808
//                                                 ^^^^^ reference local _line_814
//                                                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#length.
//                                                                  ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
    let (rowPrefix = "\(_row1) | ")
//       ^^^^^^^^^ definition local rowPrefix_817
//                      ^^^^^ reference local _row1_815
    let (markerPrefix = " ".repeat(rowPrefix.length - 3) + " | ")
//       ^^^^^^^^^^^^ definition local markerPrefix_818
//                          ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#repeat().
//                                 ^^^^^^^^^ reference local rowPrefix_817
//                                           ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#length.
      new ErrorLocation {
//        ^^^^^^^^^^^^^ reference local ErrorLocation_800
        row1 = _row1
//      ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/row1.
//             ^^^^^ reference local _row1_815
        col1 = col0 + 1
//      ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/col1.
//             ^^^^ reference local col0_816
        line = "\(rowPrefix)\(_line)"
//      ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/line.
//                ^^^^^^^^^ reference local rowPrefix_817
//                            ^^^^^ reference local _line_814
        marker = markerPrefix + " ".repeat(col0) + "^".repeat(math.max(1, math.min(_line.length - col0, token.end - token.start)) as UInt)
//      ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/marker.
//               ^^^^^^^^^^^^ reference local markerPrefix_818
//                                  ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#repeat().
//                                         ^^^^ reference local col0_816
//                                                     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#repeat().
//                                                            ^^^^ reference pkl . pkl 0.29.0 `pkl.math`/
//                                                                 ^^^ reference pkl . pkl 0.29.0 `pkl.math`/max().
//                                                                        ^^^^ reference pkl . pkl 0.29.0 `pkl.math`/
//                                                                             ^^^ reference pkl . pkl 0.29.0 `pkl.math`/min().
//                                                                                 ^^^^^ reference local _line_814
//                                                                                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#length.
//                                                                                                ^^^^ reference local col0_816
//                                                                                                      ^^^^^ reference local token_807
//                                                                                                            ^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#end.
//                                                                                                                  ^^^^^ reference local token_807
//                                                                                                                        ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#start.
//                                                                                                                                   ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/UInt#
      }
  
  local const function throwError(msg: String, source: String, uri: Uri?, token: RegexMatch): nothing =
//                     ^^^^^^^^^^ definition local throwError_826
//                                ^^^ definition local msg_826
//                                     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                             ^^^^^^ definition local source_826
//                                                     ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                             ^^^ definition local uri_826
//                                                                  ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Uri#
//                                                                        ^^^^^ definition local token_826
//                                                                               ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#
    let (loc = errorLocation(source, token))
//       ^^^ definition local loc_827
//             ^^^^^^^^^^^^^ reference local errorLocation_807
//                           ^^^^^^ reference local source_826
//                                   ^^^^^ reference local token_826
    let (errMsg = "\(msg)\n\n\(loc.line)\n\(loc.marker)\nat \(uri ?? "<input>"):\(loc.row1):\(loc.col1)")
//       ^^^^^^ definition local errMsg_828
//                   ^^^ reference local msg_826
//                             ^^^ reference local loc_827
//                                 ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#line.
//                                          ^^^ reference local loc_827
//                                              ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#marker.
//                                                            ^^^ reference local uri_826
//                                                                                ^^^ reference local loc_827
//                                                                                    ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#row1.
//                                                                                            ^^^ reference local loc_827
//                                                                                                ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#col1.
      throw(errMsg)
//          ^^^^^^ reference local errMsg_828
  
  local const function throwError2(msg: String, source: String, uri: Uri?, token1: RegexMatch, note1: String, token2: RegexMatch, note2: String): nothing =
//                     ^^^^^^^^^^^ definition local throwError2_831
//                                 ^^^ definition local msg_831
//                                      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                              ^^^^^^ definition local source_831
//                                                      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                              ^^^ definition local uri_831
//                                                                   ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Uri#
//                                                                         ^^^^^^ definition local token1_831
//                                                                                 ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#
//                                                                                             ^^^^^ definition local note1_831
//                                                                                                    ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                                                                            ^^^^^^ definition local token2_831
//                                                                                                                    ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#
//                                                                                                                                ^^^^^ definition local note2_831
//                                                                                                                                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
    let (loc1 = errorLocation(source, token1))
//       ^^^^ definition local loc1_832
//              ^^^^^^^^^^^^^ reference local errorLocation_807
//                            ^^^^^^ reference local source_831
//                                    ^^^^^^ reference local token1_831
    let (loc2 = errorLocation(source, token2))
//       ^^^^ definition local loc2_833
//              ^^^^^^^^^^^^^ reference local errorLocation_807
//                            ^^^^^^ reference local source_831
//                                    ^^^^^^ reference local token2_831
    let (errMsg =
//       ^^^^^^ definition local errMsg_834
      if (loc1.row1 == loc2.row1) // same line
//        ^^^^ reference local loc1_832
//             ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#row1.
//                     ^^^^ reference local loc2_833
//                          ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#row1.
        if (loc1.col1 <= loc2.col1) // loc1 comes first
//          ^^^^ reference local loc1_832
//               ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#col1.
//                       ^^^^ reference local loc2_833
//                            ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#col1.
          "\(msg)\n\n\(loc1.line)\n\(loc1.marker) \(note1)\n\(loc2.marker) \(note2)\nat \(uri ?? "<input>"):\(loc1.row1):\(loc1.col1)"
//           ^^^ reference local msg_831
//                     ^^^^ reference local loc1_832
//                          ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#line.
//                                   ^^^^ reference local loc1_832
//                                        ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#marker.
//                                                  ^^^^^ reference local note1_831
//                                                            ^^^^ reference local loc2_833
//                                                                 ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#marker.
//                                                                           ^^^^^ reference local note2_831
//                                                                                        ^^^ reference local uri_831
//                                                                                                            ^^^^ reference local loc1_832
//                                                                                                                 ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#row1.
//                                                                                                                         ^^^^ reference local loc1_832
//                                                                                                                              ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#col1.
        else // loc2 comes first
          "\(msg)\n\n\(loc1.line)\n\(loc2.marker) \(note2)\n\(loc1.marker) \(note1)\nat \(uri ?? "<input>"):\(loc1.row1):\(loc2.col1)"
//           ^^^ reference local msg_831
//                     ^^^^ reference local loc1_832
//                          ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#line.
//                                   ^^^^ reference local loc2_833
//                                        ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#marker.
//                                                  ^^^^^ reference local note2_831
//                                                            ^^^^ reference local loc1_832
//                                                                 ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#marker.
//                                                                           ^^^^^ reference local note1_831
//                                                                                        ^^^ reference local uri_831
//                                                                                                            ^^^^ reference local loc1_832
//                                                                                                                 ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#row1.
//                                                                                                                         ^^^^ reference local loc2_833
//                                                                                                                              ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#col1.
      else if (loc1.row1 < loc2.row1) // loc1 comes first
//             ^^^^ reference local loc1_832
//                  ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#row1.
//                         ^^^^ reference local loc2_833
//                              ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#row1.
        "\(msg)\n\n\(loc1.line)\n\(loc1.marker) \(note1)\n\(loc2.line)\n\(loc2.marker) \(note2)\nat \(uri ?? "<input>"):\(loc1.row1):\(loc1.col1)"
//         ^^^ reference local msg_831
//                   ^^^^ reference local loc1_832
//                        ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#line.
//                                 ^^^^ reference local loc1_832
//                                      ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#marker.
//                                                ^^^^^ reference local note1_831
//                                                          ^^^^ reference local loc2_833
//                                                               ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#line.
//                                                                        ^^^^ reference local loc2_833
//                                                                             ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#marker.
//                                                                                       ^^^^^ reference local note2_831
//                                                                                                    ^^^ reference local uri_831
//                                                                                                                        ^^^^ reference local loc1_832
//                                                                                                                             ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#row1.
//                                                                                                                                     ^^^^ reference local loc1_832
//                                                                                                                                          ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#col1.
      else // loc2 comes first
        "\(msg)\n\n\(loc2.line)\n\(loc2.marker) \(note2)\n\(loc1.line)\n\(loc1.marker) \(note1)\nat \(uri ?? "<input>"):\(loc2.row1):\(loc2.col1)")
//         ^^^ reference local msg_831
//                   ^^^^ reference local loc2_833
//                        ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#line.
//                                 ^^^^ reference local loc2_833
//                                      ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#marker.
//                                                ^^^^^ reference local note2_831
//                                                          ^^^^ reference local loc1_832
//                                                               ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#line.
//                                                                        ^^^^ reference local loc1_832
//                                                                             ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#marker.
//                                                                                       ^^^^^ reference local note1_831
//                                                                                                    ^^^ reference local uri_831
//                                                                                                                        ^^^^ reference local loc2_833
//                                                                                                                             ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#row1.
//                                                                                                                                     ^^^^ reference local loc2_833
//                                                                                                                                          ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/ErrorLocation#col1.
      throw(errMsg)
//          ^^^^^^ reference local errMsg_834
  
  local const function throwExpected(expected: String, source: String, uri: Uri?, token: RegexMatch?): nothing =
//                     ^^^^^^^^^^^^^ definition local throwExpected_846
//                                   ^^^^^^^^ definition local expected_846
//                                             ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                     ^^^^^^ definition local source_846
//                                                             ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                                     ^^^ definition local uri_846
//                                                                          ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Uri#
//                                                                                ^^^^^ definition local token_846
//                                                                                       ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#
    let (found =
//       ^^^^^ definition local found_847
      if (token == null) "EOF"
//        ^^^^^ reference local token_846
      else if (token.value == "\n") "newline"
//             ^^^^^ reference local token_846
//                   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
      else if (token.value.isEmpty) "EOF"
//             ^^^^^ reference local token_846
//                   ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                         ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#isEmpty.
      else "token `\(token.value.replaceAllMapped(Regex(#"[\n\\]"#), (it) -> if (it.value == "\n") "\\n" else #"\\"#))`")
//                   ^^^^^ reference local token_846
//                         ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
//                               ^^^^^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#replaceAllMapped().
//                                                ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Regex().
//                                                                    ^^ definition local it_851
//                                                                               ^^ reference local it_851
//                                                                                  ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#value.
      throwError("Expected \(expected), found \(found)", source, uri, token ?? new RegexMatch { value = ""; start = source.length; end = source.length })
//    ^^^^^^^^^^ reference local throwError_826
//                           ^^^^^^^^ reference local expected_846
//                                              ^^^^^ reference local found_847
//                                                       ^^^^^^ reference local source_846
//                                                               ^^^ reference local uri_846
//                                                                    ^^^^^ reference local token_846
//                                                                                 ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/RegexMatch#
//                                                                                              ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/value.
//                                                                                                          ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/start.
//                                                                                                                  ^^^^^^ reference local source_846
//                                                                                                                         ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#length.
//                                                                                                                                 ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/end.
//                                                                                                                                       ^^^^^^ reference local source_846
//                                                                                                                                              ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#length.
  
  // endregion
  // endregion
  // region Hex
  
  /// parseHex tranforms a single hexadecimal character into its unsigned integer representation.
  local const function parseHex(digit: Char): UInt8 = nybbleLut.getOrNull(digit) ?? throw("Unrecognized hex digit: \(digit)")
//                     ^^^^^^^^ definition local parseHex_858
//                     documentation
//                     > parseHex tranforms a single hexadecimal character into its unsigned integer representation.
//                              ^^^^^ definition local digit_859
//                                     ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Char#
//                                            ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/UInt8#
//                                                    ^^^^^^^^^ reference local nybbleLut_871
//                                                              ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#getOrNull().
//                                                                        ^^^^^ reference local digit_859
//                                                                                                                   ^^^^^ reference local digit_859
  
  /// parseHexOctet tranforms a two hexadecimal characters into its unsigned integer representation.
  local const function parseHexOctet(octet: String(length == 2)): UInt8 = byteLut.getOrNull(octet) ?? throw("Unrecognized hex octet: \(octet)")
//                     ^^^^^^^^^^^^^ definition local parseHexOctet_861
//                     documentation
//                     > parseHexOctet tranforms a two hexadecimal characters into its unsigned integer representation.
//                                   ^^^^^ definition local octet_862
//                                          ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                 ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#length.
//                                                                ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/UInt8#
//                                                                        ^^^^^^^ reference local byteLut_881
//                                                                                ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#getOrNull().
//                                                                                          ^^^^^ reference local octet_862
//                                                                                                                                     ^^^^^ reference local octet_862
  
  /// parseHex32 transforms an 8 character hexidecimal string into its UInt32 representation.
  local const function parseHex32(s: String(length == 8)): UInt32 =
//                     ^^^^^^^^^^ definition local parseHex32_864
//                     documentation
//                     > parseHex32 transforms an 8 character hexidecimal string into its UInt32 representation.
//                                ^ definition local s_865
//                                   ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                          ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#length.
//                                                         ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/UInt32#
    IntSeq(0, 7)
//  ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/IntSeq().
      .step(2)
//     ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/IntSeq#step().
      .map((it) -> s.substring(it, it + 2))
//     ^^^ reference pkl . pkl 0.29.0 `pkl.base`/IntSeq#map().
//          ^^ definition local it_868
//                 ^ reference local s_865
//                   ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#substring().
//                             ^^ reference local it_868
//                                 ^^ reference local it_868
      .fold(0, (acc, it) -> acc.shl(8) + parseHexOctet(it))
//     ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#fold().
//              ^^^ definition local acc_869
//                   ^^ definition local it_869
//                          ^^^ reference local acc_869
//                                       ^^^^^^^^^^^^^ reference local parseHexOctet_861
//                                                     ^^ reference local it_869
  
  local const nybbleLut = new Mapping {
//            ^^^^^^^^^ definition local nybbleLut_871
//                            ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
    for (n in IntSeq(0, 9)) {
//       ^ definition local n_872
//            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/IntSeq().
      [n.toString()] = n
//     ^ reference local n_872
//       ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#toString().
//                     ^ reference local n_872
    }
    for (n in IntSeq(0xa, 0xf)) {
//       ^ definition local n_875
//            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/IntSeq().
      [n.toRadixString(16)] = n
//     ^ reference local n_875
//       ^^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#toRadixString().
//                            ^ reference local n_875
      [n.toRadixString(16).toUpperCase()] = n
//     ^ reference local n_875
//       ^^^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#toRadixString().
//                         ^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#toUpperCase().
//                                          ^ reference local n_875
    }
  }
  
  local const byteLut = new Mapping {
//            ^^^^^^^ definition local byteLut_881
//                          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
    for (k,v in nybbleLut) {
//       ^ definition local k_882
//         ^ definition local v_882
//              ^^^^^^^^^ reference local nybbleLut_871
      for (k2,v2 in nybbleLut) {
//         ^^ definition local k2_883
//            ^^ definition local v2_883
//                  ^^^^^^^^^ reference local nybbleLut_871
        ["\(k)\(k2)"] = v.shl(4) + v2
//          ^ reference local k_882
//              ^^ reference local k2_883
//                      ^ reference local v_882
//                                 ^^ reference local v2_883
      }
    }
  }
  
  // endregion
  
  output {} // makes the above endregion comment work
//^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.lua 1.1.1 `lua.pkl`/output.
  
