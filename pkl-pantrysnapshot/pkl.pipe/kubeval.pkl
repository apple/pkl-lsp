  //===----------------------------------------------------------------------===//
  // Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     https://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  //===----------------------------------------------------------------------===//
  /// A Pkl implementation of a Kubernetes manifest validation tool, inspired by
  /// [kubeval](https://github.com/instrumenta/kubeval)
  ///
  /// Example usage:
  ///
  /// ```
  /// pkl eval <(pkl eval -m package://pkg.pkl-lang.org/pkl-pantry/pkl.pipe@<VERSION>#/kubeval.pkl> < deployment.yaml)
  /// # or
  /// pkl eval <(pkl eval -p input=deployment.yaml package://pkg.pkl-lang.org/pkl-pantry/pkl.pipe@<VERSION>#/kubeval.pkl)
  /// ```
  @ModuleInfo { minPklVersion = "0.24.0" }
// ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/ModuleInfo#
//              ^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.pipe 1.0.2 `kubeval.pkl`/minPklVersion.
  module pkl.pipe.kubeval
//^^^^^^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.pipe 1.0.2 `kubeval.pkl`/
  amends "yaml.pkl"
  
  import "@k8s.contrib/convert.pkl"
  
  parser {
//^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.pipe 1.0.2 `kubeval.pkl`/parser.
    useMapping = true
//  ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.pipe 1.0.2 `kubeval.pkl`/useMapping.
  }
  
  input = (read?("prop:input").ifNonNull((it) -> read(it as String)) as Resource?) ?? super.input
//^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.pipe 1.0.2 `kubeval.pkl`/input.
//                             ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#ifNonNull().
//                                        ^^ definition local it_36
//                                                    ^^ reference local it_36
//                                                          ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                                      ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Resource#
//                                                                                          ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.pipe 1.0.2 `text.pkl`/input.
  
  output = (convert) {
//^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.pipe 1.0.2 `kubeval.pkl`/output.
//          ^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/k8s.contrib 1.0.3 `convert.pkl`/
    resourcesToConvert =
//  ^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.pipe 1.0.2 `kubeval.pkl`/resourcesToConvert.
      let (pipe = module.pipe)
//         ^^^^ definition local pipe_40
//                       ^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.pipe 1.0.2 `yaml.pkl`/pipe.
        if (pipe is List)
//          ^^^^ reference local pipe_40
//                  ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#
          pipe
//        ^^^^ reference local pipe_40
        else
          List(pipe)
//        ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
//             ^^^^ reference local pipe_40
  }.output
//  ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Module#output.
  
