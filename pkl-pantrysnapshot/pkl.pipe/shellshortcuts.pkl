  //===----------------------------------------------------------------------===//
  // Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     https://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  //===----------------------------------------------------------------------===//
  /// Shell aliases for using Pkl pipe tools.
  ///
  /// To make using the Pkl pipe tools even easier, this module produces a shell aliases file
  /// that is compatible with both bash and zsh.
  ///
  /// Usage:
  ///
  /// ```
  /// # First, generate the aliases file
  /// pkl eval package://pkg.pkl-lang.org/pkl-pantry/pkl.pipe@<version>#/shellshortcuts.pkl > ~/.pklpipe
  ///
  /// # Then add it to your profile or rc file.
  ///
  /// # For zsh, use:
  /// echo 'source ~/.pklpipe' >> ~/.zshrc
  ///
  /// # For bash with a login shell, use:
  /// echo 'source ~/.pklpipe' >> ~/.bash_profile
  ///
  /// # Then use the shortcuts in commands like:
  /// curl https://ifconfig.co/json | pjq 'pipe.ip'
  /// ```
  @ModuleInfo { minPklVersion = "0.24.0" }
// ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/ModuleInfo#
//              ^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.pipe 1.0.2 `shellshortcuts.pkl`/minPklVersion.
  module pkl.pipe.shellshortcuts
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.pipe 1.0.2 `shellshortcuts.pkl`/
  
  import "pkl:reflect"
  
  local modules: Mapping<String, Module> = new {
//      ^^^^^^^ definition local modules_43
//               ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                               ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Module#
    ["ptq"] = import("./text.pkl")
    ["pjq"] = import("./json.pkl")
    ["pyq"] = import("./yaml.pkl")
    ["pkubeval"] = import("./kubeval.pkl")
  }
  
  output {
//^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.pipe 1.0.2 `shellshortcuts.pkl`/output.
    text = modules
//  ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.pipe 1.0.2 `shellshortcuts.pkl`/text.
//         ^^^^^^^ reference local modules_43
      .toMap()
//     ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#toMap().
      .entries
//     ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#entries.
      .map((el) ->
//     ^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#map().
//          ^^ definition local el_54
        shellFuncForPath(
//      ^^^^^^^^^^^^^^^^ reference local shellFuncForPath_62
          el.first,
//        ^^ reference local el_54
//           ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#first.
          reflect.Module(el.second).uri
//        ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.reflect`/
//                ^^^^^^ reference pkl . pkl 0.29.0 `pkl.reflect`/Module().
//                       ^^ reference local el_54
//                          ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Pair#second.
//                                  ^^^ reference pkl . pkl 0.29.0 `pkl.reflect`/Module#uri.
        )
      ).join("\n") + "\n"
//      ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#join().
  }
  
  /// [shellFuncForPath] renders a function definition which is compatible with
  /// both bash and zsh. If a single argument is passed to the function, it will
  /// be passed to a Pkl invocation with `--expression`; if no arguments are passed,
  /// the Pkl module will be invoked without any arguments.
  local function shellFuncForPath(functionName: String, modulePath: String): String = #"""
//               ^^^^^^^^^^^^^^^^ definition local shellFuncForPath_62
//               documentation
//               > `shellFuncForPath` renders a function definition which is compatible with
//               > both bash and zsh. If a single argument is passed to the function, it will
//               > be passed to a Pkl invocation with `--expression`; if no arguments are passed,
//               > the Pkl module will be invoked without any arguments.
//                                ^^^^^^^^^^^^ definition local functionName_66
//                                              ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                      ^^^^^^^^^^ definition local modulePath_66
//                                                                  ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                                           ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
    function \#(functionName) {
//              ^^^^^^^^^^^^ reference local functionName_66
        if [[ -n $1 && "$1" != -* ]]; then
          pkl eval \#(modulePath) --expression "$1" "${@:2}"
//                    ^^^^^^^^^^ reference local modulePath_66
        else
          pkl eval \#(modulePath) $@
//                    ^^^^^^^^^^ reference local modulePath_66
        fi
    }
    """#
  
