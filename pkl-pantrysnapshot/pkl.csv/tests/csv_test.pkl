  //===----------------------------------------------------------------------===//
  // Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     https://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  //===----------------------------------------------------------------------===//
  module pkl.csv.tests.csv_test
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/
  
  amends "pkl:test"
  
  import "../csv.pkl"
  
  // Rendering functions
  local renderer = new csv.Renderer {}
//      ^^^^^^^^ definition local renderer_23
//                         ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/Renderer#
  local function value(val: csv.Value): String = renderer.renderValue(val)
//               ^^^^^ definition local value_24
//                     ^^^ definition local val_24
//                              ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/Value#
//                                      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                               ^^^^^^^^ reference local renderer_23
//                                                        ^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/Renderer#renderValue().
//                                                                    ^^^ reference local val_24
  local function doc(val: csv.ListLike): String = renderer.renderDocument(val)
//               ^^^ definition local doc_25
//                   ^^^ definition local val_25
//                            ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/ListLike#
//                                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                ^^^^^^^^ reference local renderer_23
//                                                         ^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/Renderer#renderDocument().
//                                                                        ^^^ reference local val_25
  local function anon(val: csv.ListLike): String = (renderer) { includeHeader = false }.renderDocument(val)
//               ^^^^ definition local anon_26
//                    ^^^ definition local val_26
//                             ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/ListLike#
//                                        ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                                  ^^^^^^^^ reference local renderer_23
//                                                              ^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/includeHeader.
//                                                                                      ^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/Renderer#renderDocument().
//                                                                                                     ^^^ reference local val_26
  local function pad(val: csv.ListLike) = (renderer) { unification = "pad" }.renderDocument(val)
//               ^^^ definition local pad_27
//                   ^^^ definition local val_27
//                            ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/ListLike#
//                                         ^^^^^^^^ reference local renderer_23
//                                                     ^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/unification.
//                                                                           ^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/Renderer#renderDocument().
//                                                                                          ^^^ reference local val_27
  local function drop(val: csv.ListLike) = (renderer) { unification = "drop" }.renderDocument(val)
//               ^^^^ definition local drop_28
//                    ^^^ definition local val_28
//                             ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/ListLike#
//                                          ^^^^^^^^ reference local renderer_23
//                                                      ^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/unification.
//                                                                             ^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/Renderer#renderDocument().
//                                                                                            ^^^ reference local val_28
  local function error(val: csv.ListLike) = (renderer) { unification = "error" }.renderDocument(val)
//               ^^^^^ definition local error_29
//                     ^^^ definition local val_29
//                              ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/ListLike#
//                                           ^^^^^^^^ reference local renderer_23
//                                                       ^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/unification.
//                                                                               ^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/Renderer#renderDocument().
//                                                                                              ^^^ reference local val_29
  
  local parser = new csv.Parser {}
//      ^^^^^^ definition local parser_31
//                       ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/Parser#
  local function pValue(_input: String): csv.Value =
//               ^^^^^^ definition local pValue_32
//                      ^^^^^^ definition local _input_32
//                              ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                           ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/Value#
    let (lineBreak = "\r\n")
//       ^^^^^^^^^ definition local lineBreak_33
      let (table = (parser) { input = _input + lineBreak }.parsed.toList())
//         ^^^^^ definition local table_34
//                  ^^^^^^ reference local parser_31
//                            ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/input.
//                                    ^^^^^^ reference local _input_32
//                                             ^^^^^^^^^ reference local lineBreak_33
//                                                         ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/Parser#parsed.
//                                                                ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#toList().
        if (table.length != 1 || table.first.toList().length != 1)
//          ^^^^^ reference local table_34
//                ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#length.
//                               ^^^^^ reference local table_34
//                                     ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#first.
          throw("When parsing '\(_input)', expecting a single row, with a single column, but found \(table.length) rows and \(table.firstOrNull?.toList()?.length) columns")
//                               ^^^^^^ reference local _input_32
//                                                                                                   ^^^^^ reference local table_34
//                                                                                                         ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#length.
//                                                                                                                            ^^^^^ reference local table_34
//                                                                                                                                  ^^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#firstOrNull.
        else
          table.first.toList().first
//        ^^^^^ reference local table_34
//              ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List#first.
  
  local values = new Mapping<String, Mapping<csv.Value, String>> {
//      ^^^^^^ definition local values_40
//                   ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                           ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                   ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                                               ^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/Value#
//                                                      ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
    ["string"] = new Mapping<String, String> {
//                   ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                           ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                   ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
      ["some string"] = "some string"
      [#"string with "quotes""#] = #""string with ""quotes""""#
      ["a string, with a comma"] = #""a string, with a comma""#
      ["a multiline\nstring"] = "a multiline\nstring"
      ["a multiline\r\nstring with carriage return"] = #""a multiline\#r\#nstring with carriage return""#
      ["\""] = "\"\"\"\""
      ["\t\\\r"] = "\t\\\r"
    }
    ["number"] = new Mapping<Number, String> {
//                   ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                           ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
//                                   ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
      [0] = "0"
      [42] = "42"
      [-1] = "-1"
      [0.42] = "0.42"
      [-1.0] = "-1.0"
    }
    ["other"] = new Mapping<Boolean?, String> {
//                  ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Mapping#
//                          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
//                                    ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
      [true] = "true"
      [false] = "false"
      [null] = ""
    }
  }
  
  local exampleTable = new Listing {
//      ^^^^^^^^^^^^ definition local exampleTable_64
//                         ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
    default = (i) -> new Dynamic { lineNumber = i description = "This is line \(i) of the table" }
//  ^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/default.
//             ^ definition local i_65
//                       ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#
//                                 ^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/lineNumber.
//                                              ^ reference local i_65
//                                                ^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/description.
//                                                                              ^ reference local i_65
    for (_ in IntSeq(1, 5)) {
//            ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/IntSeq().
      new {}
    }
  }
  
  local typealias MyTypeAlias = *String|Int
//                ^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/MyTypeAlias#
//                               ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                      ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
  
  local open class Base {
//                 ^^^^ definition local Base_73
    hidden quoted: Boolean = false
//         ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/Base#quoted.
//                 ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
    local quote = if (quoted) "\"" else ""
//        ^^^^^ definition local quote_75
//                    ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/Base#quoted.
    foo: MyTypeAlias = "FOO!"
//  ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/Base#foo.
//       ^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/MyTypeAlias#
    bar: String = "Just wanted to say \(quote)hello\(quote)"
//  ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/Base#bar.
//       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#
//                                      ^^^^^ reference local quote_75
//                                                   ^^^^^ reference local quote_75
    baz: Int = -42
//  ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/Base#baz.
//       ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Int#
    qux: Float = 0.1337
//  ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/Base#qux.
//       ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Float#
  }
  
  local class DerivedOne extends Base {
//            ^^^^^^^^^^ definition local DerivedOne_82
//                               ^^^^ reference local Base_73
    quux: Number = -0.42
//  ^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/DerivedOne#quux.
//        ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Number#
  }
  
  local class DerivedTwo extends Base {
//            ^^^^^^^^^^ definition local DerivedTwo_86
//                               ^^^^ reference local Base_73
    corge: Boolean = false
//  ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/DerivedTwo#corge.
//         ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Boolean#
  }
  
  local homogeneousListing = new Listing<DerivedTwo> {
//      ^^^^^^^^^^^^^^^^^^ definition local homogeneousListing_90
//                               ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                                       ^^^^^^^^^^ reference local DerivedTwo_86
    new { foo = "first row" }
//        ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/foo.
    new { foo = "second\nrow" }
//        ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/foo.
    new { baz = 0 }
//        ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/baz.
    new { qux = 1.337 }
//        ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/qux.
  }
  
  local heterogeneousListing = new Listing<Base> {
//      ^^^^^^^^^^^^^^^^^^^^ definition local heterogeneousListing_97
//                                 ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
//                                         ^^^^ reference local Base_73
    new DerivedTwo {}
//      ^^^^^^^^^^ reference local DerivedTwo_86
    new Base { quoted = true }
//      ^^^^ reference local Base_73
//             ^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/quoted.
    new DerivedOne {}
//      ^^^^^^^^^^ reference local DerivedOne_82
    new Base {}
//      ^^^^ reference local Base_73
  }
  
  facts {
//^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/facts.
    for (category, cases in values) {
//       ^^^^^^^^ definition local category_105
//                 ^^^^^ definition local cases_105
//                          ^^^^^^ reference local values_40
      ["Rendering \(category) values"] {
//                  ^^^^^^^^ reference local category_105
        for (value, rendered in cases) {
//           ^^^^^ definition local value_107
//                  ^^^^^^^^ definition local rendered_107
//                              ^^^^^ reference local cases_105
          if (value(value) == rendered) true else let (_ = trace("\(value(value)) != \(rendered)")) false
//            ^^^^^ reference local value_24
//                  ^^^^^ reference local value_107
//                            ^^^^^^^^ reference local rendered_107
//                                                                  ^^^^^ reference local value_24
//                                                                        ^^^^^ reference local value_107
//                                                                                     ^^^^^^^^ reference local rendered_107
        }
      }
  
      ["Parsing \(category) values"] {
//                ^^^^^^^^ reference local category_105
        for (value, rendered in cases) {
//           ^^^^^ definition local value_113
//                  ^^^^^^^^ definition local rendered_113
//                              ^^^^^ reference local cases_105
          pValue(rendered) == value?.toString() // because the parser does not have type information
//        ^^^^^^ reference local pValue_32
//               ^^^^^^^^ reference local rendered_113
//                            ^^^^^ reference local value_113
//                                   ^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Any#toString().
        }
      }
    }
  
    ["Rendering list(like) values"] {
      anon(new Dynamic { new Dynamic { "foo" 1 false "bar" } }) == """
//    ^^^^ reference local anon_26
//             ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#
//                           ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#
          foo,1,false,bar
  
          """.replaceAll("\n", "\r\n")
//            ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#replaceAll().
  
      doc(new Dynamic { new Dynamic { foo = 42 bar = false } }) == """
//    ^^^ reference local doc_25
//            ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#
//                          ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#
//                                    ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/foo.
//                                             ^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/bar.
          foo,bar
          42,false
  
          """.replaceAll("\n", "\r\n")
//            ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#replaceAll().
  
      doc(exampleTable) == """
//    ^^^ reference local doc_25
//        ^^^^^^^^^^^^ reference local exampleTable_64
          lineNumber,description
          0,This is line 0 of the table
          1,This is line 1 of the table
          2,This is line 2 of the table
          3,This is line 3 of the table
          4,This is line 4 of the table
  
          """.replaceAll("\n", "\r\n")
//            ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#replaceAll().
  
      anon(exampleTable) == """
//    ^^^^ reference local anon_26
//         ^^^^^^^^^^^^ reference local exampleTable_64
          0,This is line 0 of the table
          1,This is line 1 of the table
          2,This is line 2 of the table
          3,This is line 3 of the table
          4,This is line 4 of the table
  
          """.replaceAll("\n", "\r\n")
//            ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#replaceAll().
    }
  
    ["Rendering polymorphic lists; unifications"] {
      pad(heterogeneousListing) == #"""
//    ^^^ reference local pad_27
//        ^^^^^^^^^^^^^^^^^^^^ reference local heterogeneousListing_97
          foo,bar,baz,qux,corge,quux
          FOO!,Just wanted to say hello,-42,0.1337,false,
          FOO!,"Just wanted to say ""hello""",-42,0.1337,,
          FOO!,Just wanted to say hello,-42,0.1337,,-0.42
          FOO!,Just wanted to say hello,-42,0.1337,,
  
          """#.replaceAll("\n", "\r\n")
//             ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#replaceAll().
  
      drop(heterogeneousListing) == #"""
//    ^^^^ reference local drop_28
//         ^^^^^^^^^^^^^^^^^^^^ reference local heterogeneousListing_97
          foo,bar,baz,qux,corge
          FOO!,Just wanted to say hello,-42,0.1337,false
          FOO!,"Just wanted to say ""hello""",-42,0.1337,
          FOO!,Just wanted to say hello,-42,0.1337,
          FOO!,Just wanted to say hello,-42,0.1337,
  
          """#.replaceAll("\n", "\r\n")
//             ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#replaceAll().
  
      error(exampleTable) == doc(exampleTable)
//    ^^^^^ reference local error_29
//          ^^^^^^^^^^^^ reference local exampleTable_64
//                           ^^^ reference local doc_25
//                               ^^^^^^^^^^^^ reference local exampleTable_64
  
      module.catch(() -> error(heterogeneousListing))
//           ^^^^^ reference pkl . pkl 0.29.0 `pkl.test`/catch().
//                       ^^^^^ reference local error_29
//                             ^^^^^^^^^^^^^^^^^^^^ reference local heterogeneousListing_97
        .startsWith("Invalid input: CSV can only render rows with all the same properties.")
//       ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#startsWith().
    }
  
    ["Rendering errors"] {
      module.catch(() -> doc(new Dynamic { Map("foo", 1, "bar", 2) Map("foo", 1) }))
//           ^^^^^ reference pkl . pkl 0.29.0 `pkl.test`/catch().
//                       ^^^ reference local doc_25
//                               ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#
//                                         ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map().
//                                                                 ^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map().
        .startsWith("Invalid input: CSV can only render rows with all the same properties.")
//       ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#startsWith().
    }
  
    ["Parsing with header information"] {
      // A little finicky, but if the parser doesn't have type information, every _value_ comes out stringy.
      new csv.Parser {
//            ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/Parser#
        input = """
//      ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/input.
          foo,bar,baz,qux,corge\r
          first row,Just wanted to say hello,-42,0.1337,false\r
          second
          row,Just wanted to say hello,-42,0.1337,false\r
          FOO!,Just wanted to say hello,0,0.1337,false\r
          FOO!,Just wanted to say hello,-42,1.337,false\r
  
          """
        includeHeader = true
//      ^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/includeHeader.
      }.parsed == new Listing {
//      ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/Parser#parsed.
//                    ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
          for (row in homogeneousListing) {
//             ^^^ definition local row_195
//                    ^^^^^^^^^^^^^^^^^^ reference local homogeneousListing_90
            row.toDynamic().toMap().mapValues((_, v) -> v.toString()).toDynamic()
//          ^^^ reference local row_195
//              ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Typed#toDynamic().
//                          ^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Dynamic#toMap().
//                                  ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#mapValues().
//                                                ^ definition local v_196
//                                                      ^ reference local v_196
//                                                                    ^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Map#toDynamic().
          }
        }.toList()
//        ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toList().
  
      new csv.Parser {
//            ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/Parser#
        input = """
//      ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/input.
          foo,bar,baz,qux,corge\r
          first row,Just wanted to say hello,-42,0.1337,false\r
          second
          row,Just wanted to say hello,-42,0.1337,false\r
          FOO!,Just wanted to say hello,0,0.1337,false\r
          FOO!,Just wanted to say hello,-42,1.337,false\r
  
          """
        rowClass = DerivedTwo
//      ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/rowClass.
//                 ^^^^^^^^^^ reference local DerivedTwo_86
        includeHeader = true
//      ^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/includeHeader.
      }.parsed == homogeneousListing.toList()
//      ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/Parser#parsed.
//                ^^^^^^^^^^^^^^^^^^ reference local homogeneousListing_90
//                                   ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toList().
    }
  
    ["Parsing with class, without header information"] {
      new csv.Parser {
//            ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/Parser#
        input = anon(homogeneousListing)
//      ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/input.
//              ^^^^ reference local anon_26
//                   ^^^^^^^^^^^^^^^^^^ reference local homogeneousListing_90
        rowClass = DerivedTwo
//      ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/rowClass.
//                 ^^^^^^^^^^ reference local DerivedTwo_86
        includeHeader = false
//      ^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/includeHeader.
      }.parsed == homogeneousListing.toList()
//      ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/Parser#parsed.
//                ^^^^^^^^^^^^^^^^^^ reference local homogeneousListing_90
//                                   ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toList().
    }
  
    ["Rendering and parsing CRLF alternatives"] {
      for (break in List("\n", "\r", "\t", "ð", "\r\r\n\n")) {
//         ^^^^^ definition local break_224
//                  ^^^^ reference pkl . pkl 0.29.0 `pkl.base`/List().
        ...new Listing {
//             ^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#
          local quote = if (break == "\n") "\"" else ""
//              ^^^^^ definition local quote_226
//                          ^^^^^ reference local break_224
          local source = """
//              ^^^^^^ definition local source_227
            foo,bar,baz,qux,corge\r
            first row,Just wanted to say hello,-42,0.1337,false\r
            \(quote)second
//            ^^^^^ reference local quote_226
            row\(quote),Just wanted to say hello,-42,0.1337,false\r
//               ^^^^^ reference local quote_226
            FOO!,Just wanted to say hello,0,0.1337,false\r
            FOO!,Just wanted to say hello,-42,1.337,false\r
  
            """.replaceAll("\r\n", break)
//              ^^^^^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/String#replaceAll().
//                                 ^^^^^ reference local break_224
  
          new csv.Renderer {
//                ^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/Renderer#
            lineBreak = break
//          ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/lineBreak.
//                      ^^^^^ reference local break_224
          }.renderDocument(homogeneousListing) == source
//          ^^^^^^^^^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/Renderer#renderDocument().
//                         ^^^^^^^^^^^^^^^^^^ reference local homogeneousListing_90
//                                                ^^^^^^ reference local source_227
  
          new csv.Parser {
//                ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/Parser#
            input = source
//          ^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/input.
//                  ^^^^^^ reference local source_227
            rowClass = DerivedTwo
//          ^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/rowClass.
//                     ^^^^^^^^^^ reference local DerivedTwo_86
            includeHeader = true
//          ^^^^^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/includeHeader.
            lineBreak = break
//          ^^^^^^^^^ definition pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `tests/csv_test.pkl`/lineBreak.
//                      ^^^^^ reference local break_224
          }.parsed == homogeneousListing.toList()
//          ^^^^^^ reference pkl . package://pkg.pkl-lang.org/pkl-pantry/pkl.csv 1.1.0 `csv.pkl`/Parser#parsed.
//                    ^^^^^^^^^^^^^^^^^^ reference local homogeneousListing_90
//                                       ^^^^^^ reference pkl . pkl 0.29.0 `pkl.base`/Listing#toList().
        }
      }
    }
  }
  
