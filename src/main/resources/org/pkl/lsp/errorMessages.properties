modifierIsNotApplicable=\
Modifier ''{0}'' is not applicable to {1}

modifierAbstractConflictsWithOpen=\
Modifier 'abstract' conflicts with 'open'

modifierOpenConflictsWithAbstract=\
Modifier 'open' conflicts with 'abstract'

missingModifierLocal=\
Missing modifier 'local'

invalidModifier=\
Invalid modifier

invalidModifierForObjectPropertyOrMethod=\
Invalid modifier for object property or method

invalidModifierConstWithoutLocal=\
Modifier 'const' can only be applied to object members who are also 'local'

invalidCharacterEscapeSequence=\
Invalid character escape sequence

invalidUnicodeEscapeSequence=\
Invalid Unicode escape sequence

unterminatedUnicodeEscapeSequence=\
Missing `}` at the end of Unicode escape sequence

invalidEscapeInNumber=\
The separator character (`_`) cannot follow `0x`, `0b`, `.`, `e`, or 'E' in a number literal

intTooLarge=\
Int literal is too large

floatTooLarge=\
Float literal is too large

stringIndentationMustMatchLastLine=\
Line must match or exceed indentation of the String's last line

stringContentMustBeginOnNewLine=\
The content of a multi-line string must begin on a new line

closingStringDelimiterMustBeginOnNewLine=\
The closing delimiter of a multi-line string must begin on a new line

cannotGlobTripleDots=\
Cannot combine glob imports with triple-dot module URIs

globPatternHasNoMatches=\
Glob pattern has no matches

tooManyFunctionParameters=\
Function literals can have at most five parameters

unexpectedCurlyProbablyAmendsExpression=\
Unexpected token: `'{'`

notAUnion=\
Only type unions can have a default marker (*)

multipleUnionDefaults=\
A type union cannot have more than one default type

missingCommaSeparator=\
Missing `,` separator

missingDelimiter=\
Missing `{0}` delimiter

wrongDelimiter=\
Expected delimiter `{0}`, but got `{1}`

annotationHasNoName=\
Expected annotation to be a named type

notAnnotation=\
Type is not an annotation

cannotFindType=\
Cannot find type

typeIsAbstract=\
Type is abstract and cannot be instantiated

cannotResolveImport=\
Cannot resolve import.

unresolvedProperty=\
Unresolved property `{0}`

unresolvedReference=\
Unresolved reference `{0}`

malformedUri=\
Malformed URI: `{0}`.

missingPackageAuthority=\
Package URIs must contain an authority segment, for example, `//example.com` in `package://example.com/package@1.0.0#/MyModule.pkl`.

missingPackagePath=\
Package URIs must contain an path segment, for example, `/package@1.0.0` in `package://example.com/package@1.0.0#/MyModule.pkl`.

missingPackageVersion=\
Package URIs must contain a version, for example, `@1.0.0` in `package://example.com/package@1.0.0#/MyModule.pkl`.

invalidSemver=\
Invalid semver: `{0}`.

invalidPackageChecksum=\
Invalid checksum: `{0}`. Checksums should have form `::sha256:<checksum>`.

missingPackageFragment=\
Package URIs must contain a fragment, for example, `#/MyModule.pkl` in `package://example.com/package@1.0.0#/MyModule.pkl`.

invalidFragmentPath=\
Package imports must contain a fragment that starts with `/`.

missingPackageSources=\
Missing sources for package `{0}`.

cannotFindDependency=\
Cannot find dependency `{0}`.

pklProjectFileModified=\
A PklProject file was modified.

unsyncedPklProject=\
Project is out of sync.

pklCliNotConfigured=\
Pkl CLI is not configured and not found in PATH.

pklCliNotFound=\
Could not find Pkl CLI in PATH.\n\
\n\
To enable richer language features, first install the Pkl CLI: https://pkl-lang.org/main/current/pkl-cli/index.html#installation.

invalidSyntax=\
Invalid syntax.

missingSyntax=\
Missing `{0}`.

cannotAccessFromConst=\
Cannot {0} `{1}` from here because it is not `const`.

cannotAccessConstFromStaticBody=\
Cannot {0} `{1}` from here because it is not `const`.\n\
\n\
Classes, typealiases, and annotations can only reference `const` members of their enclosing module.\n\
\n\
To fix, either make the accessed member `const`, or add a self-import of this module, and access this member off of the self import.

shouldNotAccessConstFromTypeAlias=\
Should not {0} `{1}` from here because it is not `const`.\n\
\n\
In Pkl 0.26, typealiases can only reference `const` members of their enclosing module, and this code is considered breaking.\n\
\n\
To fix, either make the accessed member `const`, or add a self-import of this module, and access this member off of the self import.

cannotReferenceModuleFromConst=\
Cannot reference `module` from here because it is not `const`

cannotReferenceThisFromConst=\
Cannot reference `this` from here because it is not `const`

missingArgument=\
Missing argument for `{0}`

tooManyArguments=\
Too many arguments for method `{0}`

redundantConversion=\
`{0}()` conversion is redundant

recursivePropertyReference=\
Recursive property reference

expressionIsAlwaysTrue=\
Expression is always 'true'

expressionIsAlwaysFalse=\
Expression is always 'false'

typeCastCannotSucceed=\
Type cast cannot succeed

typeCastIsRedundant=\
Type cast is redundant

nonNullIsRedundant=\
Non-null assertion is redundant

nullCoalescingIsRedundant=\
Null coalescing is redundant

typeOrConstraintMismatch=\
{0} mismatch.\n\
Required: {1}\n\
Actual: {2}

constraintViolation=\
Constraint violation.\n\
Required: {0}\n\
Found: {1}
